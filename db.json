{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/raytaylorism/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/weixin_favicon.png","path":"weixin_favicon.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb5.jpg","path":"css/images/psb5.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/weixin.jpg","path":"css/images/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/zhifubao.jpg","path":"css/images/zhifubao.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/avert.png","path":"css/images/avert.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/mm_facetoface_collect.png","path":"css/images/mm_facetoface_collect.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb10.jpg","path":"css/images/psb10.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb1.jpg","path":"css/images/psb1.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb3.jpg","path":"css/images/psb3.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb8.jpg","path":"css/images/psb8.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb2.jpg","path":"css/images/psb2.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb4.jpg","path":"css/images/psb4.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb6.jpg","path":"css/images/psb6.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb7.jpg","path":"css/images/psb7.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/psb9.jpg","path":"css/images/psb9.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat02.jpg","path":"img/2016/11/tomcat02.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat01.jpg","path":"img/2016/11/tomcat01.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat04.jpg","path":"img/2016/11/tomcat04.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat03.jpg","path":"img/2016/11/tomcat03.jpg","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat06.png","path":"img/2016/11/tomcat06.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/12/spring-cloud.png","path":"img/2016/12/spring-cloud.png","modified":0,"renderable":1},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat05.gif","path":"img/2016/11/tomcat05.gif","modified":0,"renderable":1}],"Cache":[{"_id":"themes/raytaylorism/.gitignore","hash":"cda50c55bb8864e0d96101140b62f880f690da5e","modified":1482665054579},{"_id":"themes/raytaylorism/LICENSE","hash":"115cd028ae511ac9e3d30eb4933da38136a68513","modified":1482665054580},{"_id":"themes/raytaylorism/Gruntfile.js","hash":"f69b2e716f955c9d5a23ca1b75394098c1494858","modified":1482665054580},{"_id":"themes/raytaylorism/_config.yml","hash":"70913e23e0bcc9304de1d43feba920f39e2a8c0a","modified":1479910206985},{"_id":"themes/raytaylorism/README.md","hash":"22e6879f7391381df4e70fe144ac53369327f907","modified":1482665054581},{"_id":"themes/raytaylorism/log.md","hash":"99d57a50f8f328d1a313b47bb636d0dc5656d813","modified":1482665054616},{"_id":"themes/raytaylorism/.git/config","hash":"5ff990d670d3d50a6927c35226489b56a8d90fc8","modified":1482665054570},{"_id":"themes/raytaylorism/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1482665054561},{"_id":"themes/raytaylorism/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1482664879849},{"_id":"themes/raytaylorism/.git/index","hash":"93a52edf026049748a83611009675ebb1fcdf89b","modified":1482665054705},{"_id":"themes/raytaylorism/.git/packed-refs","hash":"c737e75650d8d33e615b2127a265f6484d90960e","modified":1482665054553},{"_id":"themes/raytaylorism/languages/default.yml","hash":"3628e71f7fb22a3315f73c8226b82f56bcb14b21","modified":1482665054588},{"_id":"themes/raytaylorism/languages/zh-TW.yml","hash":"b514bfb6832c1f33269836fbceb6356ac846386c","modified":1482665054589},{"_id":"themes/raytaylorism/languages/zh-CN.yml","hash":"3399023e16b05696b83494a52044cfb44e8a39ec","modified":1482665054588},{"_id":"themes/raytaylorism/_data/about.json","hash":"ad37c7a373e24ba9fb26630b0e761cabb3431b90","modified":1482665054583},{"_id":"themes/raytaylorism/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1482665054583},{"_id":"themes/raytaylorism/_data/link.json","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1482665054584},{"_id":"themes/raytaylorism/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1482665054585},{"_id":"themes/raytaylorism/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1482665054584},{"_id":"themes/raytaylorism/layout/about.ejs","hash":"599b3bb334b3f88b918e67f7a709287b8effee6d","modified":1482665054612},{"_id":"themes/raytaylorism/layout/archive.ejs","hash":"0a21af8903e95c6d8bb7554b089ac219e8708ad7","modified":1482665054612},{"_id":"themes/raytaylorism/layout/layout.ejs","hash":"43beb54ac81519cf5e88a3a1494649beeb856066","modified":1482665054613},{"_id":"themes/raytaylorism/layout/index.ejs","hash":"50c1e7dab5a065fd10dd3a28fdffa5e3d342de82","modified":1482665054613},{"_id":"source/about/index.md","hash":"7154ad31ad42c5b0bfcade58f4e30869710ae602","modified":1480349746384},{"_id":"themes/raytaylorism/layout/page.ejs","hash":"90441f114859ce63ef7c7d93d668dbe5939995c2","modified":1482665054614},{"_id":"themes/raytaylorism/layout/post.ejs","hash":"8e550fd95ef761909294ed3a4aa428ff0509fbf0","modified":1482665054615},{"_id":"themes/raytaylorism/layout/reading.ejs","hash":"8fa965aa0f11f356c9f5344770cc9fc615577a74","modified":1482665054615},{"_id":"themes/raytaylorism/layout/tag.ejs","hash":"42ecab14917abd40c0a38e6ab629f089352a24b1","modified":1482665054616},{"_id":"themes/raytaylorism/source/favicon.png","hash":"d44008b0d6298287cdcfe744a2c8c562569f67ff","modified":1482665054699},{"_id":"themes/raytaylorism/source/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1482665054704},{"_id":"source/tagcloud/index.md","hash":"f19864e00c7b45671e0a845f4b45add0abc07d93","modified":1479642661539},{"_id":"source/reading/index.md","hash":"ab4ae4fad36f371f60b49973797a115423a784d4","modified":1478439767962},{"_id":"themes/raytaylorism/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1482664879854},{"_id":"themes/raytaylorism/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1482664879853},{"_id":"themes/raytaylorism/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1482664879853},{"_id":"themes/raytaylorism/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1482664879855},{"_id":"themes/raytaylorism/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1482664879855},{"_id":"themes/raytaylorism/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1482664879862},{"_id":"themes/raytaylorism/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1482664879861},{"_id":"themes/raytaylorism/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1482664879863},{"_id":"themes/raytaylorism/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1482664879863},{"_id":"themes/raytaylorism/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1482664879864},{"_id":"source/_data/link.json","hash":"bbc6ff533b1f26ba713b6f631e1a7d31366e4187","modified":1478621838514},{"_id":"source/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1478439767960},{"_id":"themes/raytaylorism/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1482664879865},{"_id":"themes/raytaylorism/.git/logs/HEAD","hash":"9877fcc0db6384feef7b92aebcca08db6a84da3d","modified":1482665054565},{"_id":"themes/raytaylorism/_md/reading/index.md","hash":"ab4ae4fad36f371f60b49973797a115423a784d4","modified":1482665054587},{"_id":"themes/raytaylorism/_md/about/index.md","hash":"cf37b9536668e276655568ad5b3ef20f78c1ad8f","modified":1482665054586},{"_id":"themes/raytaylorism/layout/_partial/after_footer.ejs","hash":"9fafc2cb14cbca89e48335d64ab058b5f256a36e","modified":1482665054590},{"_id":"themes/raytaylorism/layout/_partial/archive.ejs","hash":"68c7db951ffb5323d49d4de74e3b0de7f70fb4c3","modified":1482665054590},{"_id":"themes/raytaylorism/layout/_partial/archive_title.ejs","hash":"dfc6c670702e64abce5fd87e3e2ea43c966ace32","modified":1482665054591},{"_id":"themes/raytaylorism/layout/_partial/article.ejs","hash":"cb0445571d07ef2df5d33b7aeaee8b9f6a4764b7","modified":1482665054591},{"_id":"themes/raytaylorism/layout/_partial/construction.ejs","hash":"21190b5a0d567ed4ea5d5289459690b72c1452f0","modified":1482665054592},{"_id":"themes/raytaylorism/layout/_partial/feature_guide.ejs","hash":"7aefb6bdc65d1e6113cb83190fcd2f29af2c9125","modified":1482665054593},{"_id":"themes/raytaylorism/layout/_partial/float.ejs","hash":"bba2781f42cd8ea0895749377e6f2cce69cadb6a","modified":1482665054593},{"_id":"themes/raytaylorism/layout/_partial/footer.ejs","hash":"24885dc1d579db3615cabcb0675b55bd16a0961f","modified":1482665054594},{"_id":"themes/raytaylorism/layout/_partial/head.ejs","hash":"7ceea72401426588cd7778f92585ab9487b463da","modified":1482665054595},{"_id":"themes/raytaylorism/layout/_partial/header.ejs","hash":"0616dd744262dd4cc98cd1cabe959643c845141f","modified":1482665054595},{"_id":"themes/raytaylorism/layout/_partial/menu_drawer.ejs","hash":"028ecbf59089cc4d1907a2d91d8da937f92d321c","modified":1482665054596},{"_id":"themes/raytaylorism/layout/_partial/pagenav.ejs","hash":"e7ada8faaee878ea4dde267d1b420bb45421670d","modified":1482665054596},{"_id":"themes/raytaylorism/layout/_partial/pagination.ejs","hash":"00de7746cf4ef8c4b67a72e825e5ff236f9d5814","modified":1482665054597},{"_id":"themes/raytaylorism/layout/_partial/search.ejs","hash":"0eca40de0d39c1ae52040fcb8c9d7f79afce35dc","modified":1482665054607},{"_id":"themes/raytaylorism/layout/_partial/side_nav.ejs","hash":"c69c45de069c348bf3906f1bd941920887a85c98","modified":1482665054607},{"_id":"themes/raytaylorism/layout/_partial/simple_article.ejs","hash":"6480e101b2f29dddd661410c56516c767d88b79f","modified":1482665054608},{"_id":"themes/raytaylorism/layout/_partial/slider.ejs","hash":"bb7b53f6ca9c852808d955fb074f88112e51ea59","modified":1482665054608},{"_id":"themes/raytaylorism/layout/_widget/blogroll.ejs","hash":"1a6808fa62906e7fb1fac3e16208fa6b1fc8d0ea","modified":1482665054609},{"_id":"themes/raytaylorism/layout/_widget/category.ejs","hash":"95292eb643be63d98f08e28f759c9b01bbfcb9b8","modified":1482665054610},{"_id":"themes/raytaylorism/layout/_widget/recent_posts.ejs","hash":"935bfacce10a726eed6cd82fe39d2c6f9cce9e2a","modified":1482665054610},{"_id":"themes/raytaylorism/layout/_widget/tagcloud.ejs","hash":"f256f028c247bdcb7927351df89f2284c64b7b6c","modified":1482665054611},{"_id":"themes/raytaylorism/layout/_widget/tag.ejs","hash":"90e0ba4412285903420ee3b43125a56743edf0c6","modified":1482665054611},{"_id":"source/_data/about.json","hash":"98e2f8cb136b8d7ea8598a207a87e5267c4b4bc5","modified":1478610346849},{"_id":"source/_data/reading.json","hash":"165b4d865f74b18cfe8ab86e7ab82a2b36624222","modified":1479645851524},{"_id":"source/_data/slider.json","hash":"d2e551afd8c5170291fcf19041773e6bb3961b4e","modified":1478609798339},{"_id":"themes/raytaylorism/source/js/prettify.js","hash":"d592e6f771c2955cea3764d819221b91bc343961","modified":1482665054703},{"_id":"themes/raytaylorism/source/css/style.styl","hash":"a05bcd2543b7bdcd3f725db6d053cd76ccf154be","modified":1482665054698},{"_id":"source/_posts/ss.md","hash":"cbc7eb22e5a619bf2b6fd0560bf84cfc6e9213be","modified":1480753004321},{"_id":"themes/raytaylorism/source/js/jquery.min.js","hash":"f694238d616f579a0690001f37984af430c19963","modified":1482665054701},{"_id":"themes/raytaylorism/.git/refs/heads/master","hash":"6efbe15ac405d6e2010fcc163069d9588502d8e7","modified":1482665054564},{"_id":"themes/raytaylorism/layout/_partial/plugin/analytics.ejs","hash":"b7dbd8342866929e683e9b013caa7324547ff704","modified":1482665054598},{"_id":"themes/raytaylorism/layout/_partial/plugin/comment.ejs","hash":"ccb4bc1f63911a8884657de8a3fcbb537331fed8","modified":1482665054598},{"_id":"themes/raytaylorism/layout/_partial/plugin/google_code_prettify.ejs","hash":"336f01048440f0c9f7b75f24aafcc3a1ffefd9a0","modified":1482665054599},{"_id":"themes/raytaylorism/layout/_partial/plugin/main_javascript.ejs","hash":"6629eec982aa789767b83e80af12fa40189ac344","modified":1482665054599},{"_id":"themes/raytaylorism/layout/_partial/plugin/mathjax.ejs","hash":"6f6b85a5876ae150d3e5f08e384aff68652c0335","modified":1482665054600},{"_id":"themes/raytaylorism/layout/_partial/plugin/noscript.ejs","hash":"182650c8be93b093997ac4d5fe14af2f835b98d9","modified":1482665054600},{"_id":"themes/raytaylorism/layout/_partial/plugin/reward.ejs","hash":"284ab1d5cb4f43eb23b6d7a8aba2477b34abdc00","modified":1482665054601},{"_id":"themes/raytaylorism/layout/_partial/post/category.ejs","hash":"e17f452079201bd2a5a37bc76b51b132afd04faa","modified":1482665054602},{"_id":"themes/raytaylorism/layout/_partial/post/gallery.ejs","hash":"bd2285802766572736663e61852eb49f6acc744f","modified":1482665054603},{"_id":"themes/raytaylorism/layout/_partial/post/prevnext.ejs","hash":"6556eea4fb351639006c16e9831fd72ab46076ba","modified":1482665054603},{"_id":"themes/raytaylorism/layout/_partial/post/readtimes.ejs","hash":"c829d0598f9906f663a8ace1c86f2aa6024d642c","modified":1482665054604},{"_id":"themes/raytaylorism/layout/_partial/post/tablecontents.ejs","hash":"a851061909d4e27321d1792a262f55385529fb2d","modified":1482665054604},{"_id":"themes/raytaylorism/layout/_partial/post/tag.ejs","hash":"0f84c1aded9ba1887566d34e7f0d696c015295f0","modified":1482665054605},{"_id":"themes/raytaylorism/layout/_partial/post/time.ejs","hash":"42210d6b5a132f5c18352dcff2983d3fdbe26956","modified":1482665054606},{"_id":"themes/raytaylorism/layout/_partial/post/title.ejs","hash":"f0733a134b375172a2cec830d7d09bdba33891fe","modified":1482665054606},{"_id":"source/_posts/jca/02.md","hash":"a60f1d5ad32d55ad1eefd6cce4ccc2b0544b519f","modified":1479657239082},{"_id":"source/_posts/jca/00.md","hash":"2e270a568d5e168d0808725c6a1e4f73aedc7881","modified":1479657317587},{"_id":"source/_posts/juc/01.md","hash":"3f386fe188916b78296dad787ee9b6a199437fd1","modified":1480256608798},{"_id":"source/_posts/jca/01.md","hash":"bbe0fb67668c68ba041861d10373bf602c80a12a","modified":1479657363919},{"_id":"source/_posts/jca/04.md","hash":"a17680c15f4b7eaba948c10b2c314c4c0736705c","modified":1480247215897},{"_id":"source/_posts/translation/1.md","hash":"7a10e7b4d705da1491c776c582887c6691f53ff6","modified":1480171753176},{"_id":"source/_posts/cooker/01.md","hash":"ed3c86acd8509da32b2837b9d7f1ba69d6ff5248","modified":1480246049946},{"_id":"themes/raytaylorism/source/css/_base/icons.css","hash":"ab167f1694ffe10c3c51d18a633efd41be121555","modified":1482665054618},{"_id":"themes/raytaylorism/source/css/_base/layout.styl","hash":"b2f718418de61946504a3f8bf28b75be165913a7","modified":1482665054618},{"_id":"themes/raytaylorism/source/css/_base/lib_customize.styl","hash":"e4946dec16d0e96e6f2067a09c275ea84c0b3146","modified":1482665054619},{"_id":"themes/raytaylorism/source/css/_base/variable.styl","hash":"ce4e056d1bbfb80734d98a6898950e7c0136edf4","modified":1482665054619},{"_id":"themes/raytaylorism/source/css/_partial/about.styl","hash":"def183d6908ebcbd59341b09e9f7e06dc277b9ca","modified":1482665054620},{"_id":"themes/raytaylorism/source/css/_partial/archive.styl","hash":"4d48566e9f72b8eac8875b6985885418f56fbafa","modified":1482665054621},{"_id":"themes/raytaylorism/source/css/_partial/article.styl","hash":"293e38a8ab9aee346cc8e52421f1519c5a46a667","modified":1482665054621},{"_id":"themes/raytaylorism/source/css/_partial/comment.styl","hash":"590f1386581181ab588be06e4189861f5a209467","modified":1482665054622},{"_id":"themes/raytaylorism/source/css/_partial/footer.styl","hash":"345e2147c1cec1bf24ab7338a8c929d6716fd730","modified":1482665054622},{"_id":"themes/raytaylorism/source/css/_partial/header.styl","hash":"ebfd0155cda8a0876c36595708f02c294a7c82a0","modified":1482665054622},{"_id":"themes/raytaylorism/source/css/_partial/index.styl","hash":"ac83523dd14a1fc1fe55f98c84ed84cb03be864b","modified":1482665054623},{"_id":"themes/raytaylorism/source/css/_partial/link_context.styl","hash":"5b23db4dee53cbbe9eef257f4a542823100fde72","modified":1482665054624},{"_id":"themes/raytaylorism/source/css/_partial/other.styl","hash":"32bf499037a45ad2e0007a9ab3054067adc02506","modified":1482665054624},{"_id":"themes/raytaylorism/source/css/_partial/reading.styl","hash":"f81929fa12212465b02456d0bb3b8263355e3281","modified":1482665054625},{"_id":"themes/raytaylorism/source/css/_partial/search.styl","hash":"f9ca6f5626c795ae73ff7412ff58207b62fd64ac","modified":1482665054625},{"_id":"themes/raytaylorism/source/css/_partial/side_nav.styl","hash":"b239b6b55e87e86d038d6aa821beeb66a9cbaf39","modified":1482665054626},{"_id":"themes/raytaylorism/source/css/_partial/slider.styl","hash":"ad757e74b3500aa774636ebbe5bdcee7e52e5ad7","modified":1482665054626},{"_id":"themes/raytaylorism/source/css/_partial/syntax.styl","hash":"f39e7bb08abcc220f7c57fb413e76f4043ab9c35","modified":1482665054627},{"_id":"themes/raytaylorism/source/css/_partial/tablecontents.styl","hash":"e04fa0e7664065077750a7223ae3390cc84a4c56","modified":1482665054628},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1482665054694},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","hash":"14be7d7ae1894d2cc7c1a8e847df4db42a310b2f","modified":1482665054696},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"e320b2be926124d30998af0e149b7f06303b8f8b","modified":1482665054698},{"_id":"themes/raytaylorism/source/js/materialize.min.js","hash":"04fe8bbc9a3165eb7bfb13b7166306ed671268d8","modified":1482665054702},{"_id":"themes/raytaylorism/.git/objects/pack/pack-1897c31c6572321246216113053c690f84190cb8.idx","hash":"01b9fa5b8969e9978a4bef10d3846e6333f04a4b","modified":1482665054433},{"_id":"source/_posts/java.lang/01.md","hash":"a0f74583814012faba0bfcf75736f19a6ab05ebe","modified":1480256321384},{"_id":"source/_posts/other/01.md","hash":"50a02642a3a2ceb350c16928fa47134d68fdff61","modified":1478622897813},{"_id":"source/_posts/other/rob.md","hash":"518d20c2d98f871a8f7a3aa33c20fdc588b06fdd","modified":1479488647351},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","hash":"4d82b2b04b9c0ac07f1502667d40f38aee90c296","modified":1482665054697},{"_id":"themes/raytaylorism/.git/logs/refs/heads/master","hash":"9877fcc0db6384feef7b92aebcca08db6a84da3d","modified":1482665054566},{"_id":"themes/raytaylorism/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1482665054559},{"_id":"source/_posts/yunwei/1.md","hash":"13ba586a2b82e4b730794691f306043c5717a021","modified":1479912163763},{"_id":"source/_posts/jca/03.md","hash":"50aecfc899805046051a2427aca567524fbd35a5","modified":1479657396940},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1482665054656},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1482665054660},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1482665054661},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1482665054662},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1482665054682},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1482665054683},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1482665054684},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1482665054686},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1482665054688},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1482665054687},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1482665054691},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1482665054692},{"_id":"source/_posts/other/02.md","hash":"ef606a6ce9dd47e58195799c8a02d9a5bc33e53e","modified":1480353169075},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1482665054630},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1482665054631},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1482665054639},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1482665054655},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1482665054659},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1482665054681},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1482665054685},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1482665054690},{"_id":"themes/raytaylorism/.git/logs/refs/remotes/origin/HEAD","hash":"9877fcc0db6384feef7b92aebcca08db6a84da3d","modified":1482665054559},{"_id":"source/_posts/guid/spring-boot/00.md","hash":"36f1c6a722c3ff202ef982d2309737e5a2828a37","modified":1480771719557},{"_id":"source/_posts/guid/spring-boot/03.md","hash":"4c5f26272d1d62c6d9bbce5288889c38f786c0da","modified":1480772915384},{"_id":"source/_posts/guid/spring-boot/01.md","hash":"0f7bd8e55b5995e951d2330c3e7cea00cb862be3","modified":1480754956455},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1482665054638},{"_id":"source/_posts/guid/mobile/01.md","hash":"dd150e6c2aebfcbc6f16cf931e0a706e4f354f87","modified":1482665626483},{"_id":"source/_posts/guid/spring-boot/02.md","hash":"1dd2ea6ca5592d4a743287df7697c698947fd91d","modified":1480760235964},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1482665054635},{"_id":"themes/raytaylorism/.git/objects/pack/pack-1897c31c6572321246216113053c690f84190cb8.pack","hash":"ff0954c815ee00370501840705c17e20ddd18b34","modified":1482665054434},{"_id":"themes/raytaylorism/source/css/images/psb5.jpg","hash":"4bc91053026cd3ad6477a636f4238d4406e773ba","modified":1478533764404},{"_id":"themes/raytaylorism/source/css/images/weixin.jpg","hash":"3e8ced9542c86e7ab66e2d474cc69b5de38de15e","modified":1478536940280},{"_id":"themes/raytaylorism/source/css/images/zhifubao.jpg","hash":"7af97f584ce2a8a9b73cae00db03b20aaa8c2ed7","modified":1478536757338},{"_id":"themes/raytaylorism/source/css/images/avert.png","hash":"11c320990d203423d8ef38b0f2afb5cc8e4816d7","modified":1478449314440},{"_id":"themes/raytaylorism/source/css/images/mm_facetoface_collect.png","hash":"9e9d4d2697191790fa13eadb8e3c8ef3849a817d","modified":1479545332142},{"_id":"themes/raytaylorism/source/css/images/psb10.jpg","hash":"88816413875d992f2da1bc4b899c21d745ddf0a1","modified":1478609656694},{"_id":"themes/raytaylorism/source/css/images/psb1.jpg","hash":"af877dbe3d7c949ea7a061a144942734e77e26bb","modified":1478534344348},{"_id":"themes/raytaylorism/source/css/images/psb3.jpg","hash":"5e8505f9de074a1be324813e10042a22b13445e4","modified":1478534421347},{"_id":"themes/raytaylorism/source/css/images/psb8.jpg","hash":"90ba0b278fadebb5c9ec470ea4928fc3fa73e129","modified":1478534979975},{"_id":"themes/raytaylorism/source/css/images/psb2.jpg","hash":"b90bb7e35a81de5b63cf028fd687078d93aae2ae","modified":1478533105300},{"_id":"themes/raytaylorism/source/css/images/psb4.jpg","hash":"c3df4238f349065491f748a7fa80d1d7d9797bee","modified":1478533282984},{"_id":"themes/raytaylorism/source/css/images/psb6.jpg","hash":"94974b69cabb8d35866ff896d3cfbaa2ef346b0c","modified":1478534660886},{"_id":"themes/raytaylorism/source/css/images/psb7.jpg","hash":"bfc6323deca8cff76b6f770d7d80c18b9f12fca3","modified":1478534656578},{"_id":"themes/raytaylorism/source/css/images/psb9.jpg","hash":"90ddd3d3b1206c4c788354b78b1549e539c469ae","modified":1478534688504},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat02.jpg","hash":"64427f5aebca56f038d5f28d1e4dc47efcf10baf","modified":1479537351367},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat01.jpg","hash":"fd2700e69f59bcff0fb436a9e6d8efde776ae352","modified":1479536954940},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat04.jpg","hash":"1643f14f632886a84846d8f29fa59a2e9920a8a2","modified":1479543409833},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat03.jpg","hash":"3d88151550b752f7816dc7bb5b0e8fa567029a5f","modified":1479543402405},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat06.png","hash":"1eb3e762733f8c8724f7d9fc5e11705091c2e606","modified":1479827051917},{"_id":"themes/raytaylorism/source/img/2016/12/spring-cloud.png","hash":"271d3671fe134353feaee8ca64c08cdd2bfc6e70","modified":1480517582543},{"_id":"themes/raytaylorism/source/img/2016/11/tomcat05.gif","hash":"10c243e7081320529979f120ffc7f9be99cf1307","modified":1479571472897},{"_id":"public/search.xml","hash":"87042b31d7651bca2cf4796bd03875d4470c0ecd","modified":1482665709097},{"_id":"public/about/index.html","hash":"c6dfb4eee951aa48338e204c61ac524dd4e580a8","modified":1482665709737},{"_id":"public/tagcloud/index.html","hash":"472d5c926d56319970844b851abc45fee31e5c04","modified":1482665710411},{"_id":"public/reading/index.html","hash":"27580586cb1a7a97f6f9d9d23a753c9403909252","modified":1482665710430},{"_id":"public/2016/12/10/guid/mobile/01/index.html","hash":"2866b0a4ee6cdaa4265a082dffc6603de7348941","modified":1482665710465},{"_id":"public/2016/12/03/guid/spring-boot/00/index.html","hash":"217806f8ebb83a80f13e7689db564d0cea45864e","modified":1482665710564},{"_id":"public/2016/12/03/guid/spring-boot/03/index.html","hash":"5835df97d87d9c7e478babda677a745a8425bc1e","modified":1482665710568},{"_id":"public/2016/12/03/guid/spring-boot/02/index.html","hash":"9b48372f713985f2b1902cf1032ad466a29e81c7","modified":1482665710569},{"_id":"public/2016/11/30/guid/spring-boot/01/index.html","hash":"4a84e3c0c646e21ed3aa6f6b0433b19303dd94fe","modified":1482665710569},{"_id":"public/2016/11/29/other/02/index.html","hash":"bcfaee561adb434f947a057331e6e43cedabb0bd","modified":1482665710569},{"_id":"public/2016/11/27/juc/01/index.html","hash":"be32f54f93ebfd86fae6c22ef25aeecfb4e9d2b5","modified":1482665710570},{"_id":"public/2016/11/27/java.lang/01/index.html","hash":"520b47eebe423a56b478e126e8c1945624441d4a","modified":1482665710570},{"_id":"public/2016/11/21/jca/04/index.html","hash":"2832328169f07d49b5a47f4c00c546c2233e9473","modified":1482665710570},{"_id":"public/2016/11/20/jca/03/index.html","hash":"fa437c0202039cec8c410569c0df3f98b422bcc9","modified":1482665710571},{"_id":"public/2016/11/27/cooker/01/index.html","hash":"7d9f591168f4100d40fc7c0e4794339de06a5a14","modified":1482665710571},{"_id":"public/2016/11/19/yunwei/1/index.html","hash":"712579af4439c7b28eab9c32a68a4c3cf679a445","modified":1482665710571},{"_id":"public/2016/11/12/jca/02/index.html","hash":"52393e2591c981a004038bfd1da8b394ee895a67","modified":1482665710571},{"_id":"public/2016/11/12/jca/01/index.html","hash":"44805f41281e9691000341b41ff6a522d8a96c8e","modified":1482665710572},{"_id":"public/2016/11/26/translation/1/index.html","hash":"e29a604d449c75ecc420c5654c938122bf28f766","modified":1482665710572},{"_id":"public/archives/index.html","hash":"ed80e69d1b2b40cc0369f94ae2af1fb7177ccb12","modified":1482665710572},{"_id":"public/archives/2016/index.html","hash":"56ced280cfe4ab73b5193eca007679adfa2d3a34","modified":1482665710572},{"_id":"public/archives/2016/11/index.html","hash":"4386ae498053f70cc552ecba1ae5e646c090308d","modified":1482665710572},{"_id":"public/categories/源码阅读/index.html","hash":"fe0a5951ad86d9375c86cd2720348ee5fe5395b8","modified":1482665710572},{"_id":"public/categories/翻译/index.html","hash":"76c0e141c75feaa8a11a3ae06b20ea2060a2b518","modified":1482665710572},{"_id":"public/categories/源码阅读/security源码导读系列/index.html","hash":"a0aaafc16ee3b4d421700a883d80cb53a1d59096","modified":1482665710573},{"_id":"public/categories/爱上烧菜/index.html","hash":"e4d258507c017de38c7a76b298e6c572a0069c83","modified":1482665710573},{"_id":"public/categories/源码阅读/JUC源码/index.html","hash":"3387db0446dfb4808f702fa51ddf3c7377327f9b","modified":1482665710573},{"_id":"public/categories/爱上烧菜/熟食/index.html","hash":"313a60af3d0cad175ead5009c4f52d079ca4e9da","modified":1482665710573},{"_id":"public/categories/源码阅读/lang包/index.html","hash":"77d1a116f451074abeac9a5896545cd04e18debb","modified":1482665710573},{"_id":"public/categories/心尘随笔/index.html","hash":"fe5eca9e96aa2766e335f4987d79fa8d8563d2e6","modified":1482665710573},{"_id":"public/categories/大型网站技术架构/index.html","hash":"e974748488347552ba39ca2cfb8bc65c09fd1213","modified":1482665710573},{"_id":"public/categories/日常技术/index.html","hash":"7ac0ec7e163a16263d468158593e4481cd83a7df","modified":1482665710573},{"_id":"public/index.html","hash":"01d62bcb70e230d2c15c27f3cee6551c59abfc02","modified":1482665710573},{"_id":"public/page/2/index.html","hash":"2e6b3ab67b85083de755795d4f415c3a873c2115","modified":1482665710573},{"_id":"public/tags/jdk源码系列/index.html","hash":"e19df1c616200360c2d0d7f1910ef8e2f6858561","modified":1482665710574},{"_id":"public/tags/security源码导读系列/index.html","hash":"581b907a4b652c353a64dd3982adee8b3dd9c775","modified":1482665710575},{"_id":"public/tags/java/index.html","hash":"5b4ea23484e9b43ebd487120ff3ab966123f1343","modified":1482665710575},{"_id":"public/tags/juc/index.html","hash":"7e42d3ddfd8b2b75bfd77b2d40d42e7de2e9c1c3","modified":1482665710575},{"_id":"public/tags/翻译/index.html","hash":"2ff382b78ebba2ca53c8804a0d75b00f8b1ef7ae","modified":1482665710575},{"_id":"public/tags/spring-cloud/index.html","hash":"41accd83e591d29f07f9937cc8483c17e6c47997","modified":1482665710575},{"_id":"public/tags/微服务/index.html","hash":"936f146072ed1e595b81ccc0427d8cf603a060e9","modified":1482665710575},{"_id":"public/tags/饮食健康/index.html","hash":"9fdd842e6db50820717b4da36b56b3f080355d36","modified":1482665710575},{"_id":"public/tags/熟食/index.html","hash":"2ecc64c17c58d763471772a7b07fcadbf260d0fc","modified":1482665710575},{"_id":"public/tags/冬瓜/index.html","hash":"646d1de2e57c56cea7ec7dbc5b8d6e990c9bdde5","modified":1482665710575},{"_id":"public/tags/拿手菜/index.html","hash":"944b4ce943dfe8e9cc431bd4002974efb217fffe","modified":1482665710575},{"_id":"public/tags/心情/index.html","hash":"6a983e7d9951538a1382a86ef3187dd3781e389d","modified":1482665710575},{"_id":"public/tags/随笔/index.html","hash":"5432b0e6c794d104a36f8edc4c2cc0dfd67c120b","modified":1482665710576},{"_id":"public/tags/琐事/index.html","hash":"d45d7aafc3e6e971e99ceb8121863dc1dd8aea14","modified":1482665710576},{"_id":"public/tags/运维/index.html","hash":"31c19a9005e2543cf07a51ac9699a8b9c5041e37","modified":1482665710576},{"_id":"public/tags/tomcat/index.html","hash":"c966c2c267414a9f36b1337e1c1706f3119ba36f","modified":1482665710576},{"_id":"public/tags/机器人/index.html","hash":"97159e9de1f42c0ce7d35e1d20b36213f4f92fa2","modified":1482665710576},{"_id":"public/tags/机器学习/index.html","hash":"8273ef32188758091ac62b1732aab4c8941fbee5","modified":1482665710576},{"_id":"public/2016/11/09/other/01/index.html","hash":"4161e544081511a9f6bb1ee9178f3ebf906a420b","modified":1482665710577},{"_id":"public/2016/11/18/jca/00/index.html","hash":"2d388a5f623f9b5062e643d910941da2731f3e73","modified":1482665710577},{"_id":"public/2016/11/12/other/rob/index.html","hash":"b0c55211ced9745697702c1d477c0ba1ed91e33c","modified":1482665710582},{"_id":"public/archives/2016/12/index.html","hash":"6de751e3db8129c0a5323b4bfabde00c0ba258e4","modified":1482665710582},{"_id":"public/categories/学习系列/index.html","hash":"ec05e4f8cde5730c34eee1fc04b41cd06942e1f3","modified":1482665710583},{"_id":"public/tags/spring/index.html","hash":"929dea22c255182be1c5a2fca92ee5886fa1a869","modified":1482665710583},{"_id":"public/tags/weex/index.html","hash":"a6742d2e3d729cc5db6ee6bf2022ccdfc87bfa9d","modified":1482665710583},{"_id":"public/tags/移动端/index.html","hash":"7a9af9ccc3707a5fdeb65a3d9b4d85d1c6d74435","modified":1482665710584},{"_id":"public/tags/spring-boot/index.html","hash":"afd29bc399f51026640896a7cd370faf0eafe866","modified":1482665710584},{"_id":"public/img/2016/12/spring-cloud.png","hash":"271d3671fe134353feaee8ca64c08cdd2bfc6e70","modified":1482665710591}],"Category":[{"name":"源码阅读","_id":"cix4kp8000006c88q1oih97n3"},{"name":"翻译","_id":"cix4kp80r000ic88qbx51c2ol"},{"name":"security源码导读系列","parent":"cix4kp8000006c88q1oih97n3","_id":"cix4kp80t000nc88qu6v0nbzb"},{"name":"爱上烧菜","_id":"cix4kp80z000vc88q3ji1eq54"},{"name":"JUC源码","parent":"cix4kp8000006c88q1oih97n3","_id":"cix4kp8130018c88qzgx5z4sp"},{"name":"熟食","parent":"cix4kp80z000vc88q3ji1eq54","_id":"cix4kp818001cc88q1mv1awxc"},{"name":"lang包","parent":"cix4kp8000006c88q1oih97n3","_id":"cix4kp8270020c88q76w4mbbg"},{"name":"心尘随笔","_id":"cix4kp82b0024c88ql95qt4gf"},{"name":"大型网站技术架构","_id":"cix4kp82d0027c88qhibgvmyv"},{"name":"日常技术","_id":"cix4kp82f002bc88q1n6ww6kp"},{"name":"学习系列","_id":"cix4kp82u0030c88q704tit2z"},{"name":"ѧϰϵ��","_id":"cix4kp835003cc88qy8vmkppd"}],"Data":[{"_id":"link","data":{"social":{"weibo":"http://weibo.com/3099694953/profile?topnav=1&wvr=6&is_all=1","github":"https://github.com/RiXiong","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/raytaylorlin"}}},{"_id":"hint","data":{"new":{"selector":[".menu-reading",".menu-about"]}}},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"代码之外的生存指南","cover":"https://img3.doubanio.com/lpic/s28889106.jpg","review":"IT菜鸟出社会，必看。","score":"7","doubanLink":"https://book.douban.com/subject/26835090/"},{"title":"极客与团队：软件工程师的团队生存秘笈","cover":"https://img3.doubanio.com/lpic/s28889106.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"https://read.douban.com/ebook/12766781/"},{"title":"影响力：卡耐基最实用的说服术与社交技巧","cover":"https://img3.doubanio.com/lpic/s28889106.jpg","review":"强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"https://read.douban.com/ebook/12233881/?icn=profile-guess"}],"reading":[{"title":"分布式服务框架：原理与实践","cover":"https://img3.doubanio.com/lpic/s28378000.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26702824/"},{"title":"深入理解Java虚拟机：JVM高级特性与最佳实践","cover":"https://img3.doubanio.com/lpic/s28889106.jpg","review":"","score":null,"doubanLink":"https://read.douban.com/ebook/15233695/?dcs=subject-rec&dcm=douban&dct=24700704"},{"title":"Spring in Action","cover":"https://img3.doubanio.com/lpic/s28010344.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/24830012/"}],"wanted":[{"title":"实战Java虚拟机","cover":"https://img3.doubanio.com/lpic/s28036503.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26354292/"},{"title":"Netty in Action","cover":"https://img3.doubanio.com/lpic/s28361212.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/24700704/"},{"title":"Spring Boot in Action","cover":"https://img3.doubanio.com/lpic/s28376225.jpg","review":"","score":null,"doubanLink":"https://book.douban.com/subject/26435858/"}]}}},{"_id":"about","data":{"avatar":"/css/images/avert.png","name":"灯塔","tag":"灯塔下的笔者","desc":"灯塔下的笔者","skills":{"Javascript":6,"JAVA":8,"invisible-split-line-1":-1,"Node.js":4,"Linux":6},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["/css/images/zhifubao.jpg","/css/images/weixin.jpg"]}},{"_id":"slider","data":[{"image":"/css/images/psb6.jpg","align":"center","title":"炎炎夏日","subtitle":"Here's our small slogan.","link":"/"},{"image":"/css/images/psb2.jpg","align":"center","title":"夕阳西下","subtitle":"Here's our small slogan.","link":null},{"image":"/css/images/psb7.jpg","align":"left","title":"期期艾艾","subtitle":"Here's our small slogan.","link":null},{"image":"/css/images/psb10.jpg","align":"left","title":"一米阳光","subtitle":"Here's our small slogan.","link":null},{"image":"/css/images/psb3.jpg","align":"right","title":"昨日黄昏","subtitle":"Here's our small slogan.","link":null}]}],"Page":[{"title":"关于","layout":"about","_content":"大家好，我是張日雄。欢迎来到我的个人技术博客。\n个人主攻后端和技术架构,但懂点前端,会点运维，白天上班族，晚上知识的分享者。\n高隔壁的叫全栈，土气点的叫万金油，伟大点的叫救火队员，实在点的叫打杂。\n笔者不是什么技术大牛，写代码也不厉害，只是万花丛中一点绿，但会思考，会努力，要求未来的我比现在的我要好，一位心态阳光的奋斗者。在此总结我的个人成长经验有三点：善于观察、乐于解决问题、善于总结。\n希望通过该博客总结自己的经验，积累知识。\n\n个人写博客的目的，不是对技术的纯粹最求，尽管我是个技术爱好者，但我更爱生活，更愿意把当前的工作做好，so,为了干好当前的工作，我需要不断的驱动自己去学习，以此来完成当前或我未来将要解决一些问题的知识储备。\n通过写这博客，我也不是太伟大，热衷于分享，我是个懒人，耐心不好（这也许是患了程序员症）。只是想在工作的时候，不想太费耐心讨论，教导，把文章一扔了事。\n当然，在写文的过程中，我的表达能力和写作能力也得到了很大的提高。\n\n\n\n\n","source":"about/index.md","raw":"title: 关于\nlayout: about\n---\n大家好，我是張日雄。欢迎来到我的个人技术博客。\n个人主攻后端和技术架构,但懂点前端,会点运维，白天上班族，晚上知识的分享者。\n高隔壁的叫全栈，土气点的叫万金油，伟大点的叫救火队员，实在点的叫打杂。\n笔者不是什么技术大牛，写代码也不厉害，只是万花丛中一点绿，但会思考，会努力，要求未来的我比现在的我要好，一位心态阳光的奋斗者。在此总结我的个人成长经验有三点：善于观察、乐于解决问题、善于总结。\n希望通过该博客总结自己的经验，积累知识。\n\n个人写博客的目的，不是对技术的纯粹最求，尽管我是个技术爱好者，但我更爱生活，更愿意把当前的工作做好，so,为了干好当前的工作，我需要不断的驱动自己去学习，以此来完成当前或我未来将要解决一些问题的知识储备。\n通过写这博客，我也不是太伟大，热衷于分享，我是个懒人，耐心不好（这也许是患了程序员症）。只是想在工作的时候，不想太费耐心讨论，教导，把文章一扔了事。\n当然，在写文的过程中，我的表达能力和写作能力也得到了很大的提高。\n\n\n\n\n","date":"2016-11-28T16:15:46.384Z","updated":"2016-11-28T16:15:46.384Z","path":"about/index.html","comments":1,"_id":"cix4kp7wx0000c88qu5bo5y44","content":"<p>大家好，我是張日雄。欢迎来到我的个人技术博客。<br>个人主攻后端和技术架构,但懂点前端,会点运维，白天上班族，晚上知识的分享者。<br>高隔壁的叫全栈，土气点的叫万金油，伟大点的叫救火队员，实在点的叫打杂。<br>笔者不是什么技术大牛，写代码也不厉害，只是万花丛中一点绿，但会思考，会努力，要求未来的我比现在的我要好，一位心态阳光的奋斗者。在此总结我的个人成长经验有三点：善于观察、乐于解决问题、善于总结。<br>希望通过该博客总结自己的经验，积累知识。</p>\n<p>个人写博客的目的，不是对技术的纯粹最求，尽管我是个技术爱好者，但我更爱生活，更愿意把当前的工作做好，so,为了干好当前的工作，我需要不断的驱动自己去学习，以此来完成当前或我未来将要解决一些问题的知识储备。<br>通过写这博客，我也不是太伟大，热衷于分享，我是个懒人，耐心不好（这也许是患了程序员症）。只是想在工作的时候，不想太费耐心讨论，教导，把文章一扔了事。<br>当然，在写文的过程中，我的表达能力和写作能力也得到了很大的提高。</p>\n","excerpt":"","more":"<p>大家好，我是張日雄。欢迎来到我的个人技术博客。<br>个人主攻后端和技术架构,但懂点前端,会点运维，白天上班族，晚上知识的分享者。<br>高隔壁的叫全栈，土气点的叫万金油，伟大点的叫救火队员，实在点的叫打杂。<br>笔者不是什么技术大牛，写代码也不厉害，只是万花丛中一点绿，但会思考，会努力，要求未来的我比现在的我要好，一位心态阳光的奋斗者。在此总结我的个人成长经验有三点：善于观察、乐于解决问题、善于总结。<br>希望通过该博客总结自己的经验，积累知识。</p>\n<p>个人写博客的目的，不是对技术的纯粹最求，尽管我是个技术爱好者，但我更爱生活，更愿意把当前的工作做好，so,为了干好当前的工作，我需要不断的驱动自己去学习，以此来完成当前或我未来将要解决一些问题的知识储备。<br>通过写这博客，我也不是太伟大，热衷于分享，我是个懒人，耐心不好（这也许是患了程序员症）。只是想在工作的时候，不想太费耐心讨论，教导，把文章一扔了事。<br>当然，在写文的过程中，我的表达能力和写作能力也得到了很大的提高。</p>\n"},{"title":"标签云","layout":"tagcloud","_content":"","source":"tagcloud/index.md","raw":"title: 标签云\nlayout: tagcloud\n---\n","date":"2016-11-20T11:51:01.539Z","updated":"2016-11-20T11:51:01.539Z","path":"tagcloud/index.html","comments":1,"_id":"cix4kp7xo0001c88qgju1g990","content":"","excerpt":"","more":""},{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2016-11-06T14:55:38.058Z","updated":"2016-11-06T13:42:47.962Z","path":"reading/index.html","comments":1,"_id":"cix4kp7xp0002c88q98i9x7jl","content":"","excerpt":"","more":""}],"Post":[{"title":"java.security源码解读系列-PKI.**Key**","_content":"\n\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe>\n\n在翻看，jce 的源码中，笔者发现，jce中的源码都基本引用到了java.security 下的类；\n通过上篇的导读，我们基本可以了解java.security 的基本架构的主要组成：\n- PKI (public key infrastructure)\n- 认证(authentication)\n- 安全通信(secure conmmunication)\n- 访问控制(access control)\n\n# PKI\nPKI ------ 公钥基础构件\n**PKI**是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。\nJava平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。\njava Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。\n既然Provider 是如此总要的，好奇的我总是要去看看的：\n看到该类的作者是：本杰明雷诺（Benjamin Renaud） 和 安德烈亚斯斯特本兹（Andreas Sterbenz）\n**PKI**相关的类可以在**java.security**和**java.security.cert**包下获取。\n\n# PKI的组成\n- **密匙 key**\n- **证书 certificate**\n- **公钥加密 Public key encryption（PKE）**\n- **可信的证书颁发机构 CAS**\n\n# KeyStore\n下面我们来说说密钥：\n密钥在jdk 中，她主要是是通过 key store 来实现，相关涉及的类都是 XXkeyXX 这类的形式。我们先看看java.security.KeyStore类，在该类的类头部，注释已经说明她是一个用来存储密钥和证书的类或叫数据解构更加合适。\n在KeyStore中包含了好几个内部类，蛮有意思的，包括Builder内部类数据解构的构建者，\n**CallbackHandlerProtection**,\n**PasswordParameter**,\n**PrivateKeyEntry**, 私钥，一个存储加密过的私钥，用来存储保护的信息，防止非法访问。\n**SecretKeyEntry**, 密钥\n**SimpleLoadStoreParameter**, \n**TrustedCeritificateEntry** 可信任证书，他包含一个单一的公钥，可以供给别人使用，我们称为可信任证书\n\n要学习如何看源码，看源码的注释是必不可少的，幸运的是JKD的源码注释是那么的清晰。哈哈，感谢前人的努力。\n**KeyStore**是用来存储加密密钥和加密证书的存储解构，类的表头注释来了个开门见山。\n**KeyStore**可以支持不同的实体类型的存储结构，每一个类型都实现了内部的一个KeyStore.Entry 接口。\n它支持一下的几种存储解构类型：\n\n- **KeyStore.PrivateKeyEntry**\n>这个存储解构持有 加密的 **PrivateKey**(私钥)，用来存储一个被保护的格式数据，防止被接近访问。同时他也会实现一个对公钥开放的证书链来供外部访问。\n私钥和证书主要是个一个已经被授权的应用来访问私钥和证书链的。\n\n```\n    public static final class PrivateKeyEntry implements Entry {\n\n        private final PrivateKey privKey; \n\t\t\n        private final Certificate[] chain;\n        private final Set<Attribute> attributes;\n\n        public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain) {\n            this(privateKey, chain, Collections.<Attribute>emptySet());\n        }\n        public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain,\n           Set<Attribute> attributes) {\n\n            if (privateKey == null || chain == null || attributes == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            if (chain.length == 0) {\n                throw new IllegalArgumentException\n                                (\"invalid zero-length input chain\");\n            }\n\n            Certificate[] clonedChain = chain.clone();\n            String certType = clonedChain[0].getType();\n            for (int i = 1; i < clonedChain.length; i++) {\n                if (!certType.equals(clonedChain[i].getType())) {\n                    throw new IllegalArgumentException\n                                (\"chain does not contain certificates \" +\n                                \"of the same type\");\n                }\n            }\n            if (!privateKey.getAlgorithm().equals\n                        (clonedChain[0].getPublicKey().getAlgorithm())) {\n                throw new IllegalArgumentException\n                                (\"private key algorithm does not match \" +\n                                \"algorithm of public key in end entity \" +\n                                \"certificate (at index 0)\");\n            }\n            this.privKey = privateKey;\n\n            if (clonedChain[0] instanceof X509Certificate &&\n                !(clonedChain instanceof X509Certificate[])) {\n\n                this.chain = new X509Certificate[clonedChain.length];\n                System.arraycopy(clonedChain, 0,\n                                this.chain, 0, clonedChain.length);\n            } else {\n                this.chain = clonedChain;\n            }\n\n            this.attributes =\n                Collections.unmodifiableSet(new HashSet<>(attributes));\n        }\n        public PrivateKey getPrivateKey() {\n            return privKey;\n        }\n        public Certificate[] getCertificateChain() {\n            return chain.clone();\n        }\n        public Certificate getCertificate() {\n            return chain[0];\n        }\n        @Override\n        public Set<Attribute> getAttributes() {\n            return attributes;\n        }\n        public String toString() {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Private key entry and certificate chain with \"\n                + chain.length + \" elements:\\r\\n\");\n            for (Certificate cert : chain) {\n                sb.append(cert);\n                sb.append(\"\\r\\n\");\n            }\n            return sb.toString();\n        }\n\n    }\n```\n\n- **KeyStore.SecretKeyEntry**\n> 这个存储解构是存储加密过的**SecretKey**，来防止没授权访问。\n\n```\n    public static final class SecretKeyEntry implements Entry {\n\n        private final SecretKey sKey;\n        private final Set<Attribute> attributes;\n        public SecretKeyEntry(SecretKey secretKey) {\n            if (secretKey == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.sKey = secretKey;\n            this.attributes = Collections.<Attribute>emptySet();\n        }\n        public SecretKeyEntry(SecretKey secretKey, Set<Attribute> attributes) {\n\n            if (secretKey == null || attributes == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.sKey = secretKey;\n            this.attributes =\n                Collections.unmodifiableSet(new HashSet<>(attributes));\n        }\n        public SecretKey getSecretKey() {\n            return sKey;\n        }\n        @Override\n        public Set<Attribute> getAttributes() {\n            return attributes;\n        }\n        public String toString() {\n            return \"Secret key entry with algorithm \" + sKey.getAlgorithm();\n        }\n    }\n```\n\n- **KeyStore.TrustedCertificateEntry**\n> 这个存储实体包含一个单一的公钥，证书是属于另外的一部分，被叫做可信任证书。因为**StoreKey**的拥有者，对这些证书是已经有明确的身份确认的。通过这类证书实体，我们可以用来实现授权第三方的用户。\n\n```\n    public static final class TrustedCertificateEntry implements Entry {\n\n        private final Certificate cert;\n        private final Set<Attribute> attributes;\n        public TrustedCertificateEntry(Certificate trustedCert) {\n            if (trustedCert == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.cert = trustedCert;\n            this.attributes = Collections.<Attribute>emptySet();\n        }\n        public TrustedCertificateEntry(Certificate trustedCert,\n           Set<Attribute> attributes) {\n            if (trustedCert == null || attributes == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.cert = trustedCert;\n            this.attributes =\n                Collections.unmodifiableSet(new HashSet<>(attributes));\n        }\n        public Certificate getTrustedCertificate() {\n            return cert;\n        }\n        @Override\n        public Set<Attribute> getAttributes() {\n            return attributes;\n        }\n\n        /**\n         * Returns a string representation of this TrustedCertificateEntry.\n         * @return a string representation of this TrustedCertificateEntry.\n         */\n        public String toString() {\n            return \"Trusted certificate entry:\\r\\n\" + cert.toString();\n        }\n    }\n```\n\n# KeyStore使用：\n上述的实体类中，每个Entry都快可以有自己的实体别名。\n使用KeyStore的一些常用方法：\n\n- 依赖于默认类型\n```\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n```\n\n- 提供一个特殊的KeyStore类型\n```\n KeyStore ks = KeyStore.getInstance(\"JKS\");\n```\n\n- 通过输入流来载入KeyStore\n```\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n\n/** get user password and file input stream*/\nchar[] password = getPassword();\n\ntry (FileInputStream fis = new FileInputStream(\"keyStoreName\")) {\n ks.load(fis, password);\n}\n```\n\n- 构造一个空的KeyStore\n```\n    KeyStore.ProtectionParameter protParam =\n        new KeyStore.PasswordProtection(password);\n\n    /** get my private key**/\n    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)\n        ks.getEntry(\"privateKeyAlias\", protParam);\n    PrivateKey myPrivateKey = pkEntry.getPrivateKey();\n\n    /** save my secret key**/\n    javax.crypto.SecretKey mySecretKey;\n    KeyStore.SecretKeyEntry skEntry =\n        new KeyStore.SecretKeyEntry(mySecretKey);\n    ks.setEntry(\"secretKeyAlias\", skEntry, protParam);\n\n    /** store away the keystore**/\n    try (FileOutputStream fos = new FileOutputStream(\"newKeyStoreName\")) {\n        ks.store(fos, password);\n    }\n```\n\n下面，我们在来看看其他的**Key**\nKey 接口：\n```\n/**@author Benjamin Renaud**/\npublic interface Key extends java.io.Serializable {\n    static final long serialVersionUID = 6603384152749567654L;\n\tpublic String getAlgorithm(); // 获取加密算法名，如DSA,就是DSA算法的密钥。\n\tpublic String getFormat();// 返回这个key的主要解码格式的名称,\n\tpublic byte[] getEncoded();//返回Key的解码\n}\n```\n在来看看KeyException 类：\n```\n/**@author Benjamin Renaud**/\npublic class KeyException extends GeneralSecurityException {\n    public KeyException() {\n        super();\n    }\n\tpublic KeyException(String msg) {\n        super(msg);\n    }\n\tpublic KeyException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\tpublic KeyException(Throwable cause) {\n        super(cause);\n    }\n}\n```\n这是比较常见的异常类，在Key 的算法返回值为null 时会抛出该异常。他的父级异常 GeneralSecurityException 和Exception 类跟他的构造方法类是。\n\nKeyFactory 类：\n从名字中，就能知道这是一个工厂方法的类。这个类是在1.2版本中加入的，作者部署本杰明雷，而是Jan Luehe\n这个类主要是用来做 转换那些并不透明的加密密钥类型的Key，为一些按照特殊规范的透明Key,这是一个双向的过程。\nService Provider Interface(SPI)\n```\npublic class KeyFactory{\n    private final String algorithm;\n\tprivate Provider provider;\n\tprivate volatile KeyFactorySpi spi;\n\tprivate final Object lock = new Object();\n\tprivate Iterator<Service> serviceIterator;\n\t\n\tprotected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider,\n                         String algorithm){......}\n\tprivate KeyFactory(String algorithm) throws NoSuchAlgorithmException {......}\n\t\n\tpublic static KeyFactory getInstance(String algorithm){......}\n    public static KeyFactory getInstance(String algorithm, String provider)\n            throws NoSuchAlgorithmException, NoSuchProviderException {......}\n    public static KeyFactory getInstance(String algorithm, Provider provider)\n            throws NoSuchAlgorithmException {......}\n\t\t\t\n\tpublic final Provider getProvider() {\n        synchronized (lock) {\n            serviceIterator = null;\n            return provider;\n        }\n    } \n\tpublic final String getAlgorithm() {\n        return this.algorithm;\n    }\n\tprivate KeyFactorySpi nextSpi(KeyFactorySpi oldSpi) {/** keyFactory 分派key **/\n        synchronized (lock) {\n\t\t    ......\n\t\t}\n\t}\n\tpublic final PublicKey generatePublic(KeySpec keySpec)\n            throws InvalidKeySpecException {.......}\n\tpublic final PrivateKey generatePrivate(KeySpec keySpec)\n            throws InvalidKeySpecException {......}\n\tpublic final <T extends KeySpec> T getKeySpec(Key key, Class<T> keySpec)\n            throws InvalidKeySpecException {......}\t\t\n\tpublic final Key translateKey(Key key) throws InvalidKeyException {......}\t\t\n}\n```\n\nKeyFactorySpi 抽象类：\n继承这个类中的所有抽象方法必须实现由 provider 供应关键工厂特定的实现算法。\nKeyPair 类：\n同时持有公钥和私钥。\n\n此外，在*java.security.spec* 下面，也提供了很多的**XXKeyXX**的实现，这是由于历史的原因没有放到**java.security.* **下面。\n如：\n**java.security.spec.KeySpec;** 接口， All key specifications must implement this interface. 源码的注释中已经说明了，所有的规格化的Key都必须要实现这个接口。\n**java.security.spec.PKCS8EncodedKeySpec;** 这是一套解码规范。PKCS#8 标准\n**java.security.spec.X509EncodedKeySpec;**  这是一套解码规范，X.509 标准\n\n他们都同一实现了keySpe 接口。\n\n在java.security.interface 中定义了各种special key 的接口实现。\n\n# 证书\n在 java.security.cert 中有各种证书的实现, 都是XXCertXX \n其中，的 CertStore 和 KeyStore 的结构类似。\n证书是 ， 密钥外的另外一种加密方式。\n\n\n\n>参考文章：\nhttp://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\nhttp://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\nhttp://m635674608.iteye.com/blog/1844777（强推荐）\nhttp://joshuasabrina.iteye.com/blog/1798245（强推荐）\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\nhttp://www.cnblogs.com/NullPointException/p/5054082.html\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html","source":"_posts/jca/02.md","raw":"---\ntitle: java.security源码解读系列-PKI.**Key**\ncategories:\n- 源码阅读\n- security源码导读系列\ntags:\n- jdk源码系列\n- security源码导读系列\n---\n\n\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n\n<!-- more -->\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe>\n\n在翻看，jce 的源码中，笔者发现，jce中的源码都基本引用到了java.security 下的类；\n通过上篇的导读，我们基本可以了解java.security 的基本架构的主要组成：\n- PKI (public key infrastructure)\n- 认证(authentication)\n- 安全通信(secure conmmunication)\n- 访问控制(access control)\n\n# PKI\nPKI ------ 公钥基础构件\n**PKI**是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。\nJava平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。\njava Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。\n既然Provider 是如此总要的，好奇的我总是要去看看的：\n看到该类的作者是：本杰明雷诺（Benjamin Renaud） 和 安德烈亚斯斯特本兹（Andreas Sterbenz）\n**PKI**相关的类可以在**java.security**和**java.security.cert**包下获取。\n\n# PKI的组成\n- **密匙 key**\n- **证书 certificate**\n- **公钥加密 Public key encryption（PKE）**\n- **可信的证书颁发机构 CAS**\n\n# KeyStore\n下面我们来说说密钥：\n密钥在jdk 中，她主要是是通过 key store 来实现，相关涉及的类都是 XXkeyXX 这类的形式。我们先看看java.security.KeyStore类，在该类的类头部，注释已经说明她是一个用来存储密钥和证书的类或叫数据解构更加合适。\n在KeyStore中包含了好几个内部类，蛮有意思的，包括Builder内部类数据解构的构建者，\n**CallbackHandlerProtection**,\n**PasswordParameter**,\n**PrivateKeyEntry**, 私钥，一个存储加密过的私钥，用来存储保护的信息，防止非法访问。\n**SecretKeyEntry**, 密钥\n**SimpleLoadStoreParameter**, \n**TrustedCeritificateEntry** 可信任证书，他包含一个单一的公钥，可以供给别人使用，我们称为可信任证书\n\n要学习如何看源码，看源码的注释是必不可少的，幸运的是JKD的源码注释是那么的清晰。哈哈，感谢前人的努力。\n**KeyStore**是用来存储加密密钥和加密证书的存储解构，类的表头注释来了个开门见山。\n**KeyStore**可以支持不同的实体类型的存储结构，每一个类型都实现了内部的一个KeyStore.Entry 接口。\n它支持一下的几种存储解构类型：\n\n- **KeyStore.PrivateKeyEntry**\n>这个存储解构持有 加密的 **PrivateKey**(私钥)，用来存储一个被保护的格式数据，防止被接近访问。同时他也会实现一个对公钥开放的证书链来供外部访问。\n私钥和证书主要是个一个已经被授权的应用来访问私钥和证书链的。\n\n```\n    public static final class PrivateKeyEntry implements Entry {\n\n        private final PrivateKey privKey; \n\t\t\n        private final Certificate[] chain;\n        private final Set<Attribute> attributes;\n\n        public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain) {\n            this(privateKey, chain, Collections.<Attribute>emptySet());\n        }\n        public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain,\n           Set<Attribute> attributes) {\n\n            if (privateKey == null || chain == null || attributes == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            if (chain.length == 0) {\n                throw new IllegalArgumentException\n                                (\"invalid zero-length input chain\");\n            }\n\n            Certificate[] clonedChain = chain.clone();\n            String certType = clonedChain[0].getType();\n            for (int i = 1; i < clonedChain.length; i++) {\n                if (!certType.equals(clonedChain[i].getType())) {\n                    throw new IllegalArgumentException\n                                (\"chain does not contain certificates \" +\n                                \"of the same type\");\n                }\n            }\n            if (!privateKey.getAlgorithm().equals\n                        (clonedChain[0].getPublicKey().getAlgorithm())) {\n                throw new IllegalArgumentException\n                                (\"private key algorithm does not match \" +\n                                \"algorithm of public key in end entity \" +\n                                \"certificate (at index 0)\");\n            }\n            this.privKey = privateKey;\n\n            if (clonedChain[0] instanceof X509Certificate &&\n                !(clonedChain instanceof X509Certificate[])) {\n\n                this.chain = new X509Certificate[clonedChain.length];\n                System.arraycopy(clonedChain, 0,\n                                this.chain, 0, clonedChain.length);\n            } else {\n                this.chain = clonedChain;\n            }\n\n            this.attributes =\n                Collections.unmodifiableSet(new HashSet<>(attributes));\n        }\n        public PrivateKey getPrivateKey() {\n            return privKey;\n        }\n        public Certificate[] getCertificateChain() {\n            return chain.clone();\n        }\n        public Certificate getCertificate() {\n            return chain[0];\n        }\n        @Override\n        public Set<Attribute> getAttributes() {\n            return attributes;\n        }\n        public String toString() {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Private key entry and certificate chain with \"\n                + chain.length + \" elements:\\r\\n\");\n            for (Certificate cert : chain) {\n                sb.append(cert);\n                sb.append(\"\\r\\n\");\n            }\n            return sb.toString();\n        }\n\n    }\n```\n\n- **KeyStore.SecretKeyEntry**\n> 这个存储解构是存储加密过的**SecretKey**，来防止没授权访问。\n\n```\n    public static final class SecretKeyEntry implements Entry {\n\n        private final SecretKey sKey;\n        private final Set<Attribute> attributes;\n        public SecretKeyEntry(SecretKey secretKey) {\n            if (secretKey == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.sKey = secretKey;\n            this.attributes = Collections.<Attribute>emptySet();\n        }\n        public SecretKeyEntry(SecretKey secretKey, Set<Attribute> attributes) {\n\n            if (secretKey == null || attributes == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.sKey = secretKey;\n            this.attributes =\n                Collections.unmodifiableSet(new HashSet<>(attributes));\n        }\n        public SecretKey getSecretKey() {\n            return sKey;\n        }\n        @Override\n        public Set<Attribute> getAttributes() {\n            return attributes;\n        }\n        public String toString() {\n            return \"Secret key entry with algorithm \" + sKey.getAlgorithm();\n        }\n    }\n```\n\n- **KeyStore.TrustedCertificateEntry**\n> 这个存储实体包含一个单一的公钥，证书是属于另外的一部分，被叫做可信任证书。因为**StoreKey**的拥有者，对这些证书是已经有明确的身份确认的。通过这类证书实体，我们可以用来实现授权第三方的用户。\n\n```\n    public static final class TrustedCertificateEntry implements Entry {\n\n        private final Certificate cert;\n        private final Set<Attribute> attributes;\n        public TrustedCertificateEntry(Certificate trustedCert) {\n            if (trustedCert == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.cert = trustedCert;\n            this.attributes = Collections.<Attribute>emptySet();\n        }\n        public TrustedCertificateEntry(Certificate trustedCert,\n           Set<Attribute> attributes) {\n            if (trustedCert == null || attributes == null) {\n                throw new NullPointerException(\"invalid null input\");\n            }\n            this.cert = trustedCert;\n            this.attributes =\n                Collections.unmodifiableSet(new HashSet<>(attributes));\n        }\n        public Certificate getTrustedCertificate() {\n            return cert;\n        }\n        @Override\n        public Set<Attribute> getAttributes() {\n            return attributes;\n        }\n\n        /**\n         * Returns a string representation of this TrustedCertificateEntry.\n         * @return a string representation of this TrustedCertificateEntry.\n         */\n        public String toString() {\n            return \"Trusted certificate entry:\\r\\n\" + cert.toString();\n        }\n    }\n```\n\n# KeyStore使用：\n上述的实体类中，每个Entry都快可以有自己的实体别名。\n使用KeyStore的一些常用方法：\n\n- 依赖于默认类型\n```\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n```\n\n- 提供一个特殊的KeyStore类型\n```\n KeyStore ks = KeyStore.getInstance(\"JKS\");\n```\n\n- 通过输入流来载入KeyStore\n```\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n\n/** get user password and file input stream*/\nchar[] password = getPassword();\n\ntry (FileInputStream fis = new FileInputStream(\"keyStoreName\")) {\n ks.load(fis, password);\n}\n```\n\n- 构造一个空的KeyStore\n```\n    KeyStore.ProtectionParameter protParam =\n        new KeyStore.PasswordProtection(password);\n\n    /** get my private key**/\n    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)\n        ks.getEntry(\"privateKeyAlias\", protParam);\n    PrivateKey myPrivateKey = pkEntry.getPrivateKey();\n\n    /** save my secret key**/\n    javax.crypto.SecretKey mySecretKey;\n    KeyStore.SecretKeyEntry skEntry =\n        new KeyStore.SecretKeyEntry(mySecretKey);\n    ks.setEntry(\"secretKeyAlias\", skEntry, protParam);\n\n    /** store away the keystore**/\n    try (FileOutputStream fos = new FileOutputStream(\"newKeyStoreName\")) {\n        ks.store(fos, password);\n    }\n```\n\n下面，我们在来看看其他的**Key**\nKey 接口：\n```\n/**@author Benjamin Renaud**/\npublic interface Key extends java.io.Serializable {\n    static final long serialVersionUID = 6603384152749567654L;\n\tpublic String getAlgorithm(); // 获取加密算法名，如DSA,就是DSA算法的密钥。\n\tpublic String getFormat();// 返回这个key的主要解码格式的名称,\n\tpublic byte[] getEncoded();//返回Key的解码\n}\n```\n在来看看KeyException 类：\n```\n/**@author Benjamin Renaud**/\npublic class KeyException extends GeneralSecurityException {\n    public KeyException() {\n        super();\n    }\n\tpublic KeyException(String msg) {\n        super(msg);\n    }\n\tpublic KeyException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\tpublic KeyException(Throwable cause) {\n        super(cause);\n    }\n}\n```\n这是比较常见的异常类，在Key 的算法返回值为null 时会抛出该异常。他的父级异常 GeneralSecurityException 和Exception 类跟他的构造方法类是。\n\nKeyFactory 类：\n从名字中，就能知道这是一个工厂方法的类。这个类是在1.2版本中加入的，作者部署本杰明雷，而是Jan Luehe\n这个类主要是用来做 转换那些并不透明的加密密钥类型的Key，为一些按照特殊规范的透明Key,这是一个双向的过程。\nService Provider Interface(SPI)\n```\npublic class KeyFactory{\n    private final String algorithm;\n\tprivate Provider provider;\n\tprivate volatile KeyFactorySpi spi;\n\tprivate final Object lock = new Object();\n\tprivate Iterator<Service> serviceIterator;\n\t\n\tprotected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider,\n                         String algorithm){......}\n\tprivate KeyFactory(String algorithm) throws NoSuchAlgorithmException {......}\n\t\n\tpublic static KeyFactory getInstance(String algorithm){......}\n    public static KeyFactory getInstance(String algorithm, String provider)\n            throws NoSuchAlgorithmException, NoSuchProviderException {......}\n    public static KeyFactory getInstance(String algorithm, Provider provider)\n            throws NoSuchAlgorithmException {......}\n\t\t\t\n\tpublic final Provider getProvider() {\n        synchronized (lock) {\n            serviceIterator = null;\n            return provider;\n        }\n    } \n\tpublic final String getAlgorithm() {\n        return this.algorithm;\n    }\n\tprivate KeyFactorySpi nextSpi(KeyFactorySpi oldSpi) {/** keyFactory 分派key **/\n        synchronized (lock) {\n\t\t    ......\n\t\t}\n\t}\n\tpublic final PublicKey generatePublic(KeySpec keySpec)\n            throws InvalidKeySpecException {.......}\n\tpublic final PrivateKey generatePrivate(KeySpec keySpec)\n            throws InvalidKeySpecException {......}\n\tpublic final <T extends KeySpec> T getKeySpec(Key key, Class<T> keySpec)\n            throws InvalidKeySpecException {......}\t\t\n\tpublic final Key translateKey(Key key) throws InvalidKeyException {......}\t\t\n}\n```\n\nKeyFactorySpi 抽象类：\n继承这个类中的所有抽象方法必须实现由 provider 供应关键工厂特定的实现算法。\nKeyPair 类：\n同时持有公钥和私钥。\n\n此外，在*java.security.spec* 下面，也提供了很多的**XXKeyXX**的实现，这是由于历史的原因没有放到**java.security.* **下面。\n如：\n**java.security.spec.KeySpec;** 接口， All key specifications must implement this interface. 源码的注释中已经说明了，所有的规格化的Key都必须要实现这个接口。\n**java.security.spec.PKCS8EncodedKeySpec;** 这是一套解码规范。PKCS#8 标准\n**java.security.spec.X509EncodedKeySpec;**  这是一套解码规范，X.509 标准\n\n他们都同一实现了keySpe 接口。\n\n在java.security.interface 中定义了各种special key 的接口实现。\n\n# 证书\n在 java.security.cert 中有各种证书的实现, 都是XXCertXX \n其中，的 CertStore 和 KeyStore 的结构类似。\n证书是 ， 密钥外的另外一种加密方式。\n\n\n\n>参考文章：\nhttp://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\nhttp://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\nhttp://m635674608.iteye.com/blog/1844777（强推荐）\nhttp://joshuasabrina.iteye.com/blog/1798245（强推荐）\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\nhttp://www.cnblogs.com/NullPointException/p/5054082.html\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html","slug":"jca/02","published":1,"date":"2016-11-12T09:59:03.630Z","updated":"2016-11-20T15:53:59.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp7zf0004c88qwou9powk","content":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe>\n\n<p>在翻看，jce 的源码中，笔者发现，jce中的源码都基本引用到了java.security 下的类；<br>通过上篇的导读，我们基本可以了解java.security 的基本架构的主要组成：</p>\n<ul>\n<li>PKI (public key infrastructure)</li>\n<li>认证(authentication)</li>\n<li>安全通信(secure conmmunication)</li>\n<li>访问控制(access control)</li>\n</ul>\n<h1 id=\"PKI\"><a href=\"#PKI\" class=\"headerlink\" title=\"PKI\"></a>PKI</h1><p>PKI —— 公钥基础构件<br><strong>PKI</strong>是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。<br>Java平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。<br>java Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。<br>既然Provider 是如此总要的，好奇的我总是要去看看的：<br>看到该类的作者是：本杰明雷诺（Benjamin Renaud） 和 安德烈亚斯斯特本兹（Andreas Sterbenz）<br><strong>PKI</strong>相关的类可以在<strong>java.security</strong>和<strong>java.security.cert</strong>包下获取。</p>\n<h1 id=\"PKI的组成\"><a href=\"#PKI的组成\" class=\"headerlink\" title=\"PKI的组成\"></a>PKI的组成</h1><ul>\n<li><strong>密匙 key</strong></li>\n<li><strong>证书 certificate</strong></li>\n<li><strong>公钥加密 Public key encryption（PKE）</strong></li>\n<li><strong>可信的证书颁发机构 CAS</strong></li>\n</ul>\n<h1 id=\"KeyStore\"><a href=\"#KeyStore\" class=\"headerlink\" title=\"KeyStore\"></a>KeyStore</h1><p>下面我们来说说密钥：<br>密钥在jdk 中，她主要是是通过 key store 来实现，相关涉及的类都是 XXkeyXX 这类的形式。我们先看看java.security.KeyStore类，在该类的类头部，注释已经说明她是一个用来存储密钥和证书的类或叫数据解构更加合适。<br>在KeyStore中包含了好几个内部类，蛮有意思的，包括Builder内部类数据解构的构建者，<br><strong>CallbackHandlerProtection</strong>,<br><strong>PasswordParameter</strong>,<br><strong>PrivateKeyEntry</strong>, 私钥，一个存储加密过的私钥，用来存储保护的信息，防止非法访问。<br><strong>SecretKeyEntry</strong>, 密钥<br><strong>SimpleLoadStoreParameter</strong>,<br><strong>TrustedCeritificateEntry</strong> 可信任证书，他包含一个单一的公钥，可以供给别人使用，我们称为可信任证书</p>\n<p>要学习如何看源码，看源码的注释是必不可少的，幸运的是JKD的源码注释是那么的清晰。哈哈，感谢前人的努力。<br><strong>KeyStore</strong>是用来存储加密密钥和加密证书的存储解构，类的表头注释来了个开门见山。<br><strong>KeyStore</strong>可以支持不同的实体类型的存储结构，每一个类型都实现了内部的一个KeyStore.Entry 接口。<br>它支持一下的几种存储解构类型：</p>\n<ul>\n<li><strong>KeyStore.PrivateKeyEntry</strong><blockquote>\n<p>这个存储解构持有 加密的 <strong>PrivateKey</strong>(私钥)，用来存储一个被保护的格式数据，防止被接近访问。同时他也会实现一个对公钥开放的证书链来供外部访问。<br>私钥和证书主要是个一个已经被授权的应用来访问私钥和证书链的。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final class PrivateKeyEntry implements Entry &#123;</div><div class=\"line\"></div><div class=\"line\">    private final PrivateKey privKey; </div><div class=\"line\">\t\t</div><div class=\"line\">    private final Certificate[] chain;</div><div class=\"line\">    private final Set&lt;Attribute&gt; attributes;</div><div class=\"line\"></div><div class=\"line\">    public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain) &#123;</div><div class=\"line\">        this(privateKey, chain, Collections.&lt;Attribute&gt;emptySet());</div><div class=\"line\">    &#125;</div><div class=\"line\">    public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain,</div><div class=\"line\">       Set&lt;Attribute&gt; attributes) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (privateKey == null || chain == null || attributes == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (chain.length == 0) &#123;</div><div class=\"line\">            throw new IllegalArgumentException</div><div class=\"line\">                            (&quot;invalid zero-length input chain&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Certificate[] clonedChain = chain.clone();</div><div class=\"line\">        String certType = clonedChain[0].getType();</div><div class=\"line\">        for (int i = 1; i &lt; clonedChain.length; i++) &#123;</div><div class=\"line\">            if (!certType.equals(clonedChain[i].getType())) &#123;</div><div class=\"line\">                throw new IllegalArgumentException</div><div class=\"line\">                            (&quot;chain does not contain certificates &quot; +</div><div class=\"line\">                            &quot;of the same type&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (!privateKey.getAlgorithm().equals</div><div class=\"line\">                    (clonedChain[0].getPublicKey().getAlgorithm())) &#123;</div><div class=\"line\">            throw new IllegalArgumentException</div><div class=\"line\">                            (&quot;private key algorithm does not match &quot; +</div><div class=\"line\">                            &quot;algorithm of public key in end entity &quot; +</div><div class=\"line\">                            &quot;certificate (at index 0)&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.privKey = privateKey;</div><div class=\"line\"></div><div class=\"line\">        if (clonedChain[0] instanceof X509Certificate &amp;&amp;</div><div class=\"line\">            !(clonedChain instanceof X509Certificate[])) &#123;</div><div class=\"line\"></div><div class=\"line\">            this.chain = new X509Certificate[clonedChain.length];</div><div class=\"line\">            System.arraycopy(clonedChain, 0,</div><div class=\"line\">                            this.chain, 0, clonedChain.length);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.chain = clonedChain;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        this.attributes =</div><div class=\"line\">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class=\"line\">    &#125;</div><div class=\"line\">    public PrivateKey getPrivateKey() &#123;</div><div class=\"line\">        return privKey;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Certificate[] getCertificateChain() &#123;</div><div class=\"line\">        return chain.clone();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Certificate getCertificate() &#123;</div><div class=\"line\">        return chain[0];</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class=\"line\">        return attributes;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        StringBuilder sb = new StringBuilder();</div><div class=\"line\">        sb.append(&quot;Private key entry and certificate chain with &quot;</div><div class=\"line\">            + chain.length + &quot; elements:\\r\\n&quot;);</div><div class=\"line\">        for (Certificate cert : chain) &#123;</div><div class=\"line\">            sb.append(cert);</div><div class=\"line\">            sb.append(&quot;\\r\\n&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>KeyStore.SecretKeyEntry</strong><blockquote>\n<p>这个存储解构是存储加密过的<strong>SecretKey</strong>，来防止没授权访问。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final class SecretKeyEntry implements Entry &#123;</div><div class=\"line\"></div><div class=\"line\">    private final SecretKey sKey;</div><div class=\"line\">    private final Set&lt;Attribute&gt; attributes;</div><div class=\"line\">    public SecretKeyEntry(SecretKey secretKey) &#123;</div><div class=\"line\">        if (secretKey == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.sKey = secretKey;</div><div class=\"line\">        this.attributes = Collections.&lt;Attribute&gt;emptySet();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public SecretKeyEntry(SecretKey secretKey, Set&lt;Attribute&gt; attributes) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (secretKey == null || attributes == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.sKey = secretKey;</div><div class=\"line\">        this.attributes =</div><div class=\"line\">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class=\"line\">    &#125;</div><div class=\"line\">    public SecretKey getSecretKey() &#123;</div><div class=\"line\">        return sKey;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class=\"line\">        return attributes;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;Secret key entry with algorithm &quot; + sKey.getAlgorithm();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>KeyStore.TrustedCertificateEntry</strong><blockquote>\n<p>这个存储实体包含一个单一的公钥，证书是属于另外的一部分，被叫做可信任证书。因为<strong>StoreKey</strong>的拥有者，对这些证书是已经有明确的身份确认的。通过这类证书实体，我们可以用来实现授权第三方的用户。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final class TrustedCertificateEntry implements Entry &#123;</div><div class=\"line\"></div><div class=\"line\">    private final Certificate cert;</div><div class=\"line\">    private final Set&lt;Attribute&gt; attributes;</div><div class=\"line\">    public TrustedCertificateEntry(Certificate trustedCert) &#123;</div><div class=\"line\">        if (trustedCert == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.cert = trustedCert;</div><div class=\"line\">        this.attributes = Collections.&lt;Attribute&gt;emptySet();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public TrustedCertificateEntry(Certificate trustedCert,</div><div class=\"line\">       Set&lt;Attribute&gt; attributes) &#123;</div><div class=\"line\">        if (trustedCert == null || attributes == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.cert = trustedCert;</div><div class=\"line\">        this.attributes =</div><div class=\"line\">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Certificate getTrustedCertificate() &#123;</div><div class=\"line\">        return cert;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class=\"line\">        return attributes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Returns a string representation of this TrustedCertificateEntry.</div><div class=\"line\">     * @return a string representation of this TrustedCertificateEntry.</div><div class=\"line\">     */</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;Trusted certificate entry:\\r\\n&quot; + cert.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"KeyStore使用：\"><a href=\"#KeyStore使用：\" class=\"headerlink\" title=\"KeyStore使用：\"></a>KeyStore使用：</h1><p>上述的实体类中，每个Entry都快可以有自己的实体别名。<br>使用KeyStore的一些常用方法：</p>\n<ul>\n<li><p>依赖于默认类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</div></pre></td></tr></table></figure>\n</li>\n<li><p>提供一个特殊的KeyStore类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore ks = KeyStore.getInstance(&quot;JKS&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过输入流来载入KeyStore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</div><div class=\"line\"></div><div class=\"line\">/** get user password and file input stream*/</div><div class=\"line\">char[] password = getPassword();</div><div class=\"line\"></div><div class=\"line\">try (FileInputStream fis = new FileInputStream(&quot;keyStoreName&quot;)) &#123;</div><div class=\"line\"> ks.load(fis, password);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造一个空的KeyStore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore.ProtectionParameter protParam =</div><div class=\"line\">    new KeyStore.PasswordProtection(password);</div><div class=\"line\"></div><div class=\"line\">/** get my private key**/</div><div class=\"line\">KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)</div><div class=\"line\">    ks.getEntry(&quot;privateKeyAlias&quot;, protParam);</div><div class=\"line\">PrivateKey myPrivateKey = pkEntry.getPrivateKey();</div><div class=\"line\"></div><div class=\"line\">/** save my secret key**/</div><div class=\"line\">javax.crypto.SecretKey mySecretKey;</div><div class=\"line\">KeyStore.SecretKeyEntry skEntry =</div><div class=\"line\">    new KeyStore.SecretKeyEntry(mySecretKey);</div><div class=\"line\">ks.setEntry(&quot;secretKeyAlias&quot;, skEntry, protParam);</div><div class=\"line\"></div><div class=\"line\">/** store away the keystore**/</div><div class=\"line\">try (FileOutputStream fos = new FileOutputStream(&quot;newKeyStoreName&quot;)) &#123;</div><div class=\"line\">    ks.store(fos, password);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面，我们在来看看其他的<strong>Key</strong><br>Key 接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public interface Key extends java.io.Serializable &#123;</div><div class=\"line\">    static final long serialVersionUID = 6603384152749567654L;</div><div class=\"line\">\tpublic String getAlgorithm(); // 获取加密算法名，如DSA,就是DSA算法的密钥。</div><div class=\"line\">\tpublic String getFormat();// 返回这个key的主要解码格式的名称,</div><div class=\"line\">\tpublic byte[] getEncoded();//返回Key的解码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在来看看KeyException 类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public class KeyException extends GeneralSecurityException &#123;</div><div class=\"line\">    public KeyException() &#123;</div><div class=\"line\">        super();</div><div class=\"line\">    &#125;</div><div class=\"line\">\tpublic KeyException(String msg) &#123;</div><div class=\"line\">        super(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">\tpublic KeyException(String message, Throwable cause) &#123;</div><div class=\"line\">        super(message, cause);</div><div class=\"line\">    &#125;</div><div class=\"line\">\tpublic KeyException(Throwable cause) &#123;</div><div class=\"line\">        super(cause);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是比较常见的异常类，在Key 的算法返回值为null 时会抛出该异常。他的父级异常 GeneralSecurityException 和Exception 类跟他的构造方法类是。</p>\n<p>KeyFactory 类：<br>从名字中，就能知道这是一个工厂方法的类。这个类是在1.2版本中加入的，作者部署本杰明雷，而是Jan Luehe<br>这个类主要是用来做 转换那些并不透明的加密密钥类型的Key，为一些按照特殊规范的透明Key,这是一个双向的过程。<br>Service Provider Interface(SPI)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class KeyFactory&#123;</div><div class=\"line\">    private final String algorithm;</div><div class=\"line\">\tprivate Provider provider;</div><div class=\"line\">\tprivate volatile KeyFactorySpi spi;</div><div class=\"line\">\tprivate final Object lock = new Object();</div><div class=\"line\">\tprivate Iterator&lt;Service&gt; serviceIterator;</div><div class=\"line\">\t</div><div class=\"line\">\tprotected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider,</div><div class=\"line\">                         String algorithm)&#123;......&#125;</div><div class=\"line\">\tprivate KeyFactory(String algorithm) throws NoSuchAlgorithmException &#123;......&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static KeyFactory getInstance(String algorithm)&#123;......&#125;</div><div class=\"line\">    public static KeyFactory getInstance(String algorithm, String provider)</div><div class=\"line\">            throws NoSuchAlgorithmException, NoSuchProviderException &#123;......&#125;</div><div class=\"line\">    public static KeyFactory getInstance(String algorithm, Provider provider)</div><div class=\"line\">            throws NoSuchAlgorithmException &#123;......&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\tpublic final Provider getProvider() &#123;</div><div class=\"line\">        synchronized (lock) &#123;</div><div class=\"line\">            serviceIterator = null;</div><div class=\"line\">            return provider;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">\tpublic final String getAlgorithm() &#123;</div><div class=\"line\">        return this.algorithm;</div><div class=\"line\">    &#125;</div><div class=\"line\">\tprivate KeyFactorySpi nextSpi(KeyFactorySpi oldSpi) &#123;/** keyFactory 分派key **/</div><div class=\"line\">        synchronized (lock) &#123;</div><div class=\"line\">\t\t    ......</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic final PublicKey generatePublic(KeySpec keySpec)</div><div class=\"line\">            throws InvalidKeySpecException &#123;.......&#125;</div><div class=\"line\">\tpublic final PrivateKey generatePrivate(KeySpec keySpec)</div><div class=\"line\">            throws InvalidKeySpecException &#123;......&#125;</div><div class=\"line\">\tpublic final &lt;T extends KeySpec&gt; T getKeySpec(Key key, Class&lt;T&gt; keySpec)</div><div class=\"line\">            throws InvalidKeySpecException &#123;......&#125;\t\t</div><div class=\"line\">\tpublic final Key translateKey(Key key) throws InvalidKeyException &#123;......&#125;\t\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>KeyFactorySpi 抽象类：<br>继承这个类中的所有抽象方法必须实现由 provider 供应关键工厂特定的实现算法。<br>KeyPair 类：<br>同时持有公钥和私钥。</p>\n<p>此外，在<em>java.security.spec</em> 下面，也提供了很多的<strong>XXKeyXX</strong>的实现，这是由于历史的原因没有放到<strong>java.security.* </strong>下面。<br>如：<br><strong>java.security.spec.KeySpec;</strong> 接口， All key specifications must implement this interface. 源码的注释中已经说明了，所有的规格化的Key都必须要实现这个接口。<br><strong>java.security.spec.PKCS8EncodedKeySpec;</strong> 这是一套解码规范。PKCS#8 标准<br><strong>java.security.spec.X509EncodedKeySpec;</strong>  这是一套解码规范，X.509 标准</p>\n<p>他们都同一实现了keySpe 接口。</p>\n<p>在java.security.interface 中定义了各种special key 的接口实现。</p>\n<h1 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h1><p>在 java.security.cert 中有各种证书的实现, 都是XXCertXX<br>其中，的 CertStore 和 KeyStore 的结构类似。<br>证书是 ， 密钥外的另外一种加密方式。</p>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a><br><a href=\"http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href=\"http://m635674608.iteye.com/blog/1844777（强推荐）\" target=\"_blank\" rel=\"external\">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href=\"http://joshuasabrina.iteye.com/blog/1798245（强推荐）\" target=\"_blank\" rel=\"external\">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href=\"http://www.cnblogs.com/NullPointException/p/5054082.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n</ul>\n</blockquote>","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe>\n\n<p>在翻看，jce 的源码中，笔者发现，jce中的源码都基本引用到了java.security 下的类；<br>通过上篇的导读，我们基本可以了解java.security 的基本架构的主要组成：</p>\n<ul>\n<li>PKI (public key infrastructure)</li>\n<li>认证(authentication)</li>\n<li>安全通信(secure conmmunication)</li>\n<li>访问控制(access control)</li>\n</ul>\n<h1 id=\"PKI\"><a href=\"#PKI\" class=\"headerlink\" title=\"PKI\"></a>PKI</h1><p>PKI —— 公钥基础构件<br><strong>PKI</strong>是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。<br>Java平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。<br>java Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。<br>既然Provider 是如此总要的，好奇的我总是要去看看的：<br>看到该类的作者是：本杰明雷诺（Benjamin Renaud） 和 安德烈亚斯斯特本兹（Andreas Sterbenz）<br><strong>PKI</strong>相关的类可以在<strong>java.security</strong>和<strong>java.security.cert</strong>包下获取。</p>\n<h1 id=\"PKI的组成\"><a href=\"#PKI的组成\" class=\"headerlink\" title=\"PKI的组成\"></a>PKI的组成</h1><ul>\n<li><strong>密匙 key</strong></li>\n<li><strong>证书 certificate</strong></li>\n<li><strong>公钥加密 Public key encryption（PKE）</strong></li>\n<li><strong>可信的证书颁发机构 CAS</strong></li>\n</ul>\n<h1 id=\"KeyStore\"><a href=\"#KeyStore\" class=\"headerlink\" title=\"KeyStore\"></a>KeyStore</h1><p>下面我们来说说密钥：<br>密钥在jdk 中，她主要是是通过 key store 来实现，相关涉及的类都是 XXkeyXX 这类的形式。我们先看看java.security.KeyStore类，在该类的类头部，注释已经说明她是一个用来存储密钥和证书的类或叫数据解构更加合适。<br>在KeyStore中包含了好几个内部类，蛮有意思的，包括Builder内部类数据解构的构建者，<br><strong>CallbackHandlerProtection</strong>,<br><strong>PasswordParameter</strong>,<br><strong>PrivateKeyEntry</strong>, 私钥，一个存储加密过的私钥，用来存储保护的信息，防止非法访问。<br><strong>SecretKeyEntry</strong>, 密钥<br><strong>SimpleLoadStoreParameter</strong>,<br><strong>TrustedCeritificateEntry</strong> 可信任证书，他包含一个单一的公钥，可以供给别人使用，我们称为可信任证书</p>\n<p>要学习如何看源码，看源码的注释是必不可少的，幸运的是JKD的源码注释是那么的清晰。哈哈，感谢前人的努力。<br><strong>KeyStore</strong>是用来存储加密密钥和加密证书的存储解构，类的表头注释来了个开门见山。<br><strong>KeyStore</strong>可以支持不同的实体类型的存储结构，每一个类型都实现了内部的一个KeyStore.Entry 接口。<br>它支持一下的几种存储解构类型：</p>\n<ul>\n<li><strong>KeyStore.PrivateKeyEntry</strong><blockquote>\n<p>这个存储解构持有 加密的 <strong>PrivateKey</strong>(私钥)，用来存储一个被保护的格式数据，防止被接近访问。同时他也会实现一个对公钥开放的证书链来供外部访问。<br>私钥和证书主要是个一个已经被授权的应用来访问私钥和证书链的。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final class PrivateKeyEntry implements Entry &#123;</div><div class=\"line\"></div><div class=\"line\">    private final PrivateKey privKey; </div><div class=\"line\">\t\t</div><div class=\"line\">    private final Certificate[] chain;</div><div class=\"line\">    private final Set&lt;Attribute&gt; attributes;</div><div class=\"line\"></div><div class=\"line\">    public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain) &#123;</div><div class=\"line\">        this(privateKey, chain, Collections.&lt;Attribute&gt;emptySet());</div><div class=\"line\">    &#125;</div><div class=\"line\">    public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain,</div><div class=\"line\">       Set&lt;Attribute&gt; attributes) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (privateKey == null || chain == null || attributes == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (chain.length == 0) &#123;</div><div class=\"line\">            throw new IllegalArgumentException</div><div class=\"line\">                            (&quot;invalid zero-length input chain&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Certificate[] clonedChain = chain.clone();</div><div class=\"line\">        String certType = clonedChain[0].getType();</div><div class=\"line\">        for (int i = 1; i &lt; clonedChain.length; i++) &#123;</div><div class=\"line\">            if (!certType.equals(clonedChain[i].getType())) &#123;</div><div class=\"line\">                throw new IllegalArgumentException</div><div class=\"line\">                            (&quot;chain does not contain certificates &quot; +</div><div class=\"line\">                            &quot;of the same type&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (!privateKey.getAlgorithm().equals</div><div class=\"line\">                    (clonedChain[0].getPublicKey().getAlgorithm())) &#123;</div><div class=\"line\">            throw new IllegalArgumentException</div><div class=\"line\">                            (&quot;private key algorithm does not match &quot; +</div><div class=\"line\">                            &quot;algorithm of public key in end entity &quot; +</div><div class=\"line\">                            &quot;certificate (at index 0)&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.privKey = privateKey;</div><div class=\"line\"></div><div class=\"line\">        if (clonedChain[0] instanceof X509Certificate &amp;&amp;</div><div class=\"line\">            !(clonedChain instanceof X509Certificate[])) &#123;</div><div class=\"line\"></div><div class=\"line\">            this.chain = new X509Certificate[clonedChain.length];</div><div class=\"line\">            System.arraycopy(clonedChain, 0,</div><div class=\"line\">                            this.chain, 0, clonedChain.length);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this.chain = clonedChain;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        this.attributes =</div><div class=\"line\">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class=\"line\">    &#125;</div><div class=\"line\">    public PrivateKey getPrivateKey() &#123;</div><div class=\"line\">        return privKey;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Certificate[] getCertificateChain() &#123;</div><div class=\"line\">        return chain.clone();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Certificate getCertificate() &#123;</div><div class=\"line\">        return chain[0];</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class=\"line\">        return attributes;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        StringBuilder sb = new StringBuilder();</div><div class=\"line\">        sb.append(&quot;Private key entry and certificate chain with &quot;</div><div class=\"line\">            + chain.length + &quot; elements:\\r\\n&quot;);</div><div class=\"line\">        for (Certificate cert : chain) &#123;</div><div class=\"line\">            sb.append(cert);</div><div class=\"line\">            sb.append(&quot;\\r\\n&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>KeyStore.SecretKeyEntry</strong><blockquote>\n<p>这个存储解构是存储加密过的<strong>SecretKey</strong>，来防止没授权访问。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final class SecretKeyEntry implements Entry &#123;</div><div class=\"line\"></div><div class=\"line\">    private final SecretKey sKey;</div><div class=\"line\">    private final Set&lt;Attribute&gt; attributes;</div><div class=\"line\">    public SecretKeyEntry(SecretKey secretKey) &#123;</div><div class=\"line\">        if (secretKey == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.sKey = secretKey;</div><div class=\"line\">        this.attributes = Collections.&lt;Attribute&gt;emptySet();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public SecretKeyEntry(SecretKey secretKey, Set&lt;Attribute&gt; attributes) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (secretKey == null || attributes == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.sKey = secretKey;</div><div class=\"line\">        this.attributes =</div><div class=\"line\">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class=\"line\">    &#125;</div><div class=\"line\">    public SecretKey getSecretKey() &#123;</div><div class=\"line\">        return sKey;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class=\"line\">        return attributes;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;Secret key entry with algorithm &quot; + sKey.getAlgorithm();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>KeyStore.TrustedCertificateEntry</strong><blockquote>\n<p>这个存储实体包含一个单一的公钥，证书是属于另外的一部分，被叫做可信任证书。因为<strong>StoreKey</strong>的拥有者，对这些证书是已经有明确的身份确认的。通过这类证书实体，我们可以用来实现授权第三方的用户。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final class TrustedCertificateEntry implements Entry &#123;</div><div class=\"line\"></div><div class=\"line\">    private final Certificate cert;</div><div class=\"line\">    private final Set&lt;Attribute&gt; attributes;</div><div class=\"line\">    public TrustedCertificateEntry(Certificate trustedCert) &#123;</div><div class=\"line\">        if (trustedCert == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.cert = trustedCert;</div><div class=\"line\">        this.attributes = Collections.&lt;Attribute&gt;emptySet();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public TrustedCertificateEntry(Certificate trustedCert,</div><div class=\"line\">       Set&lt;Attribute&gt; attributes) &#123;</div><div class=\"line\">        if (trustedCert == null || attributes == null) &#123;</div><div class=\"line\">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.cert = trustedCert;</div><div class=\"line\">        this.attributes =</div><div class=\"line\">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class=\"line\">    &#125;</div><div class=\"line\">    public Certificate getTrustedCertificate() &#123;</div><div class=\"line\">        return cert;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class=\"line\">        return attributes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * Returns a string representation of this TrustedCertificateEntry.</div><div class=\"line\">     * @return a string representation of this TrustedCertificateEntry.</div><div class=\"line\">     */</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return &quot;Trusted certificate entry:\\r\\n&quot; + cert.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"KeyStore使用：\"><a href=\"#KeyStore使用：\" class=\"headerlink\" title=\"KeyStore使用：\"></a>KeyStore使用：</h1><p>上述的实体类中，每个Entry都快可以有自己的实体别名。<br>使用KeyStore的一些常用方法：</p>\n<ul>\n<li><p>依赖于默认类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</div></pre></td></tr></table></figure>\n</li>\n<li><p>提供一个特殊的KeyStore类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore ks = KeyStore.getInstance(&quot;JKS&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过输入流来载入KeyStore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</div><div class=\"line\"></div><div class=\"line\">/** get user password and file input stream*/</div><div class=\"line\">char[] password = getPassword();</div><div class=\"line\"></div><div class=\"line\">try (FileInputStream fis = new FileInputStream(&quot;keyStoreName&quot;)) &#123;</div><div class=\"line\"> ks.load(fis, password);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造一个空的KeyStore</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">KeyStore.ProtectionParameter protParam =</div><div class=\"line\">    new KeyStore.PasswordProtection(password);</div><div class=\"line\"></div><div class=\"line\">/** get my private key**/</div><div class=\"line\">KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)</div><div class=\"line\">    ks.getEntry(&quot;privateKeyAlias&quot;, protParam);</div><div class=\"line\">PrivateKey myPrivateKey = pkEntry.getPrivateKey();</div><div class=\"line\"></div><div class=\"line\">/** save my secret key**/</div><div class=\"line\">javax.crypto.SecretKey mySecretKey;</div><div class=\"line\">KeyStore.SecretKeyEntry skEntry =</div><div class=\"line\">    new KeyStore.SecretKeyEntry(mySecretKey);</div><div class=\"line\">ks.setEntry(&quot;secretKeyAlias&quot;, skEntry, protParam);</div><div class=\"line\"></div><div class=\"line\">/** store away the keystore**/</div><div class=\"line\">try (FileOutputStream fos = new FileOutputStream(&quot;newKeyStoreName&quot;)) &#123;</div><div class=\"line\">    ks.store(fos, password);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下面，我们在来看看其他的<strong>Key</strong><br>Key 接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public interface Key extends java.io.Serializable &#123;</div><div class=\"line\">    static final long serialVersionUID = 6603384152749567654L;</div><div class=\"line\">\tpublic String getAlgorithm(); // 获取加密算法名，如DSA,就是DSA算法的密钥。</div><div class=\"line\">\tpublic String getFormat();// 返回这个key的主要解码格式的名称,</div><div class=\"line\">\tpublic byte[] getEncoded();//返回Key的解码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在来看看KeyException 类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public class KeyException extends GeneralSecurityException &#123;</div><div class=\"line\">    public KeyException() &#123;</div><div class=\"line\">        super();</div><div class=\"line\">    &#125;</div><div class=\"line\">\tpublic KeyException(String msg) &#123;</div><div class=\"line\">        super(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">\tpublic KeyException(String message, Throwable cause) &#123;</div><div class=\"line\">        super(message, cause);</div><div class=\"line\">    &#125;</div><div class=\"line\">\tpublic KeyException(Throwable cause) &#123;</div><div class=\"line\">        super(cause);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是比较常见的异常类，在Key 的算法返回值为null 时会抛出该异常。他的父级异常 GeneralSecurityException 和Exception 类跟他的构造方法类是。</p>\n<p>KeyFactory 类：<br>从名字中，就能知道这是一个工厂方法的类。这个类是在1.2版本中加入的，作者部署本杰明雷，而是Jan Luehe<br>这个类主要是用来做 转换那些并不透明的加密密钥类型的Key，为一些按照特殊规范的透明Key,这是一个双向的过程。<br>Service Provider Interface(SPI)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class KeyFactory&#123;</div><div class=\"line\">    private final String algorithm;</div><div class=\"line\">\tprivate Provider provider;</div><div class=\"line\">\tprivate volatile KeyFactorySpi spi;</div><div class=\"line\">\tprivate final Object lock = new Object();</div><div class=\"line\">\tprivate Iterator&lt;Service&gt; serviceIterator;</div><div class=\"line\">\t</div><div class=\"line\">\tprotected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider,</div><div class=\"line\">                         String algorithm)&#123;......&#125;</div><div class=\"line\">\tprivate KeyFactory(String algorithm) throws NoSuchAlgorithmException &#123;......&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static KeyFactory getInstance(String algorithm)&#123;......&#125;</div><div class=\"line\">    public static KeyFactory getInstance(String algorithm, String provider)</div><div class=\"line\">            throws NoSuchAlgorithmException, NoSuchProviderException &#123;......&#125;</div><div class=\"line\">    public static KeyFactory getInstance(String algorithm, Provider provider)</div><div class=\"line\">            throws NoSuchAlgorithmException &#123;......&#125;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\tpublic final Provider getProvider() &#123;</div><div class=\"line\">        synchronized (lock) &#123;</div><div class=\"line\">            serviceIterator = null;</div><div class=\"line\">            return provider;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">\tpublic final String getAlgorithm() &#123;</div><div class=\"line\">        return this.algorithm;</div><div class=\"line\">    &#125;</div><div class=\"line\">\tprivate KeyFactorySpi nextSpi(KeyFactorySpi oldSpi) &#123;/** keyFactory 分派key **/</div><div class=\"line\">        synchronized (lock) &#123;</div><div class=\"line\">\t\t    ......</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic final PublicKey generatePublic(KeySpec keySpec)</div><div class=\"line\">            throws InvalidKeySpecException &#123;.......&#125;</div><div class=\"line\">\tpublic final PrivateKey generatePrivate(KeySpec keySpec)</div><div class=\"line\">            throws InvalidKeySpecException &#123;......&#125;</div><div class=\"line\">\tpublic final &lt;T extends KeySpec&gt; T getKeySpec(Key key, Class&lt;T&gt; keySpec)</div><div class=\"line\">            throws InvalidKeySpecException &#123;......&#125;\t\t</div><div class=\"line\">\tpublic final Key translateKey(Key key) throws InvalidKeyException &#123;......&#125;\t\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>KeyFactorySpi 抽象类：<br>继承这个类中的所有抽象方法必须实现由 provider 供应关键工厂特定的实现算法。<br>KeyPair 类：<br>同时持有公钥和私钥。</p>\n<p>此外，在<em>java.security.spec</em> 下面，也提供了很多的<strong>XXKeyXX</strong>的实现，这是由于历史的原因没有放到<strong>java.security.* </strong>下面。<br>如：<br><strong>java.security.spec.KeySpec;</strong> 接口， All key specifications must implement this interface. 源码的注释中已经说明了，所有的规格化的Key都必须要实现这个接口。<br><strong>java.security.spec.PKCS8EncodedKeySpec;</strong> 这是一套解码规范。PKCS#8 标准<br><strong>java.security.spec.X509EncodedKeySpec;</strong>  这是一套解码规范，X.509 标准</p>\n<p>他们都同一实现了keySpe 接口。</p>\n<p>在java.security.interface 中定义了各种special key 的接口实现。</p>\n<h1 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h1><p>在 java.security.cert 中有各种证书的实现, 都是XXCertXX<br>其中，的 CertStore 和 KeyStore 的结构类似。<br>证书是 ， 密钥外的另外一种加密方式。</p>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a><br><a href=\"http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href=\"http://m635674608.iteye.com/blog/1844777（强推荐）\">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href=\"http://joshuasabrina.iteye.com/blog/1798245（强推荐）\">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href=\"http://www.cnblogs.com/NullPointException/p/5054082.html\">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>\n</blockquote>"},{"title":"java.security源码解读系列-运用加密技术保护Java源代码","_content":"\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n\n-----------------------------------\n\n# 为什么要加密？\n对于传统的C或C++之类的语言来说，要在Web上保护源代码是很容易的，只要不发布它就可以。遗憾的是，Java程序的源代码很容易被别人偷看。只要有一个反编译器，任何人都可以分析别人的代码。Java的灵活性使得源代码很容易被窃取，但与此同时，它也使通过加密保护代码变得相对容易，我们唯一需要了解的就是Java的ClassLoader对象。当然，在加密过程中，有关Java Cryptography Extension（JCE）的知识也是必不可少的。\n\n有几种技术可以“模糊”Java类文件，使得反编译器处理类文件的效果大打折扣。然而，修改反编译器使之能够处理这些经过模糊处理的类文件并不是什么难事，所以不能简单地依赖模糊技术来保证源代码的安全。\n\n我们可以用流行的加密工具加密应用，比如PGP（Pretty Good Privacy）或GPG（GNU Privacy Guard）。这时，最终用户在运行应用之前必须先进行解密。但解密之后，最终用户就有了一份不加密的类文件，这和事先不进行加密没有什么差别。\n\nJava运行时装入字节码的机制隐含地意味着可以对字节码进行修改。JVM每次装入类文件时都需要一个称为ClassLoader的对象，这个对象负责把新的类装入正在运行的JVM。JVM给ClassLoader一个包含了待装入类（比如java.lang.Object）名字的字符串，然后由ClassLoader负责找到类文件，装入原始数据，并把它转换成一个Class对象。\n\n我们可以通过定制ClassLoader，在类文件执行之前修改它。这种技术的应用非常广泛――在这里，它的用途是在类文件装入之时进行解密，因此可以看成是一种即时解密器。由于解密后的字节码文件永远不会保存到文件系统，所以窃密者很难得到解密后的代码。\n\n由于把原始字节码转换成Class对象的过程完全由系统负责，所以创建定制ClassLoader对象其实并不困难，只需先获得原始数据，接着就可以进行包含解密在内的任何转换。\n\nJava 2在一定程度上简化了定制ClassLoader的构建。在Java 2中，loadClass的缺省实现仍旧负责处理所有必需的步骤，但为了顾及各种定制的类装入过程，它还调用一个新的findClass方法。\n\n这为我们编写定制的ClassLoader提供了一条捷径，减少了麻烦：只需覆盖findClass，而不是覆盖loadClass。这种方法避免了重复所有装入器必需执行的公共步骤，因为这一切由loadClass负责。\n\n不过，本文的定制ClassLoader并不使用这种方法。原因很简单。如果由默认的ClassLoader先寻找经过加密的类文件，它可以找到；但由于类文件已经加密，所以它不会认可这个类文件，装入过程将失败。因此，我们必须自己实现loadClass，稍微增加了一些工作量。\n\n--------------------------------------\n\n<!-- more  -->\n\n# 定制类装入器\n每一个运行着的JVM已经拥有一个ClassLoader。这个默认的ClassLoader根据CLASSPATH环境变量的值，在本地文件系统中寻找合适的字节码文件。\n\n应用定制ClassLoader要求对这个过程有较为深入的认识。我们首先必须创建一个定制ClassLoader类的实例，然后显式地要求它装入另外一个类。这就强制JVM把该类以及所有它所需要的类关联到定制的ClassLoader。Listing 1显示了如何用定制ClassLoader装入类文件。\n【Listing 1：利用定制的ClassLoader装入类文件】\n```\n  /** 首先创建一个ClassLoader对象 **/\n  ClassLoader myClassLoader = new myClassLoader();\n  /** 利用定制ClassLoader对象装入类文件 **/\n  /** 并把它转换成Class对象 **/\n  Class myClass = myClassLoader.loadClass( \"mypackage.MyClass\" );\n  /** 最后，创建该类的一个实例 **/\n  Object newInstance = myClass.newInstance();\n  /** 注意，MyClass所需要的所有其他类，都将通过 **\n  /** 定制的ClassLoader自动装入 **/\n```\n如前所述，定制ClassLoader只需先获取类文件的数据，然后把字节码传递给运行时系统，由后者完成余下的任务。\n\nClassLoader有几个重要的方法。创建定制的ClassLoader时，我们只需覆盖其中的一个，即loadClass，提供获取原始类文件数据的代码。这个方法有两个参数：类的名字，以及一个表示JVM是否要求解析类名字的标记（即是否同时装入有依赖关系的类）。如果这个标记是true，我们只需在返回JVM之前调用resolveClass。\n\n【Listing 2：ClassLoader.loadClass()的一个简单实现】\n```\n      public Class loadClass( String name, boolean resolve )\n      throws ClassNotFoundException {\n    try {\n      /** 我们要创建的Class对象 **/\n       Class clasz = null;\n      /** 必需的步骤1：如果类已经在系统缓冲之中，**/\n      /** 我们不必再次装入它 **/\n      clasz = findLoadedClass( name );\n      if (clasz != null)\n        return clasz;\n      /** 下面是定制部分 **/\n      byte classData[] = /* 通过某种方法获取字节码数据 */;\n      if (classData != null) {\n        /** 成功读取字节码数据，现在把它转换成一个Class对象 **/\n        clasz = defineClass( name, classData, 0, classData.length );\n      }\n      /** 必需的步骤2：如果上面没有成功，**/\n      /** 我们尝试用默认的ClassLoader装入它 **/\n      if (clasz == null)\n        clasz = findSystemClass( name );\n      /** 必需的步骤3：如有必要，则装入相关的类 **/\n      if (resolve && clasz != null)\n        resolveClass( clasz );\n      /** 把类返回给调用者 **/\n      return clasz;\n    } catch( IOException ie ) {\n      throw new ClassNotFoundException( ie.toString() );\n    } catch( GeneralSecurityException gse ) {\n      throw new ClassNotFoundException( gse.toString() );\n    }\n  }\n```\nListing 2显示了一个简单的loadClass实现。代码中的大部分对所有ClassLoader对象来说都一样，但有一小部分（已通过注释标记）是特有的。在处理过程中，ClassLoader对象要用到其他几个辅助方法：\n\n- findLoadedClass：用来进行检查，以便确认被请求的类当前还不存在。loadClass方法应该首先调用它。\n- defineClass：获得原始类文件字节码数据之后，调用defineClass把它转换成一个Class对象。任何loadClass实现都必须调用这个方法。\n- findSystemClass：提供默认ClassLoader的支持。如果用来寻找类的定制方法不能找到指定的类（或者有意地不用定制方法），则可以调用该方法尝试默认的装入方式。这是很有用的，特别是从普通的JAR文件装入标准Java类时。\n- resolveClass：当JVM想要装入的不仅包括指定的类，而且还包括该类引用的所有其他类时，它会把loadClass的resolve参数设置成true。这时，我们必须在返回刚刚装入的Class对象给调用者之前调用resolveClass。\n\n-------------------\n# 加密、解密\nJava加密扩展即Java Cryptography Extension，简称JCE。它是Sun的加密服务软件，包含了加密和密匙生成功能。JCE是JCA（Java Cryptography Architecture）的一种扩展。\n\nJCE没有规定具体的加密算法，但提供了一个框架，加密算法的具体实现可以作为服务提供者加入。除了JCE框架之外，JCE软件包还包含了SunJCE服务提供者，其中包括许多有用的加密算法，比如DES（Data Encryption Standard）和Blowfish。\n\n为简单计，在本文中我们将用DES算法加密和解密字节码。下面是用JCE加密和解密数据必须遵循的基本步骤：\n- 步骤1：生成一个安全密匙。在加密或解密任何数据之前需要有一个密匙。密匙是随同被加密的应用一起发布的一小段数据，Listing 3显示了如何生成一个密匙。\n\n```\n  /* DES算法要求有一个可信任的随机数源 */\n  SecureRandom sr = new SecureRandom();\n  /* 为我们选择的DES算法生成一个KeyGenerator对象 */\n  KeyGenerator kg = KeyGenerator.getInstance( \"DES\" );\n  kg.init( sr );\n  /*生成密匙 */\n  SecretKey key = kg.generateKey();\n  /* 获取密匙数据 */\n  byte rawKeyData[] = key.getEncoded();\n  /* 接下来就可以用密匙进行加密或解密，或者把它保存\n     为文件供以后使用 */\n  doSomething( rawKeyData );\n```\n\n- 步骤2：加密数据。得到密匙之后，接下来就可以用它加密数据。除了解密的ClassLoader之外，一般还要有一个加密待发布应用的独立程序（见Listing 4）。\n\n```\n    /* DES算法要求有一个可信任的随机数源 */\n    SecureRandom sr = new SecureRandom();\n    byte rawKeyData[] = /* 用某种方法获得密匙数据 */;\n    /* 从原始密匙数据创建DESKeySpec对象 */\n    DESKeySpec dks = new DESKeySpec( rawKeyData );\n    /* 创建一个密匙工厂，然后用它把DESKeySpec转换成 */\n    /* 一个SecretKey对象 */\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( \"DES\" );\n    SecretKey key = keyFactory.generateSecret( dks );\n    /* Cipher对象实际完成加密操作 */\n    Cipher cipher = Cipher.getInstance( \"DES\" );\n    /* 用密匙初始化Cipher对象 */\n    cipher.init( Cipher.ENCRYPT_MODE, key, sr );\n    /* 现在，获取数据并加密 */\n    byte data[] = /* 用某种方法获取数据 */\n    /* 正式执行加密操作 */\n    byte encryptedData[] = cipher.doFinal( data );\n    /* 进一步处理加密后的数据 */\n    doSomething( encryptedData );\n```\n\n- 步骤3：解密数据。运行经过加密的应用时，ClassLoader分析并解密类文件。操作步骤如Listing 5所示。\n\n```\n    /* DES算法要求有一个可信任的随机数源 */\n    SecureRandom sr = new SecureRandom();\n    byte rawKeyData[] = /* 用某种方法获取原始密匙数据 */;\n    /* 从原始密匙数据创建一个DESKeySpec对象 */\n    DESKeySpec dks = new DESKeySpec( rawKeyData );\n    /* 创建一个密匙工厂，然后用它把DESKeySpec对象转换成 */\n    /* 一个SecretKey对象 */\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( \"DES\" );\n    SecretKey key = keyFactory.generateSecret( dks );\n    /* Cipher对象实际完成解密操作 */\n    Cipher cipher = Cipher.getInstance( \"DES\" );\n    /* 用密匙初始化Cipher对象 */\n    cipher.init( Cipher.DECRYPT_MODE, key, sr );\n    /* 现在，获取数据并解密 */\n    byte encryptedData[] = /* 获得经过加密的数据 */\n    /* 正式执行解密操作 */\n    byte decryptedData[] = cipher.doFinal( encryptedData );\n    /* 进一步处理解密后的数据 */\n    doSomething( decryptedData );\n```\n\n------------------------------------\n\n# 应用实例\n前面介绍了如何加密和解密数据。要部署一个经过加密的应用，步骤如下：\n- 1、步骤1：创建应用。我们的例子包含一个App主类，两个辅助类（分别称为Foo和Bar）。这个应用没有什么实际功用，但只要我们能够加密这个应用，加密其他应用也就不在话下。\n- 2、步骤2：生成一个安全密匙。在命令行，利用GenerateKey工具（参见GenerateKey.java）把密匙写入一个文件：\n     % java GenerateKey key.data\n- 3、步骤3：加密应用。在命令行，利用EncryptClasses工具（参见EncryptClasses.java）加密应用的类：\n     % java EncryptClasses key.data App.class Foo.class Bar.class\n该命令把每一个.class文件替换成它们各自的加密版本\n\n步骤4：运行经过加密的应用。用户通过一个DecryptStart程序运行经过加密的应用。DecryptStart程序如Listing 6所示。\n\n```\nimport java.io.*;\nimport java.security.*;\nimport java.lang.reflect.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\npublic class DecryptStart extends ClassLoader\n{\n  /* 这些对象在构造函数中设置， */\n  /* 以后loadClass()方法将利用它们解密类 */\n  private SecretKey key;\n  private Cipher cipher;\n  /* 构造函数：设置解密所需要的对象 */\n  public DecryptStart( SecretKey key ) throws GeneralSecurityException,\n      IOException {\n    this.key = key;\n    String algorithm = \"DES\";\n    SecureRandom sr = new SecureRandom();\n    System.err.println( \"[DecryptStart: creating cipher]\" );\n    cipher = Cipher.getInstance( algorithm );\n    cipher.init( Cipher.DECRYPT_MODE, key, sr );\n  }\n  /* main过程：我们要在这里读入密匙，创建DecryptStart的 */\n  /* 实例，它就是我们的定制ClassLoader。 */\n  /* 设置好ClassLoader以后，我们用它装入应用实例， */\n  /* 最后，我们通过Java Reflection API调用应用实例的main方法 */\n  static public void main( String args[] ) throws Exception {\n    String keyFilename = args[0];\n    String appName = args[1];\n     /* 这些是传递给应用本身的参数 */\n    String realArgs[] = new String[args.length-2];\n    System.arraycopy( args, 2, realArgs, 0, args.length-2 );\n    /* 读取密匙 */\n    System.err.println( \"[DecryptStart: reading key]\" );\n    byte rawKey[] = Util.readFile( keyFilename );\n    DESKeySpec dks = new DESKeySpec( rawKey );\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( \"DES\" );\n    SecretKey key = keyFactory.generateSecret( dks );\n    /* 创建解密的ClassLoader */\n    DecryptStart dr = new DecryptStart( key );\n    /* 创建应用主类的一个实例 */\n    /* 通过ClassLoader装入它 */\n    System.err.println( \"[DecryptStart: loading \"+appName+\"]\" );\n    Class clasz = dr.loadClass( appName );\n    /* 最后，通过Reflection API调用应用实例 */\n    /* 的main()方法 */\n    /* 获取一个对main()的引用 */\n    String proto[] = new String[1];\n    Class mainArgs[] = { (new String[1]).getClass() };\n    Method main = clasz.getMethod( \"main\", mainArgs );\n    /* 创建一个包含main()方法参数的数组 */\n    Object argsArray[] = { realArgs };\n    System.err.println( \"[DecryptStart: running \"+appName+\".main()]\" );\n    /* 调用main() */\n    main.invoke( null, argsArray );\n  }\n  public Class loadClass( String name, boolean resolve )\n      throws ClassNotFoundException {\n    try {\n      /* 我们要创建的Class对象 */\n      Class clasz = null;\n      /* 必需的步骤1：如果类已经在系统缓冲之中 */\n      /* 我们不必再次装入它 */\n      clasz = findLoadedClass( name );\n      if (clasz != null)\n        return clasz;\n      /* 下面是定制部分 */\n      try {\n        /* 读取经过加密的类文件 */\n        byte classData[] = Util.readFile( name+\".class\" );\n        if (classData != null) {\n          /* 解密... */\n          byte decryptedClassData[] = cipher.doFinal( classData );\n          /* 再把它转换成一个类 */\n          clasz = defineClass( name, decryptedClassData,\n            0, decryptedClassData.length );\n          System.err.println( \"[DecryptStart: decrypting class \"+name+\"]\" );\n        }\n      } catch( FileNotFoundException fnfe ) {\n      }\n      /* 必需的步骤2：如果上面没有成功 */\n      /* 我们尝试用默认的ClassLoader装入它 */\n      if (clasz == null)\n        clasz = findSystemClass( name );\n      /* 必需的步骤3：如有必要，则装入相关的类 */\n      if (resolve && clasz != null)\n        resolveClass( clasz );\n      /* 把类返回给调用者 */\n      return clasz;\n    } catch( IOException ie ) {\n      throw new ClassNotFoundException( ie.toString()\n);\n    } catch( GeneralSecurityException gse ) {\n      throw new ClassNotFoundException( gse.toString()\n);\n    }\n  }\n}\n```\n\n对于未经加密的应用，正常执行方式如下：\n\n```\n% java App arg0 arg1 arg2\n```\n\n对于经过加密的应用，则相应的运行方式为：\n\n```\n% java DecryptStart key.data App arg0 arg1 arg2\n```\n\nDecryptStart有两个目的。一个DecryptStart的实例就是一个实施即时解密操作的定制ClassLoader；同时，DecryptStart还包含一个main过程，它创建解密器实例并用它装入和运行应用。示例应用App的代码包含在App.java、Foo.java和Bar.java内。Util.java是一个文件I/O工具，本文示例多处用到了它。完整的代码请从本文最后下载。\n\n---------------------------\n\n# 注意事项\n\n我们看到，要在不修改源代码的情况下加密一个Java应用是很容易的。不过，世上没有完全安全的系统。本文的加密方式提供了一定程度的源代码保护，但对某些攻击来说它是脆弱的。\n虽然应用本身经过了加密，但启动程序DecryptStart没有加密。攻击者可以反编译启动程序并修改它，把解密后的类文件保存到磁盘。降低这种风险的办法之一是对启动程序进行高质量的模糊处理。或者，启动程序也可以采用直接编译成机器语言的代码，使得启动程序具有传统执行文件格式的安全性。\n另外还要记住的是，大多数JVM本身并不安全。狡猾的黑客可能会修改JVM，从ClassLoader之外获取解密后的代码并保存到磁盘，从而绕过本文的加密技术。Java没有为此提供真正有效的补救措施。\n不过应该指出的是，所有这些可能的攻击都有一个前提，这就是攻击者可以得到密匙。如果没有密匙，应用的安全性就完全取决于加密算法的安全性。虽然这种保护代码的方法称不上十全十美，但它仍不失为一种保护知识产权和敏感用户数据的有效方案。\n\n-------------------------\n\n# 参考资料\n>http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\nhttp://m635674608.iteye.com/blog/1844777（强推荐）\nhttp://joshuasabrina.iteye.com/blog/1798245（强推荐）\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\nhttp://www.cnblogs.com/NullPointException/p/5054082.html\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\n","source":"_posts/jca/00.md","raw":"---\ntitle: java.security源码解读系列-运用加密技术保护Java源代码\ncategories:\n- 源码阅读\n- security源码导读系列\ntags:\n- jdk源码系列\n- security源码导读系列\n---\n\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n\n-----------------------------------\n\n# 为什么要加密？\n对于传统的C或C++之类的语言来说，要在Web上保护源代码是很容易的，只要不发布它就可以。遗憾的是，Java程序的源代码很容易被别人偷看。只要有一个反编译器，任何人都可以分析别人的代码。Java的灵活性使得源代码很容易被窃取，但与此同时，它也使通过加密保护代码变得相对容易，我们唯一需要了解的就是Java的ClassLoader对象。当然，在加密过程中，有关Java Cryptography Extension（JCE）的知识也是必不可少的。\n\n有几种技术可以“模糊”Java类文件，使得反编译器处理类文件的效果大打折扣。然而，修改反编译器使之能够处理这些经过模糊处理的类文件并不是什么难事，所以不能简单地依赖模糊技术来保证源代码的安全。\n\n我们可以用流行的加密工具加密应用，比如PGP（Pretty Good Privacy）或GPG（GNU Privacy Guard）。这时，最终用户在运行应用之前必须先进行解密。但解密之后，最终用户就有了一份不加密的类文件，这和事先不进行加密没有什么差别。\n\nJava运行时装入字节码的机制隐含地意味着可以对字节码进行修改。JVM每次装入类文件时都需要一个称为ClassLoader的对象，这个对象负责把新的类装入正在运行的JVM。JVM给ClassLoader一个包含了待装入类（比如java.lang.Object）名字的字符串，然后由ClassLoader负责找到类文件，装入原始数据，并把它转换成一个Class对象。\n\n我们可以通过定制ClassLoader，在类文件执行之前修改它。这种技术的应用非常广泛――在这里，它的用途是在类文件装入之时进行解密，因此可以看成是一种即时解密器。由于解密后的字节码文件永远不会保存到文件系统，所以窃密者很难得到解密后的代码。\n\n由于把原始字节码转换成Class对象的过程完全由系统负责，所以创建定制ClassLoader对象其实并不困难，只需先获得原始数据，接着就可以进行包含解密在内的任何转换。\n\nJava 2在一定程度上简化了定制ClassLoader的构建。在Java 2中，loadClass的缺省实现仍旧负责处理所有必需的步骤，但为了顾及各种定制的类装入过程，它还调用一个新的findClass方法。\n\n这为我们编写定制的ClassLoader提供了一条捷径，减少了麻烦：只需覆盖findClass，而不是覆盖loadClass。这种方法避免了重复所有装入器必需执行的公共步骤，因为这一切由loadClass负责。\n\n不过，本文的定制ClassLoader并不使用这种方法。原因很简单。如果由默认的ClassLoader先寻找经过加密的类文件，它可以找到；但由于类文件已经加密，所以它不会认可这个类文件，装入过程将失败。因此，我们必须自己实现loadClass，稍微增加了一些工作量。\n\n--------------------------------------\n\n<!-- more  -->\n\n# 定制类装入器\n每一个运行着的JVM已经拥有一个ClassLoader。这个默认的ClassLoader根据CLASSPATH环境变量的值，在本地文件系统中寻找合适的字节码文件。\n\n应用定制ClassLoader要求对这个过程有较为深入的认识。我们首先必须创建一个定制ClassLoader类的实例，然后显式地要求它装入另外一个类。这就强制JVM把该类以及所有它所需要的类关联到定制的ClassLoader。Listing 1显示了如何用定制ClassLoader装入类文件。\n【Listing 1：利用定制的ClassLoader装入类文件】\n```\n  /** 首先创建一个ClassLoader对象 **/\n  ClassLoader myClassLoader = new myClassLoader();\n  /** 利用定制ClassLoader对象装入类文件 **/\n  /** 并把它转换成Class对象 **/\n  Class myClass = myClassLoader.loadClass( \"mypackage.MyClass\" );\n  /** 最后，创建该类的一个实例 **/\n  Object newInstance = myClass.newInstance();\n  /** 注意，MyClass所需要的所有其他类，都将通过 **\n  /** 定制的ClassLoader自动装入 **/\n```\n如前所述，定制ClassLoader只需先获取类文件的数据，然后把字节码传递给运行时系统，由后者完成余下的任务。\n\nClassLoader有几个重要的方法。创建定制的ClassLoader时，我们只需覆盖其中的一个，即loadClass，提供获取原始类文件数据的代码。这个方法有两个参数：类的名字，以及一个表示JVM是否要求解析类名字的标记（即是否同时装入有依赖关系的类）。如果这个标记是true，我们只需在返回JVM之前调用resolveClass。\n\n【Listing 2：ClassLoader.loadClass()的一个简单实现】\n```\n      public Class loadClass( String name, boolean resolve )\n      throws ClassNotFoundException {\n    try {\n      /** 我们要创建的Class对象 **/\n       Class clasz = null;\n      /** 必需的步骤1：如果类已经在系统缓冲之中，**/\n      /** 我们不必再次装入它 **/\n      clasz = findLoadedClass( name );\n      if (clasz != null)\n        return clasz;\n      /** 下面是定制部分 **/\n      byte classData[] = /* 通过某种方法获取字节码数据 */;\n      if (classData != null) {\n        /** 成功读取字节码数据，现在把它转换成一个Class对象 **/\n        clasz = defineClass( name, classData, 0, classData.length );\n      }\n      /** 必需的步骤2：如果上面没有成功，**/\n      /** 我们尝试用默认的ClassLoader装入它 **/\n      if (clasz == null)\n        clasz = findSystemClass( name );\n      /** 必需的步骤3：如有必要，则装入相关的类 **/\n      if (resolve && clasz != null)\n        resolveClass( clasz );\n      /** 把类返回给调用者 **/\n      return clasz;\n    } catch( IOException ie ) {\n      throw new ClassNotFoundException( ie.toString() );\n    } catch( GeneralSecurityException gse ) {\n      throw new ClassNotFoundException( gse.toString() );\n    }\n  }\n```\nListing 2显示了一个简单的loadClass实现。代码中的大部分对所有ClassLoader对象来说都一样，但有一小部分（已通过注释标记）是特有的。在处理过程中，ClassLoader对象要用到其他几个辅助方法：\n\n- findLoadedClass：用来进行检查，以便确认被请求的类当前还不存在。loadClass方法应该首先调用它。\n- defineClass：获得原始类文件字节码数据之后，调用defineClass把它转换成一个Class对象。任何loadClass实现都必须调用这个方法。\n- findSystemClass：提供默认ClassLoader的支持。如果用来寻找类的定制方法不能找到指定的类（或者有意地不用定制方法），则可以调用该方法尝试默认的装入方式。这是很有用的，特别是从普通的JAR文件装入标准Java类时。\n- resolveClass：当JVM想要装入的不仅包括指定的类，而且还包括该类引用的所有其他类时，它会把loadClass的resolve参数设置成true。这时，我们必须在返回刚刚装入的Class对象给调用者之前调用resolveClass。\n\n-------------------\n# 加密、解密\nJava加密扩展即Java Cryptography Extension，简称JCE。它是Sun的加密服务软件，包含了加密和密匙生成功能。JCE是JCA（Java Cryptography Architecture）的一种扩展。\n\nJCE没有规定具体的加密算法，但提供了一个框架，加密算法的具体实现可以作为服务提供者加入。除了JCE框架之外，JCE软件包还包含了SunJCE服务提供者，其中包括许多有用的加密算法，比如DES（Data Encryption Standard）和Blowfish。\n\n为简单计，在本文中我们将用DES算法加密和解密字节码。下面是用JCE加密和解密数据必须遵循的基本步骤：\n- 步骤1：生成一个安全密匙。在加密或解密任何数据之前需要有一个密匙。密匙是随同被加密的应用一起发布的一小段数据，Listing 3显示了如何生成一个密匙。\n\n```\n  /* DES算法要求有一个可信任的随机数源 */\n  SecureRandom sr = new SecureRandom();\n  /* 为我们选择的DES算法生成一个KeyGenerator对象 */\n  KeyGenerator kg = KeyGenerator.getInstance( \"DES\" );\n  kg.init( sr );\n  /*生成密匙 */\n  SecretKey key = kg.generateKey();\n  /* 获取密匙数据 */\n  byte rawKeyData[] = key.getEncoded();\n  /* 接下来就可以用密匙进行加密或解密，或者把它保存\n     为文件供以后使用 */\n  doSomething( rawKeyData );\n```\n\n- 步骤2：加密数据。得到密匙之后，接下来就可以用它加密数据。除了解密的ClassLoader之外，一般还要有一个加密待发布应用的独立程序（见Listing 4）。\n\n```\n    /* DES算法要求有一个可信任的随机数源 */\n    SecureRandom sr = new SecureRandom();\n    byte rawKeyData[] = /* 用某种方法获得密匙数据 */;\n    /* 从原始密匙数据创建DESKeySpec对象 */\n    DESKeySpec dks = new DESKeySpec( rawKeyData );\n    /* 创建一个密匙工厂，然后用它把DESKeySpec转换成 */\n    /* 一个SecretKey对象 */\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( \"DES\" );\n    SecretKey key = keyFactory.generateSecret( dks );\n    /* Cipher对象实际完成加密操作 */\n    Cipher cipher = Cipher.getInstance( \"DES\" );\n    /* 用密匙初始化Cipher对象 */\n    cipher.init( Cipher.ENCRYPT_MODE, key, sr );\n    /* 现在，获取数据并加密 */\n    byte data[] = /* 用某种方法获取数据 */\n    /* 正式执行加密操作 */\n    byte encryptedData[] = cipher.doFinal( data );\n    /* 进一步处理加密后的数据 */\n    doSomething( encryptedData );\n```\n\n- 步骤3：解密数据。运行经过加密的应用时，ClassLoader分析并解密类文件。操作步骤如Listing 5所示。\n\n```\n    /* DES算法要求有一个可信任的随机数源 */\n    SecureRandom sr = new SecureRandom();\n    byte rawKeyData[] = /* 用某种方法获取原始密匙数据 */;\n    /* 从原始密匙数据创建一个DESKeySpec对象 */\n    DESKeySpec dks = new DESKeySpec( rawKeyData );\n    /* 创建一个密匙工厂，然后用它把DESKeySpec对象转换成 */\n    /* 一个SecretKey对象 */\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( \"DES\" );\n    SecretKey key = keyFactory.generateSecret( dks );\n    /* Cipher对象实际完成解密操作 */\n    Cipher cipher = Cipher.getInstance( \"DES\" );\n    /* 用密匙初始化Cipher对象 */\n    cipher.init( Cipher.DECRYPT_MODE, key, sr );\n    /* 现在，获取数据并解密 */\n    byte encryptedData[] = /* 获得经过加密的数据 */\n    /* 正式执行解密操作 */\n    byte decryptedData[] = cipher.doFinal( encryptedData );\n    /* 进一步处理解密后的数据 */\n    doSomething( decryptedData );\n```\n\n------------------------------------\n\n# 应用实例\n前面介绍了如何加密和解密数据。要部署一个经过加密的应用，步骤如下：\n- 1、步骤1：创建应用。我们的例子包含一个App主类，两个辅助类（分别称为Foo和Bar）。这个应用没有什么实际功用，但只要我们能够加密这个应用，加密其他应用也就不在话下。\n- 2、步骤2：生成一个安全密匙。在命令行，利用GenerateKey工具（参见GenerateKey.java）把密匙写入一个文件：\n     % java GenerateKey key.data\n- 3、步骤3：加密应用。在命令行，利用EncryptClasses工具（参见EncryptClasses.java）加密应用的类：\n     % java EncryptClasses key.data App.class Foo.class Bar.class\n该命令把每一个.class文件替换成它们各自的加密版本\n\n步骤4：运行经过加密的应用。用户通过一个DecryptStart程序运行经过加密的应用。DecryptStart程序如Listing 6所示。\n\n```\nimport java.io.*;\nimport java.security.*;\nimport java.lang.reflect.*;\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\npublic class DecryptStart extends ClassLoader\n{\n  /* 这些对象在构造函数中设置， */\n  /* 以后loadClass()方法将利用它们解密类 */\n  private SecretKey key;\n  private Cipher cipher;\n  /* 构造函数：设置解密所需要的对象 */\n  public DecryptStart( SecretKey key ) throws GeneralSecurityException,\n      IOException {\n    this.key = key;\n    String algorithm = \"DES\";\n    SecureRandom sr = new SecureRandom();\n    System.err.println( \"[DecryptStart: creating cipher]\" );\n    cipher = Cipher.getInstance( algorithm );\n    cipher.init( Cipher.DECRYPT_MODE, key, sr );\n  }\n  /* main过程：我们要在这里读入密匙，创建DecryptStart的 */\n  /* 实例，它就是我们的定制ClassLoader。 */\n  /* 设置好ClassLoader以后，我们用它装入应用实例， */\n  /* 最后，我们通过Java Reflection API调用应用实例的main方法 */\n  static public void main( String args[] ) throws Exception {\n    String keyFilename = args[0];\n    String appName = args[1];\n     /* 这些是传递给应用本身的参数 */\n    String realArgs[] = new String[args.length-2];\n    System.arraycopy( args, 2, realArgs, 0, args.length-2 );\n    /* 读取密匙 */\n    System.err.println( \"[DecryptStart: reading key]\" );\n    byte rawKey[] = Util.readFile( keyFilename );\n    DESKeySpec dks = new DESKeySpec( rawKey );\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( \"DES\" );\n    SecretKey key = keyFactory.generateSecret( dks );\n    /* 创建解密的ClassLoader */\n    DecryptStart dr = new DecryptStart( key );\n    /* 创建应用主类的一个实例 */\n    /* 通过ClassLoader装入它 */\n    System.err.println( \"[DecryptStart: loading \"+appName+\"]\" );\n    Class clasz = dr.loadClass( appName );\n    /* 最后，通过Reflection API调用应用实例 */\n    /* 的main()方法 */\n    /* 获取一个对main()的引用 */\n    String proto[] = new String[1];\n    Class mainArgs[] = { (new String[1]).getClass() };\n    Method main = clasz.getMethod( \"main\", mainArgs );\n    /* 创建一个包含main()方法参数的数组 */\n    Object argsArray[] = { realArgs };\n    System.err.println( \"[DecryptStart: running \"+appName+\".main()]\" );\n    /* 调用main() */\n    main.invoke( null, argsArray );\n  }\n  public Class loadClass( String name, boolean resolve )\n      throws ClassNotFoundException {\n    try {\n      /* 我们要创建的Class对象 */\n      Class clasz = null;\n      /* 必需的步骤1：如果类已经在系统缓冲之中 */\n      /* 我们不必再次装入它 */\n      clasz = findLoadedClass( name );\n      if (clasz != null)\n        return clasz;\n      /* 下面是定制部分 */\n      try {\n        /* 读取经过加密的类文件 */\n        byte classData[] = Util.readFile( name+\".class\" );\n        if (classData != null) {\n          /* 解密... */\n          byte decryptedClassData[] = cipher.doFinal( classData );\n          /* 再把它转换成一个类 */\n          clasz = defineClass( name, decryptedClassData,\n            0, decryptedClassData.length );\n          System.err.println( \"[DecryptStart: decrypting class \"+name+\"]\" );\n        }\n      } catch( FileNotFoundException fnfe ) {\n      }\n      /* 必需的步骤2：如果上面没有成功 */\n      /* 我们尝试用默认的ClassLoader装入它 */\n      if (clasz == null)\n        clasz = findSystemClass( name );\n      /* 必需的步骤3：如有必要，则装入相关的类 */\n      if (resolve && clasz != null)\n        resolveClass( clasz );\n      /* 把类返回给调用者 */\n      return clasz;\n    } catch( IOException ie ) {\n      throw new ClassNotFoundException( ie.toString()\n);\n    } catch( GeneralSecurityException gse ) {\n      throw new ClassNotFoundException( gse.toString()\n);\n    }\n  }\n}\n```\n\n对于未经加密的应用，正常执行方式如下：\n\n```\n% java App arg0 arg1 arg2\n```\n\n对于经过加密的应用，则相应的运行方式为：\n\n```\n% java DecryptStart key.data App arg0 arg1 arg2\n```\n\nDecryptStart有两个目的。一个DecryptStart的实例就是一个实施即时解密操作的定制ClassLoader；同时，DecryptStart还包含一个main过程，它创建解密器实例并用它装入和运行应用。示例应用App的代码包含在App.java、Foo.java和Bar.java内。Util.java是一个文件I/O工具，本文示例多处用到了它。完整的代码请从本文最后下载。\n\n---------------------------\n\n# 注意事项\n\n我们看到，要在不修改源代码的情况下加密一个Java应用是很容易的。不过，世上没有完全安全的系统。本文的加密方式提供了一定程度的源代码保护，但对某些攻击来说它是脆弱的。\n虽然应用本身经过了加密，但启动程序DecryptStart没有加密。攻击者可以反编译启动程序并修改它，把解密后的类文件保存到磁盘。降低这种风险的办法之一是对启动程序进行高质量的模糊处理。或者，启动程序也可以采用直接编译成机器语言的代码，使得启动程序具有传统执行文件格式的安全性。\n另外还要记住的是，大多数JVM本身并不安全。狡猾的黑客可能会修改JVM，从ClassLoader之外获取解密后的代码并保存到磁盘，从而绕过本文的加密技术。Java没有为此提供真正有效的补救措施。\n不过应该指出的是，所有这些可能的攻击都有一个前提，这就是攻击者可以得到密匙。如果没有密匙，应用的安全性就完全取决于加密算法的安全性。虽然这种保护代码的方法称不上十全十美，但它仍不失为一种保护知识产权和敏感用户数据的有效方案。\n\n-------------------------\n\n# 参考资料\n>http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\nhttp://m635674608.iteye.com/blog/1844777（强推荐）\nhttp://joshuasabrina.iteye.com/blog/1798245（强推荐）\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\nhttp://www.cnblogs.com/NullPointException/p/5054082.html\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\n","slug":"jca/00","published":1,"date":"2016-11-18T15:31:52.241Z","updated":"2016-11-20T15:55:17.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp7zw0005c88qqm246yu2","content":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"为什么要加密？\"><a href=\"#为什么要加密？\" class=\"headerlink\" title=\"为什么要加密？\"></a>为什么要加密？</h1><p>对于传统的C或C++之类的语言来说，要在Web上保护源代码是很容易的，只要不发布它就可以。遗憾的是，Java程序的源代码很容易被别人偷看。只要有一个反编译器，任何人都可以分析别人的代码。Java的灵活性使得源代码很容易被窃取，但与此同时，它也使通过加密保护代码变得相对容易，我们唯一需要了解的就是Java的ClassLoader对象。当然，在加密过程中，有关Java Cryptography Extension（JCE）的知识也是必不可少的。</p>\n<p>有几种技术可以“模糊”Java类文件，使得反编译器处理类文件的效果大打折扣。然而，修改反编译器使之能够处理这些经过模糊处理的类文件并不是什么难事，所以不能简单地依赖模糊技术来保证源代码的安全。</p>\n<p>我们可以用流行的加密工具加密应用，比如PGP（Pretty Good Privacy）或GPG（GNU Privacy Guard）。这时，最终用户在运行应用之前必须先进行解密。但解密之后，最终用户就有了一份不加密的类文件，这和事先不进行加密没有什么差别。</p>\n<p>Java运行时装入字节码的机制隐含地意味着可以对字节码进行修改。JVM每次装入类文件时都需要一个称为ClassLoader的对象，这个对象负责把新的类装入正在运行的JVM。JVM给ClassLoader一个包含了待装入类（比如java.lang.Object）名字的字符串，然后由ClassLoader负责找到类文件，装入原始数据，并把它转换成一个Class对象。</p>\n<p>我们可以通过定制ClassLoader，在类文件执行之前修改它。这种技术的应用非常广泛――在这里，它的用途是在类文件装入之时进行解密，因此可以看成是一种即时解密器。由于解密后的字节码文件永远不会保存到文件系统，所以窃密者很难得到解密后的代码。</p>\n<p>由于把原始字节码转换成Class对象的过程完全由系统负责，所以创建定制ClassLoader对象其实并不困难，只需先获得原始数据，接着就可以进行包含解密在内的任何转换。</p>\n<p>Java 2在一定程度上简化了定制ClassLoader的构建。在Java 2中，loadClass的缺省实现仍旧负责处理所有必需的步骤，但为了顾及各种定制的类装入过程，它还调用一个新的findClass方法。</p>\n<p>这为我们编写定制的ClassLoader提供了一条捷径，减少了麻烦：只需覆盖findClass，而不是覆盖loadClass。这种方法避免了重复所有装入器必需执行的公共步骤，因为这一切由loadClass负责。</p>\n<p>不过，本文的定制ClassLoader并不使用这种方法。原因很简单。如果由默认的ClassLoader先寻找经过加密的类文件，它可以找到；但由于类文件已经加密，所以它不会认可这个类文件，装入过程将失败。因此，我们必须自己实现loadClass，稍微增加了一些工作量。</p>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"定制类装入器\"><a href=\"#定制类装入器\" class=\"headerlink\" title=\"定制类装入器\"></a>定制类装入器</h1><p>每一个运行着的JVM已经拥有一个ClassLoader。这个默认的ClassLoader根据CLASSPATH环境变量的值，在本地文件系统中寻找合适的字节码文件。</p>\n<p>应用定制ClassLoader要求对这个过程有较为深入的认识。我们首先必须创建一个定制ClassLoader类的实例，然后显式地要求它装入另外一个类。这就强制JVM把该类以及所有它所需要的类关联到定制的ClassLoader。Listing 1显示了如何用定制ClassLoader装入类文件。<br>【Listing 1：利用定制的ClassLoader装入类文件】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** 首先创建一个ClassLoader对象 **/</div><div class=\"line\">ClassLoader myClassLoader = new myClassLoader();</div><div class=\"line\">/** 利用定制ClassLoader对象装入类文件 **/</div><div class=\"line\">/** 并把它转换成Class对象 **/</div><div class=\"line\">Class myClass = myClassLoader.loadClass( &quot;mypackage.MyClass&quot; );</div><div class=\"line\">/** 最后，创建该类的一个实例 **/</div><div class=\"line\">Object newInstance = myClass.newInstance();</div><div class=\"line\">/** 注意，MyClass所需要的所有其他类，都将通过 **</div><div class=\"line\">/** 定制的ClassLoader自动装入 **/</div></pre></td></tr></table></figure></p>\n<p>如前所述，定制ClassLoader只需先获取类文件的数据，然后把字节码传递给运行时系统，由后者完成余下的任务。</p>\n<p>ClassLoader有几个重要的方法。创建定制的ClassLoader时，我们只需覆盖其中的一个，即loadClass，提供获取原始类文件数据的代码。这个方法有两个参数：类的名字，以及一个表示JVM是否要求解析类名字的标记（即是否同时装入有依赖关系的类）。如果这个标记是true，我们只需在返回JVM之前调用resolveClass。</p>\n<p>【Listing 2：ClassLoader.loadClass()的一个简单实现】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">    public Class loadClass( String name, boolean resolve )</div><div class=\"line\">    throws ClassNotFoundException &#123;</div><div class=\"line\">  try &#123;</div><div class=\"line\">    /** 我们要创建的Class对象 **/</div><div class=\"line\">     Class clasz = null;</div><div class=\"line\">    /** 必需的步骤1：如果类已经在系统缓冲之中，**/</div><div class=\"line\">    /** 我们不必再次装入它 **/</div><div class=\"line\">    clasz = findLoadedClass( name );</div><div class=\"line\">    if (clasz != null)</div><div class=\"line\">      return clasz;</div><div class=\"line\">    /** 下面是定制部分 **/</div><div class=\"line\">    byte classData[] = /* 通过某种方法获取字节码数据 */;</div><div class=\"line\">    if (classData != null) &#123;</div><div class=\"line\">      /** 成功读取字节码数据，现在把它转换成一个Class对象 **/</div><div class=\"line\">      clasz = defineClass( name, classData, 0, classData.length );</div><div class=\"line\">    &#125;</div><div class=\"line\">    /** 必需的步骤2：如果上面没有成功，**/</div><div class=\"line\">    /** 我们尝试用默认的ClassLoader装入它 **/</div><div class=\"line\">    if (clasz == null)</div><div class=\"line\">      clasz = findSystemClass( name );</div><div class=\"line\">    /** 必需的步骤3：如有必要，则装入相关的类 **/</div><div class=\"line\">    if (resolve &amp;&amp; clasz != null)</div><div class=\"line\">      resolveClass( clasz );</div><div class=\"line\">    /** 把类返回给调用者 **/</div><div class=\"line\">    return clasz;</div><div class=\"line\">  &#125; catch( IOException ie ) &#123;</div><div class=\"line\">    throw new ClassNotFoundException( ie.toString() );</div><div class=\"line\">  &#125; catch( GeneralSecurityException gse ) &#123;</div><div class=\"line\">    throw new ClassNotFoundException( gse.toString() );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Listing 2显示了一个简单的loadClass实现。代码中的大部分对所有ClassLoader对象来说都一样，但有一小部分（已通过注释标记）是特有的。在处理过程中，ClassLoader对象要用到其他几个辅助方法：</p>\n<ul>\n<li>findLoadedClass：用来进行检查，以便确认被请求的类当前还不存在。loadClass方法应该首先调用它。</li>\n<li>defineClass：获得原始类文件字节码数据之后，调用defineClass把它转换成一个Class对象。任何loadClass实现都必须调用这个方法。</li>\n<li>findSystemClass：提供默认ClassLoader的支持。如果用来寻找类的定制方法不能找到指定的类（或者有意地不用定制方法），则可以调用该方法尝试默认的装入方式。这是很有用的，特别是从普通的JAR文件装入标准Java类时。</li>\n<li>resolveClass：当JVM想要装入的不仅包括指定的类，而且还包括该类引用的所有其他类时，它会把loadClass的resolve参数设置成true。这时，我们必须在返回刚刚装入的Class对象给调用者之前调用resolveClass。</li>\n</ul>\n<hr>\n<h1 id=\"加密、解密\"><a href=\"#加密、解密\" class=\"headerlink\" title=\"加密、解密\"></a>加密、解密</h1><p>Java加密扩展即Java Cryptography Extension，简称JCE。它是Sun的加密服务软件，包含了加密和密匙生成功能。JCE是JCA（Java Cryptography Architecture）的一种扩展。</p>\n<p>JCE没有规定具体的加密算法，但提供了一个框架，加密算法的具体实现可以作为服务提供者加入。除了JCE框架之外，JCE软件包还包含了SunJCE服务提供者，其中包括许多有用的加密算法，比如DES（Data Encryption Standard）和Blowfish。</p>\n<p>为简单计，在本文中我们将用DES算法加密和解密字节码。下面是用JCE加密和解密数据必须遵循的基本步骤：</p>\n<ul>\n<li>步骤1：生成一个安全密匙。在加密或解密任何数据之前需要有一个密匙。密匙是随同被加密的应用一起发布的一小段数据，Listing 3显示了如何生成一个密匙。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* DES算法要求有一个可信任的随机数源 */</div><div class=\"line\">SecureRandom sr = new SecureRandom();</div><div class=\"line\">/* 为我们选择的DES算法生成一个KeyGenerator对象 */</div><div class=\"line\">KeyGenerator kg = KeyGenerator.getInstance( &quot;DES&quot; );</div><div class=\"line\">kg.init( sr );</div><div class=\"line\">/*生成密匙 */</div><div class=\"line\">SecretKey key = kg.generateKey();</div><div class=\"line\">/* 获取密匙数据 */</div><div class=\"line\">byte rawKeyData[] = key.getEncoded();</div><div class=\"line\">/* 接下来就可以用密匙进行加密或解密，或者把它保存</div><div class=\"line\">   为文件供以后使用 */</div><div class=\"line\">doSomething( rawKeyData );</div></pre></td></tr></table></figure>\n<ul>\n<li>步骤2：加密数据。得到密匙之后，接下来就可以用它加密数据。除了解密的ClassLoader之外，一般还要有一个加密待发布应用的独立程序（见Listing 4）。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* DES算法要求有一个可信任的随机数源 */</div><div class=\"line\">SecureRandom sr = new SecureRandom();</div><div class=\"line\">byte rawKeyData[] = /* 用某种方法获得密匙数据 */;</div><div class=\"line\">/* 从原始密匙数据创建DESKeySpec对象 */</div><div class=\"line\">DESKeySpec dks = new DESKeySpec( rawKeyData );</div><div class=\"line\">/* 创建一个密匙工厂，然后用它把DESKeySpec转换成 */</div><div class=\"line\">/* 一个SecretKey对象 */</div><div class=\"line\">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class=\"line\">SecretKey key = keyFactory.generateSecret( dks );</div><div class=\"line\">/* Cipher对象实际完成加密操作 */</div><div class=\"line\">Cipher cipher = Cipher.getInstance( &quot;DES&quot; );</div><div class=\"line\">/* 用密匙初始化Cipher对象 */</div><div class=\"line\">cipher.init( Cipher.ENCRYPT_MODE, key, sr );</div><div class=\"line\">/* 现在，获取数据并加密 */</div><div class=\"line\">byte data[] = /* 用某种方法获取数据 */</div><div class=\"line\">/* 正式执行加密操作 */</div><div class=\"line\">byte encryptedData[] = cipher.doFinal( data );</div><div class=\"line\">/* 进一步处理加密后的数据 */</div><div class=\"line\">doSomething( encryptedData );</div></pre></td></tr></table></figure>\n<ul>\n<li>步骤3：解密数据。运行经过加密的应用时，ClassLoader分析并解密类文件。操作步骤如Listing 5所示。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* DES算法要求有一个可信任的随机数源 */</div><div class=\"line\">SecureRandom sr = new SecureRandom();</div><div class=\"line\">byte rawKeyData[] = /* 用某种方法获取原始密匙数据 */;</div><div class=\"line\">/* 从原始密匙数据创建一个DESKeySpec对象 */</div><div class=\"line\">DESKeySpec dks = new DESKeySpec( rawKeyData );</div><div class=\"line\">/* 创建一个密匙工厂，然后用它把DESKeySpec对象转换成 */</div><div class=\"line\">/* 一个SecretKey对象 */</div><div class=\"line\">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class=\"line\">SecretKey key = keyFactory.generateSecret( dks );</div><div class=\"line\">/* Cipher对象实际完成解密操作 */</div><div class=\"line\">Cipher cipher = Cipher.getInstance( &quot;DES&quot; );</div><div class=\"line\">/* 用密匙初始化Cipher对象 */</div><div class=\"line\">cipher.init( Cipher.DECRYPT_MODE, key, sr );</div><div class=\"line\">/* 现在，获取数据并解密 */</div><div class=\"line\">byte encryptedData[] = /* 获得经过加密的数据 */</div><div class=\"line\">/* 正式执行解密操作 */</div><div class=\"line\">byte decryptedData[] = cipher.doFinal( encryptedData );</div><div class=\"line\">/* 进一步处理解密后的数据 */</div><div class=\"line\">doSomething( decryptedData );</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h1><p>前面介绍了如何加密和解密数据。要部署一个经过加密的应用，步骤如下：</p>\n<ul>\n<li>1、步骤1：创建应用。我们的例子包含一个App主类，两个辅助类（分别称为Foo和Bar）。这个应用没有什么实际功用，但只要我们能够加密这个应用，加密其他应用也就不在话下。</li>\n<li>2、步骤2：生成一个安全密匙。在命令行，利用GenerateKey工具（参见GenerateKey.java）把密匙写入一个文件：<br>   % java GenerateKey key.data</li>\n<li>3、步骤3：加密应用。在命令行，利用EncryptClasses工具（参见EncryptClasses.java）加密应用的类：<br>   % java EncryptClasses key.data App.class Foo.class Bar.class<br>该命令把每一个.class文件替换成它们各自的加密版本</li>\n</ul>\n<p>步骤4：运行经过加密的应用。用户通过一个DecryptStart程序运行经过加密的应用。DecryptStart程序如Listing 6所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.*;</div><div class=\"line\">import java.security.*;</div><div class=\"line\">import java.lang.reflect.*;</div><div class=\"line\">import javax.crypto.*;</div><div class=\"line\">import javax.crypto.spec.*;</div><div class=\"line\">public class DecryptStart extends ClassLoader</div><div class=\"line\">&#123;</div><div class=\"line\">  /* 这些对象在构造函数中设置， */</div><div class=\"line\">  /* 以后loadClass()方法将利用它们解密类 */</div><div class=\"line\">  private SecretKey key;</div><div class=\"line\">  private Cipher cipher;</div><div class=\"line\">  /* 构造函数：设置解密所需要的对象 */</div><div class=\"line\">  public DecryptStart( SecretKey key ) throws GeneralSecurityException,</div><div class=\"line\">      IOException &#123;</div><div class=\"line\">    this.key = key;</div><div class=\"line\">    String algorithm = &quot;DES&quot;;</div><div class=\"line\">    SecureRandom sr = new SecureRandom();</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: creating cipher]&quot; );</div><div class=\"line\">    cipher = Cipher.getInstance( algorithm );</div><div class=\"line\">    cipher.init( Cipher.DECRYPT_MODE, key, sr );</div><div class=\"line\">  &#125;</div><div class=\"line\">  /* main过程：我们要在这里读入密匙，创建DecryptStart的 */</div><div class=\"line\">  /* 实例，它就是我们的定制ClassLoader。 */</div><div class=\"line\">  /* 设置好ClassLoader以后，我们用它装入应用实例， */</div><div class=\"line\">  /* 最后，我们通过Java Reflection API调用应用实例的main方法 */</div><div class=\"line\">  static public void main( String args[] ) throws Exception &#123;</div><div class=\"line\">    String keyFilename = args[0];</div><div class=\"line\">    String appName = args[1];</div><div class=\"line\">     /* 这些是传递给应用本身的参数 */</div><div class=\"line\">    String realArgs[] = new String[args.length-2];</div><div class=\"line\">    System.arraycopy( args, 2, realArgs, 0, args.length-2 );</div><div class=\"line\">    /* 读取密匙 */</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: reading key]&quot; );</div><div class=\"line\">    byte rawKey[] = Util.readFile( keyFilename );</div><div class=\"line\">    DESKeySpec dks = new DESKeySpec( rawKey );</div><div class=\"line\">    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class=\"line\">    SecretKey key = keyFactory.generateSecret( dks );</div><div class=\"line\">    /* 创建解密的ClassLoader */</div><div class=\"line\">    DecryptStart dr = new DecryptStart( key );</div><div class=\"line\">    /* 创建应用主类的一个实例 */</div><div class=\"line\">    /* 通过ClassLoader装入它 */</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: loading &quot;+appName+&quot;]&quot; );</div><div class=\"line\">    Class clasz = dr.loadClass( appName );</div><div class=\"line\">    /* 最后，通过Reflection API调用应用实例 */</div><div class=\"line\">    /* 的main()方法 */</div><div class=\"line\">    /* 获取一个对main()的引用 */</div><div class=\"line\">    String proto[] = new String[1];</div><div class=\"line\">    Class mainArgs[] = &#123; (new String[1]).getClass() &#125;;</div><div class=\"line\">    Method main = clasz.getMethod( &quot;main&quot;, mainArgs );</div><div class=\"line\">    /* 创建一个包含main()方法参数的数组 */</div><div class=\"line\">    Object argsArray[] = &#123; realArgs &#125;;</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: running &quot;+appName+&quot;.main()]&quot; );</div><div class=\"line\">    /* 调用main() */</div><div class=\"line\">    main.invoke( null, argsArray );</div><div class=\"line\">  &#125;</div><div class=\"line\">  public Class loadClass( String name, boolean resolve )</div><div class=\"line\">      throws ClassNotFoundException &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">      /* 我们要创建的Class对象 */</div><div class=\"line\">      Class clasz = null;</div><div class=\"line\">      /* 必需的步骤1：如果类已经在系统缓冲之中 */</div><div class=\"line\">      /* 我们不必再次装入它 */</div><div class=\"line\">      clasz = findLoadedClass( name );</div><div class=\"line\">      if (clasz != null)</div><div class=\"line\">        return clasz;</div><div class=\"line\">      /* 下面是定制部分 */</div><div class=\"line\">      try &#123;</div><div class=\"line\">        /* 读取经过加密的类文件 */</div><div class=\"line\">        byte classData[] = Util.readFile( name+&quot;.class&quot; );</div><div class=\"line\">        if (classData != null) &#123;</div><div class=\"line\">          /* 解密... */</div><div class=\"line\">          byte decryptedClassData[] = cipher.doFinal( classData );</div><div class=\"line\">          /* 再把它转换成一个类 */</div><div class=\"line\">          clasz = defineClass( name, decryptedClassData,</div><div class=\"line\">            0, decryptedClassData.length );</div><div class=\"line\">          System.err.println( &quot;[DecryptStart: decrypting class &quot;+name+&quot;]&quot; );</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; catch( FileNotFoundException fnfe ) &#123;</div><div class=\"line\">      &#125;</div><div class=\"line\">      /* 必需的步骤2：如果上面没有成功 */</div><div class=\"line\">      /* 我们尝试用默认的ClassLoader装入它 */</div><div class=\"line\">      if (clasz == null)</div><div class=\"line\">        clasz = findSystemClass( name );</div><div class=\"line\">      /* 必需的步骤3：如有必要，则装入相关的类 */</div><div class=\"line\">      if (resolve &amp;&amp; clasz != null)</div><div class=\"line\">        resolveClass( clasz );</div><div class=\"line\">      /* 把类返回给调用者 */</div><div class=\"line\">      return clasz;</div><div class=\"line\">    &#125; catch( IOException ie ) &#123;</div><div class=\"line\">      throw new ClassNotFoundException( ie.toString()</div><div class=\"line\">);</div><div class=\"line\">    &#125; catch( GeneralSecurityException gse ) &#123;</div><div class=\"line\">      throw new ClassNotFoundException( gse.toString()</div><div class=\"line\">);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于未经加密的应用，正常执行方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">% java App arg0 arg1 arg2</div></pre></td></tr></table></figure>\n<p>对于经过加密的应用，则相应的运行方式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">% java DecryptStart key.data App arg0 arg1 arg2</div></pre></td></tr></table></figure>\n<p>DecryptStart有两个目的。一个DecryptStart的实例就是一个实施即时解密操作的定制ClassLoader；同时，DecryptStart还包含一个main过程，它创建解密器实例并用它装入和运行应用。示例应用App的代码包含在App.java、Foo.java和Bar.java内。Util.java是一个文件I/O工具，本文示例多处用到了它。完整的代码请从本文最后下载。</p>\n<hr>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><p>我们看到，要在不修改源代码的情况下加密一个Java应用是很容易的。不过，世上没有完全安全的系统。本文的加密方式提供了一定程度的源代码保护，但对某些攻击来说它是脆弱的。<br>虽然应用本身经过了加密，但启动程序DecryptStart没有加密。攻击者可以反编译启动程序并修改它，把解密后的类文件保存到磁盘。降低这种风险的办法之一是对启动程序进行高质量的模糊处理。或者，启动程序也可以采用直接编译成机器语言的代码，使得启动程序具有传统执行文件格式的安全性。<br>另外还要记住的是，大多数JVM本身并不安全。狡猾的黑客可能会修改JVM，从ClassLoader之外获取解密后的代码并保存到磁盘，从而绕过本文的加密技术。Java没有为此提供真正有效的补救措施。<br>不过应该指出的是，所有这些可能的攻击都有一个前提，这就是攻击者可以得到密匙。如果没有密匙，应用的安全性就完全取决于加密算法的安全性。虽然这种保护代码的方法称不上十全十美，但它仍不失为一种保护知识产权和敏感用户数据的有效方案。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><blockquote>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href=\"http://m635674608.iteye.com/blog/1844777（强推荐）\" target=\"_blank\" rel=\"external\">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href=\"http://joshuasabrina.iteye.com/blog/1798245（强推荐）\" target=\"_blank\" rel=\"external\">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href=\"http://www.cnblogs.com/NullPointException/p/5054082.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"为什么要加密？\"><a href=\"#为什么要加密？\" class=\"headerlink\" title=\"为什么要加密？\"></a>为什么要加密？</h1><p>对于传统的C或C++之类的语言来说，要在Web上保护源代码是很容易的，只要不发布它就可以。遗憾的是，Java程序的源代码很容易被别人偷看。只要有一个反编译器，任何人都可以分析别人的代码。Java的灵活性使得源代码很容易被窃取，但与此同时，它也使通过加密保护代码变得相对容易，我们唯一需要了解的就是Java的ClassLoader对象。当然，在加密过程中，有关Java Cryptography Extension（JCE）的知识也是必不可少的。</p>\n<p>有几种技术可以“模糊”Java类文件，使得反编译器处理类文件的效果大打折扣。然而，修改反编译器使之能够处理这些经过模糊处理的类文件并不是什么难事，所以不能简单地依赖模糊技术来保证源代码的安全。</p>\n<p>我们可以用流行的加密工具加密应用，比如PGP（Pretty Good Privacy）或GPG（GNU Privacy Guard）。这时，最终用户在运行应用之前必须先进行解密。但解密之后，最终用户就有了一份不加密的类文件，这和事先不进行加密没有什么差别。</p>\n<p>Java运行时装入字节码的机制隐含地意味着可以对字节码进行修改。JVM每次装入类文件时都需要一个称为ClassLoader的对象，这个对象负责把新的类装入正在运行的JVM。JVM给ClassLoader一个包含了待装入类（比如java.lang.Object）名字的字符串，然后由ClassLoader负责找到类文件，装入原始数据，并把它转换成一个Class对象。</p>\n<p>我们可以通过定制ClassLoader，在类文件执行之前修改它。这种技术的应用非常广泛――在这里，它的用途是在类文件装入之时进行解密，因此可以看成是一种即时解密器。由于解密后的字节码文件永远不会保存到文件系统，所以窃密者很难得到解密后的代码。</p>\n<p>由于把原始字节码转换成Class对象的过程完全由系统负责，所以创建定制ClassLoader对象其实并不困难，只需先获得原始数据，接着就可以进行包含解密在内的任何转换。</p>\n<p>Java 2在一定程度上简化了定制ClassLoader的构建。在Java 2中，loadClass的缺省实现仍旧负责处理所有必需的步骤，但为了顾及各种定制的类装入过程，它还调用一个新的findClass方法。</p>\n<p>这为我们编写定制的ClassLoader提供了一条捷径，减少了麻烦：只需覆盖findClass，而不是覆盖loadClass。这种方法避免了重复所有装入器必需执行的公共步骤，因为这一切由loadClass负责。</p>\n<p>不过，本文的定制ClassLoader并不使用这种方法。原因很简单。如果由默认的ClassLoader先寻找经过加密的类文件，它可以找到；但由于类文件已经加密，所以它不会认可这个类文件，装入过程将失败。因此，我们必须自己实现loadClass，稍微增加了一些工作量。</p>\n<hr>","more":"<h1 id=\"定制类装入器\"><a href=\"#定制类装入器\" class=\"headerlink\" title=\"定制类装入器\"></a>定制类装入器</h1><p>每一个运行着的JVM已经拥有一个ClassLoader。这个默认的ClassLoader根据CLASSPATH环境变量的值，在本地文件系统中寻找合适的字节码文件。</p>\n<p>应用定制ClassLoader要求对这个过程有较为深入的认识。我们首先必须创建一个定制ClassLoader类的实例，然后显式地要求它装入另外一个类。这就强制JVM把该类以及所有它所需要的类关联到定制的ClassLoader。Listing 1显示了如何用定制ClassLoader装入类文件。<br>【Listing 1：利用定制的ClassLoader装入类文件】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** 首先创建一个ClassLoader对象 **/</div><div class=\"line\">ClassLoader myClassLoader = new myClassLoader();</div><div class=\"line\">/** 利用定制ClassLoader对象装入类文件 **/</div><div class=\"line\">/** 并把它转换成Class对象 **/</div><div class=\"line\">Class myClass = myClassLoader.loadClass( &quot;mypackage.MyClass&quot; );</div><div class=\"line\">/** 最后，创建该类的一个实例 **/</div><div class=\"line\">Object newInstance = myClass.newInstance();</div><div class=\"line\">/** 注意，MyClass所需要的所有其他类，都将通过 **</div><div class=\"line\">/** 定制的ClassLoader自动装入 **/</div></pre></td></tr></table></figure></p>\n<p>如前所述，定制ClassLoader只需先获取类文件的数据，然后把字节码传递给运行时系统，由后者完成余下的任务。</p>\n<p>ClassLoader有几个重要的方法。创建定制的ClassLoader时，我们只需覆盖其中的一个，即loadClass，提供获取原始类文件数据的代码。这个方法有两个参数：类的名字，以及一个表示JVM是否要求解析类名字的标记（即是否同时装入有依赖关系的类）。如果这个标记是true，我们只需在返回JVM之前调用resolveClass。</p>\n<p>【Listing 2：ClassLoader.loadClass()的一个简单实现】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">    public Class loadClass( String name, boolean resolve )</div><div class=\"line\">    throws ClassNotFoundException &#123;</div><div class=\"line\">  try &#123;</div><div class=\"line\">    /** 我们要创建的Class对象 **/</div><div class=\"line\">     Class clasz = null;</div><div class=\"line\">    /** 必需的步骤1：如果类已经在系统缓冲之中，**/</div><div class=\"line\">    /** 我们不必再次装入它 **/</div><div class=\"line\">    clasz = findLoadedClass( name );</div><div class=\"line\">    if (clasz != null)</div><div class=\"line\">      return clasz;</div><div class=\"line\">    /** 下面是定制部分 **/</div><div class=\"line\">    byte classData[] = /* 通过某种方法获取字节码数据 */;</div><div class=\"line\">    if (classData != null) &#123;</div><div class=\"line\">      /** 成功读取字节码数据，现在把它转换成一个Class对象 **/</div><div class=\"line\">      clasz = defineClass( name, classData, 0, classData.length );</div><div class=\"line\">    &#125;</div><div class=\"line\">    /** 必需的步骤2：如果上面没有成功，**/</div><div class=\"line\">    /** 我们尝试用默认的ClassLoader装入它 **/</div><div class=\"line\">    if (clasz == null)</div><div class=\"line\">      clasz = findSystemClass( name );</div><div class=\"line\">    /** 必需的步骤3：如有必要，则装入相关的类 **/</div><div class=\"line\">    if (resolve &amp;&amp; clasz != null)</div><div class=\"line\">      resolveClass( clasz );</div><div class=\"line\">    /** 把类返回给调用者 **/</div><div class=\"line\">    return clasz;</div><div class=\"line\">  &#125; catch( IOException ie ) &#123;</div><div class=\"line\">    throw new ClassNotFoundException( ie.toString() );</div><div class=\"line\">  &#125; catch( GeneralSecurityException gse ) &#123;</div><div class=\"line\">    throw new ClassNotFoundException( gse.toString() );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Listing 2显示了一个简单的loadClass实现。代码中的大部分对所有ClassLoader对象来说都一样，但有一小部分（已通过注释标记）是特有的。在处理过程中，ClassLoader对象要用到其他几个辅助方法：</p>\n<ul>\n<li>findLoadedClass：用来进行检查，以便确认被请求的类当前还不存在。loadClass方法应该首先调用它。</li>\n<li>defineClass：获得原始类文件字节码数据之后，调用defineClass把它转换成一个Class对象。任何loadClass实现都必须调用这个方法。</li>\n<li>findSystemClass：提供默认ClassLoader的支持。如果用来寻找类的定制方法不能找到指定的类（或者有意地不用定制方法），则可以调用该方法尝试默认的装入方式。这是很有用的，特别是从普通的JAR文件装入标准Java类时。</li>\n<li>resolveClass：当JVM想要装入的不仅包括指定的类，而且还包括该类引用的所有其他类时，它会把loadClass的resolve参数设置成true。这时，我们必须在返回刚刚装入的Class对象给调用者之前调用resolveClass。</li>\n</ul>\n<hr>\n<h1 id=\"加密、解密\"><a href=\"#加密、解密\" class=\"headerlink\" title=\"加密、解密\"></a>加密、解密</h1><p>Java加密扩展即Java Cryptography Extension，简称JCE。它是Sun的加密服务软件，包含了加密和密匙生成功能。JCE是JCA（Java Cryptography Architecture）的一种扩展。</p>\n<p>JCE没有规定具体的加密算法，但提供了一个框架，加密算法的具体实现可以作为服务提供者加入。除了JCE框架之外，JCE软件包还包含了SunJCE服务提供者，其中包括许多有用的加密算法，比如DES（Data Encryption Standard）和Blowfish。</p>\n<p>为简单计，在本文中我们将用DES算法加密和解密字节码。下面是用JCE加密和解密数据必须遵循的基本步骤：</p>\n<ul>\n<li>步骤1：生成一个安全密匙。在加密或解密任何数据之前需要有一个密匙。密匙是随同被加密的应用一起发布的一小段数据，Listing 3显示了如何生成一个密匙。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* DES算法要求有一个可信任的随机数源 */</div><div class=\"line\">SecureRandom sr = new SecureRandom();</div><div class=\"line\">/* 为我们选择的DES算法生成一个KeyGenerator对象 */</div><div class=\"line\">KeyGenerator kg = KeyGenerator.getInstance( &quot;DES&quot; );</div><div class=\"line\">kg.init( sr );</div><div class=\"line\">/*生成密匙 */</div><div class=\"line\">SecretKey key = kg.generateKey();</div><div class=\"line\">/* 获取密匙数据 */</div><div class=\"line\">byte rawKeyData[] = key.getEncoded();</div><div class=\"line\">/* 接下来就可以用密匙进行加密或解密，或者把它保存</div><div class=\"line\">   为文件供以后使用 */</div><div class=\"line\">doSomething( rawKeyData );</div></pre></td></tr></table></figure>\n<ul>\n<li>步骤2：加密数据。得到密匙之后，接下来就可以用它加密数据。除了解密的ClassLoader之外，一般还要有一个加密待发布应用的独立程序（见Listing 4）。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* DES算法要求有一个可信任的随机数源 */</div><div class=\"line\">SecureRandom sr = new SecureRandom();</div><div class=\"line\">byte rawKeyData[] = /* 用某种方法获得密匙数据 */;</div><div class=\"line\">/* 从原始密匙数据创建DESKeySpec对象 */</div><div class=\"line\">DESKeySpec dks = new DESKeySpec( rawKeyData );</div><div class=\"line\">/* 创建一个密匙工厂，然后用它把DESKeySpec转换成 */</div><div class=\"line\">/* 一个SecretKey对象 */</div><div class=\"line\">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class=\"line\">SecretKey key = keyFactory.generateSecret( dks );</div><div class=\"line\">/* Cipher对象实际完成加密操作 */</div><div class=\"line\">Cipher cipher = Cipher.getInstance( &quot;DES&quot; );</div><div class=\"line\">/* 用密匙初始化Cipher对象 */</div><div class=\"line\">cipher.init( Cipher.ENCRYPT_MODE, key, sr );</div><div class=\"line\">/* 现在，获取数据并加密 */</div><div class=\"line\">byte data[] = /* 用某种方法获取数据 */</div><div class=\"line\">/* 正式执行加密操作 */</div><div class=\"line\">byte encryptedData[] = cipher.doFinal( data );</div><div class=\"line\">/* 进一步处理加密后的数据 */</div><div class=\"line\">doSomething( encryptedData );</div></pre></td></tr></table></figure>\n<ul>\n<li>步骤3：解密数据。运行经过加密的应用时，ClassLoader分析并解密类文件。操作步骤如Listing 5所示。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* DES算法要求有一个可信任的随机数源 */</div><div class=\"line\">SecureRandom sr = new SecureRandom();</div><div class=\"line\">byte rawKeyData[] = /* 用某种方法获取原始密匙数据 */;</div><div class=\"line\">/* 从原始密匙数据创建一个DESKeySpec对象 */</div><div class=\"line\">DESKeySpec dks = new DESKeySpec( rawKeyData );</div><div class=\"line\">/* 创建一个密匙工厂，然后用它把DESKeySpec对象转换成 */</div><div class=\"line\">/* 一个SecretKey对象 */</div><div class=\"line\">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class=\"line\">SecretKey key = keyFactory.generateSecret( dks );</div><div class=\"line\">/* Cipher对象实际完成解密操作 */</div><div class=\"line\">Cipher cipher = Cipher.getInstance( &quot;DES&quot; );</div><div class=\"line\">/* 用密匙初始化Cipher对象 */</div><div class=\"line\">cipher.init( Cipher.DECRYPT_MODE, key, sr );</div><div class=\"line\">/* 现在，获取数据并解密 */</div><div class=\"line\">byte encryptedData[] = /* 获得经过加密的数据 */</div><div class=\"line\">/* 正式执行解密操作 */</div><div class=\"line\">byte decryptedData[] = cipher.doFinal( encryptedData );</div><div class=\"line\">/* 进一步处理解密后的数据 */</div><div class=\"line\">doSomething( decryptedData );</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h1><p>前面介绍了如何加密和解密数据。要部署一个经过加密的应用，步骤如下：</p>\n<ul>\n<li>1、步骤1：创建应用。我们的例子包含一个App主类，两个辅助类（分别称为Foo和Bar）。这个应用没有什么实际功用，但只要我们能够加密这个应用，加密其他应用也就不在话下。</li>\n<li>2、步骤2：生成一个安全密匙。在命令行，利用GenerateKey工具（参见GenerateKey.java）把密匙写入一个文件：<br>   % java GenerateKey key.data</li>\n<li>3、步骤3：加密应用。在命令行，利用EncryptClasses工具（参见EncryptClasses.java）加密应用的类：<br>   % java EncryptClasses key.data App.class Foo.class Bar.class<br>该命令把每一个.class文件替换成它们各自的加密版本</li>\n</ul>\n<p>步骤4：运行经过加密的应用。用户通过一个DecryptStart程序运行经过加密的应用。DecryptStart程序如Listing 6所示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.*;</div><div class=\"line\">import java.security.*;</div><div class=\"line\">import java.lang.reflect.*;</div><div class=\"line\">import javax.crypto.*;</div><div class=\"line\">import javax.crypto.spec.*;</div><div class=\"line\">public class DecryptStart extends ClassLoader</div><div class=\"line\">&#123;</div><div class=\"line\">  /* 这些对象在构造函数中设置， */</div><div class=\"line\">  /* 以后loadClass()方法将利用它们解密类 */</div><div class=\"line\">  private SecretKey key;</div><div class=\"line\">  private Cipher cipher;</div><div class=\"line\">  /* 构造函数：设置解密所需要的对象 */</div><div class=\"line\">  public DecryptStart( SecretKey key ) throws GeneralSecurityException,</div><div class=\"line\">      IOException &#123;</div><div class=\"line\">    this.key = key;</div><div class=\"line\">    String algorithm = &quot;DES&quot;;</div><div class=\"line\">    SecureRandom sr = new SecureRandom();</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: creating cipher]&quot; );</div><div class=\"line\">    cipher = Cipher.getInstance( algorithm );</div><div class=\"line\">    cipher.init( Cipher.DECRYPT_MODE, key, sr );</div><div class=\"line\">  &#125;</div><div class=\"line\">  /* main过程：我们要在这里读入密匙，创建DecryptStart的 */</div><div class=\"line\">  /* 实例，它就是我们的定制ClassLoader。 */</div><div class=\"line\">  /* 设置好ClassLoader以后，我们用它装入应用实例， */</div><div class=\"line\">  /* 最后，我们通过Java Reflection API调用应用实例的main方法 */</div><div class=\"line\">  static public void main( String args[] ) throws Exception &#123;</div><div class=\"line\">    String keyFilename = args[0];</div><div class=\"line\">    String appName = args[1];</div><div class=\"line\">     /* 这些是传递给应用本身的参数 */</div><div class=\"line\">    String realArgs[] = new String[args.length-2];</div><div class=\"line\">    System.arraycopy( args, 2, realArgs, 0, args.length-2 );</div><div class=\"line\">    /* 读取密匙 */</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: reading key]&quot; );</div><div class=\"line\">    byte rawKey[] = Util.readFile( keyFilename );</div><div class=\"line\">    DESKeySpec dks = new DESKeySpec( rawKey );</div><div class=\"line\">    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class=\"line\">    SecretKey key = keyFactory.generateSecret( dks );</div><div class=\"line\">    /* 创建解密的ClassLoader */</div><div class=\"line\">    DecryptStart dr = new DecryptStart( key );</div><div class=\"line\">    /* 创建应用主类的一个实例 */</div><div class=\"line\">    /* 通过ClassLoader装入它 */</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: loading &quot;+appName+&quot;]&quot; );</div><div class=\"line\">    Class clasz = dr.loadClass( appName );</div><div class=\"line\">    /* 最后，通过Reflection API调用应用实例 */</div><div class=\"line\">    /* 的main()方法 */</div><div class=\"line\">    /* 获取一个对main()的引用 */</div><div class=\"line\">    String proto[] = new String[1];</div><div class=\"line\">    Class mainArgs[] = &#123; (new String[1]).getClass() &#125;;</div><div class=\"line\">    Method main = clasz.getMethod( &quot;main&quot;, mainArgs );</div><div class=\"line\">    /* 创建一个包含main()方法参数的数组 */</div><div class=\"line\">    Object argsArray[] = &#123; realArgs &#125;;</div><div class=\"line\">    System.err.println( &quot;[DecryptStart: running &quot;+appName+&quot;.main()]&quot; );</div><div class=\"line\">    /* 调用main() */</div><div class=\"line\">    main.invoke( null, argsArray );</div><div class=\"line\">  &#125;</div><div class=\"line\">  public Class loadClass( String name, boolean resolve )</div><div class=\"line\">      throws ClassNotFoundException &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">      /* 我们要创建的Class对象 */</div><div class=\"line\">      Class clasz = null;</div><div class=\"line\">      /* 必需的步骤1：如果类已经在系统缓冲之中 */</div><div class=\"line\">      /* 我们不必再次装入它 */</div><div class=\"line\">      clasz = findLoadedClass( name );</div><div class=\"line\">      if (clasz != null)</div><div class=\"line\">        return clasz;</div><div class=\"line\">      /* 下面是定制部分 */</div><div class=\"line\">      try &#123;</div><div class=\"line\">        /* 读取经过加密的类文件 */</div><div class=\"line\">        byte classData[] = Util.readFile( name+&quot;.class&quot; );</div><div class=\"line\">        if (classData != null) &#123;</div><div class=\"line\">          /* 解密... */</div><div class=\"line\">          byte decryptedClassData[] = cipher.doFinal( classData );</div><div class=\"line\">          /* 再把它转换成一个类 */</div><div class=\"line\">          clasz = defineClass( name, decryptedClassData,</div><div class=\"line\">            0, decryptedClassData.length );</div><div class=\"line\">          System.err.println( &quot;[DecryptStart: decrypting class &quot;+name+&quot;]&quot; );</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; catch( FileNotFoundException fnfe ) &#123;</div><div class=\"line\">      &#125;</div><div class=\"line\">      /* 必需的步骤2：如果上面没有成功 */</div><div class=\"line\">      /* 我们尝试用默认的ClassLoader装入它 */</div><div class=\"line\">      if (clasz == null)</div><div class=\"line\">        clasz = findSystemClass( name );</div><div class=\"line\">      /* 必需的步骤3：如有必要，则装入相关的类 */</div><div class=\"line\">      if (resolve &amp;&amp; clasz != null)</div><div class=\"line\">        resolveClass( clasz );</div><div class=\"line\">      /* 把类返回给调用者 */</div><div class=\"line\">      return clasz;</div><div class=\"line\">    &#125; catch( IOException ie ) &#123;</div><div class=\"line\">      throw new ClassNotFoundException( ie.toString()</div><div class=\"line\">);</div><div class=\"line\">    &#125; catch( GeneralSecurityException gse ) &#123;</div><div class=\"line\">      throw new ClassNotFoundException( gse.toString()</div><div class=\"line\">);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于未经加密的应用，正常执行方式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">% java App arg0 arg1 arg2</div></pre></td></tr></table></figure>\n<p>对于经过加密的应用，则相应的运行方式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">% java DecryptStart key.data App arg0 arg1 arg2</div></pre></td></tr></table></figure>\n<p>DecryptStart有两个目的。一个DecryptStart的实例就是一个实施即时解密操作的定制ClassLoader；同时，DecryptStart还包含一个main过程，它创建解密器实例并用它装入和运行应用。示例应用App的代码包含在App.java、Foo.java和Bar.java内。Util.java是一个文件I/O工具，本文示例多处用到了它。完整的代码请从本文最后下载。</p>\n<hr>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><p>我们看到，要在不修改源代码的情况下加密一个Java应用是很容易的。不过，世上没有完全安全的系统。本文的加密方式提供了一定程度的源代码保护，但对某些攻击来说它是脆弱的。<br>虽然应用本身经过了加密，但启动程序DecryptStart没有加密。攻击者可以反编译启动程序并修改它，把解密后的类文件保存到磁盘。降低这种风险的办法之一是对启动程序进行高质量的模糊处理。或者，启动程序也可以采用直接编译成机器语言的代码，使得启动程序具有传统执行文件格式的安全性。<br>另外还要记住的是，大多数JVM本身并不安全。狡猾的黑客可能会修改JVM，从ClassLoader之外获取解密后的代码并保存到磁盘，从而绕过本文的加密技术。Java没有为此提供真正有效的补救措施。<br>不过应该指出的是，所有这些可能的攻击都有一个前提，这就是攻击者可以得到密匙。如果没有密匙，应用的安全性就完全取决于加密算法的安全性。虽然这种保护代码的方法称不上十全十美，但它仍不失为一种保护知识产权和敏感用户数据的有效方案。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><blockquote>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href=\"http://m635674608.iteye.com/blog/1844777（强推荐）\">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href=\"http://joshuasabrina.iteye.com/blog/1798245（强推荐）\">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href=\"http://www.cnblogs.com/NullPointException/p/5054082.html\">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>\n</blockquote>"},{"title":"JUC源码阅读之 Thread","_content":"\n>导读：\n","source":"_posts/juc/01.md","raw":"---\ntitle: JUC源码阅读之 Thread\ncategories:\n- 源码阅读\n- JUC源码\ntags:\n- jdk源码系列\n- java\n- juc\n---\n\n>导读：\n","slug":"juc/01","published":1,"date":"2016-11-27T14:21:34.737Z","updated":"2016-11-27T14:23:28.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp80a0008c88qo6ik3rgr","content":"<blockquote>\n<p>导读：</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>导读：</p>\n</blockquote>\n"},{"title":"翻译spring-cloud的一篇文章","_content":"\n>导读：\n- 翻译：灯塔\n- 校对：\n- 翻译原文：http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\n- 翻译目的：玩玩这个https://github.com/kbastani/spring-cloud-microservice-example\n注意：企业实现微服务化时，需要考虑团队的水平，技术成本，和当前的业务需求，业务体量，微服务实施也并不好玩，分布式会比单体架构难度大的多。\n-------------------\n\n# 什么是Spring-Cloud?\nSpring-Cloud 是一套工具集合，用来提供解决方案构建分布式系统时遇到的一些常见的模式。如果你熟悉构建用spring 来构建应用，那么spring-cloud常用来构建它的一些常见的构建块。\n在Spring-Cloud 提供的解决方案中，你可能要找一些工具来解决一下的一下问题：\n- Configuration management（配置管理）\n- Service discovery(服务发现)\n- Circuit breakers（断融器）\n- Distributed sessions（分布式回会话）\n\n# Spring Boot\n这里大部分spring-cloud 的工作都是基于spring-boot 的基础上的。\n下面谈论的一些东西对于spring-boot来说都是一些新的东西，下面的项目名称已经很大的程度上已经说明了他是干什么的。\n你能在Spring框架和spring的生态圈中的到所有的最好的东西，调到完美，以最小的配置，为生产环境做好随时发布的准备。\n\n# 服务发现和集成路由\n在为服务的架构中，每一个服务都有单独的作用。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个**配置服务**，和**发现服务**。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个**配置服务**，和**发现服务**。\n\n![微服务](http://i.imgur.com/Dc6xjwd.png \"title\")\n\n上面的图片展示了一个4-microservice设置，连线表示了它们之间的依赖。\n\n**配置服务**，在顶部，用黄色表示，同时，它也被其他的微服务依赖。**发现服务**在低部，标记为蓝色，同时也被其他微服务依赖。\n\n绿色，是代表2个微服务，这是这个例子的应用的一部分，我在这篇博客中叫他为 **movies** 和 **recommendations**\n\n# 配置服务（Configuration Service）\n\n这个**配置服务**，在所有的微服务架构中都是一个非常重要的概念，基于[twelve-factor](http://12factor.net/config)应用方法,微服务的配置应该是在环境中得到存储，而不是仅仅在项目中。\n\n**配置服务** 是必须的，因为他为所有的微服务处理了配置，通过简单的点对点服务调用，来检索这些配置，这是多功能的优点。\n\n让我们来总结一下，这个多个部署环境。如果我们有一个临时环境和生产环境，在这些环境中，我们的配置是不一样的，一个配置服务可能有一个专用的Git存储库的配置环境。没有其他的环境中能够访问这个配置\n它是只提供给服务在该环境运行时的配置。\n\n![微服务](http://i.imgur.com/J7FazPH.png \"title\")\n\n当**配置服务**开启后，它会根据配置路劲找到配置文件，去服务那些需要配置服务的微服务程序。每一个微服务都可以拥有他们的自己的配置，来处理一些正在运行的特殊环境。\n在这个过程中，配置外部化和集中在一个地方，可以版本控制和修改，而无需重启服务改变配置。\n\n可以利用spring-cloud 的节点管理，你可以让配置环境的改变，只是需要简单的刷新 **发现服务**， 这样就能强制让全部的服务消费者发现这个新的服务。\n\n# 发现服务(Discovery Service)\n**发现服务**是微服务架构中的另外一个重要的组件。**发现服务**处理维护服务实例的列表可工作在一个集群中。在应用程序中，service - to - service调用是使用客户端来做。\n\n以这个程序为例子，我使用[Spring Cloud Feign](https://github.com/spring-cloud-samples/feign-eureka), 客户端是依赖于一个RESTful的API 的微服务,它起源于[Netflix OSS](https://github.com/spring-cloud-samples/feign-eureka)项目. \n```\n@FeignClient(\"movie\")\npublic interface MovieClient {\n    @RequestMapping(method = RequestMethod.GET, value = \"/movies\")\n    PagedResources findAll();\n\n    @RequestMapping(method = RequestMethod.GET, value = \"/movies/{id}\")\n    Movie findById(@RequestParam(\"id\") String id);\n\n    @RequestMapping(method = RequestMethod.POST, value = \"/movies\",\n      produces = MediaType.APPLICATION_JSON_VALUE)\n    void createMovie(@RequestBody Movie movie);\n}\n```\n\n在上面的例子，我创建了一个 模拟客户端，用RESTful 方法来暴露**movie service**。使用 **@FeignClient**注解，我首先指定我想为**movice micro service**来创建一个客户端的API。\n接着，我指定一个我想要消费的微服务映射，我是通过在方法上声明URL的样式来做接口映射的（spring mvc类似），作为一个REST Ful 的路由映射。\n\n创建一个模拟的客户端 是相当的简单，我们只是需要在我将要创建的客户端中，知道需要那个服务的ID。这个服务的URL将会在运行期间被自动配置，因为在集群中的每一个微服务在开启时它的ID都会被注册到**发现服务**中。\n\n这同样适用于其他服务的microservice架构。我只是需要知道这个服务的Id,我就能和他做交互，这里的所有事情都会spring自动化了。\n\n# API Gateway\n\nAPI gateway 是另外一个重要的微服务，如果我们需要去创建一个微服务集群管理他们自己的领域实体类。绿色的六边形下面是数据驱动的服务，用来管理他们自己的领域模型实体类，以及他们自己的数据库。通过添加一个**API gateway service**， 我们可以创建一个API 路由的代理，并暴露给绿色的服务。\n![Alt text](http://i.imgur.com/JVSGMfY.png \"Optional title\")\n\n现在，我们假设 **recommendations service** 和 ** movie service ** 都暴露他们自己的REST API 给领域实体管理。这个API gateway 将会通过**discovery service**发现他们的服务和他们依赖注入其他服务的代理路由方法。\n通过这个方式，** recommendation** 和 ** movice ** 服务，将会有一个完整的定义; 本地的路由映射是可以利用所有暴露 REST API 的微服务。API Gateway 将会重新定义转发路由请求服务实例，用自己的路由开始通过HTTP来发出请求。\n\n# 例子项目\n我把全部的例子项目都放到了一起，演示了一个从头到尾的 使用Spring cloud 构建本地云平台的实践架构。\n\n概念：\n- 使用Docker整合测试用例\n- 混合持久化\n- 微服务架构\n- 服务发现\n- API gateway\n\n# Docker\n\n每一个服务都是使用Docker来构建和发布的。从头到尾整合测试用例，能在一台开发机器中，使用Docker compose来做。\n\n# 混合持久化（Polyglot Persistence）\n这个示例项目的核心概念之一是在实践中如何走近通晓多种语言的持久性。Microservices项目中使用自己的数据库,同时结合数据从其他服务通过休息或一个消息总线。例如，你能有一个微服务，服务下面的数据库：\n- Neo4j (graph)\n- MongoDB (document)\n- MySQL (relational)\n\n# 微服务架构（Microservice architecture）\n这个例子项目，演示了如何使用微服务构建一个新的应用程序，而不是monolith-first策略。\n由于在项目中的每一个微服务都是父项目的一个模块，这样对开发者来说是非常友好的，可以在本地中运行和开发每一个微服务。添加一个新的微服务也是非常的容易，当**发现程序**可以自动发现新的在集群中运行的微服务。\n\n# 服务发现（Service discovery）\n这个项目包含2种类型的服务发现，其中一个是使用了Netflix Eureka, 以及另外一个是使用了Hashicorp 的 Consul。发现有多个服务提供了机会来使用一个(Consul)作为集群的DNS提供商，其他如（Eureka）作为一个API gateway 的代理。\n\n# API gateway\n每一个微服务，将会和Eureka 的检索整个集群API路由线，使用此策略中的每个microservice集群可以通过一个API网关负载均衡和暴露API gateway。每个服务将自动发现和API请求路由到服务拥有路线。这个代理技术是十分有帮助的在开发用户接口的时候，作为完整的API可用的平台是通过自己的主机作为代理。\n\n# Docker 例子\n这个Demo项目是使用Docker来构建一个内容镜像都是每个microservices Maven构建的一部分。我们可以轻松地安排整个microservice集群在自己的机器上使用Docker组件。\n\n# 开始这个项目\n\n你可以访问Github仓库，来获取这个例子的项目。\n```\nhttps://github.com/kbastani/spring-cloud-microservice-example\n```\n拷贝这个项目，和下载这个仓库到你的机器。在下载后，你将会需要，使用Maven 和Docker去编译和构建一个本地的镜像。\n\n# 下载Docker\n\n首先，下载一个Docker,如果你并没有安装。接着，按着这个介绍，[这里](https://docs.docker.com/compose/install/), 去获取Docker , 以及在你的开发机器上运行。\n\n你将同时需要安装 [Docker Compose](https://docs.docker.com/compose/),这个安装指导，你可以在这里找到，[这里](https://docs.docker.com/compose/install/). 如果你已经安装了Mac OSX 和 boot2docker,确认你的boot2docker-vm的条件，是否最小为5G内存，下面这个命令将允许你这样设置：\n```\n$ boot2docker init --memory=5000\n```\n\n# 要求\n运行这个Demo,需要一下这些条件：\n- Maven3+\n- Java 8+\n- Docker \n- Docker Compose\n\n# 构建这个项目\n去构建这个项目，可以开启终端在项目的根目录下运行这个命令，\n```\n$ mvn clean install\n```\n在执行，这个命令，他会帮忙下载项目工程所需要的依赖包，以及编译每一个项目工程。每一个服务都会被构建，以及Maven的Docker 插件将会自动构建每一个镜像到本地的Docker 注册。在你运行  **mvn clean install**命令去构建的时候 Docker 必须先被运行，并且是可用的。\n如果构建成功，你会看到这样的信息输出：\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] spring-cloud-microservice-example-parent .......... SUCCESS [  0.268 s]\n[INFO] users-microservice ................................ SUCCESS [ 11.929 s]\n[INFO] discovery-microservice ............................ SUCCESS [  5.640 s]\n[INFO] api-gateway-microservice .......................... SUCCESS [  5.156 s]\n[INFO] recommendation-microservice ....................... SUCCESS [  7.732 s]\n[INFO] config-microservice ............................... SUCCESS [  4.711 s]\n[INFO] hystrix-dashboard ................................. SUCCESS [  4.251 s]\n[INFO] consul-microservice ............................... SUCCESS [  6.763 s]\n[INFO] movie-microservice ................................ SUCCESS [  8.359 s]\n[INFO] movies-ui ......................................... SUCCESS [ 15.833 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n```\n\n# 开始使用Docker Compose 来组成集群\n\n现在每一个镜像，已经被构建成功，我们可以使用Docker Compose 来 组成自旋向上的集群，我们将会包含一个预配置的yaml文件。\n在项目的根目录，进入 **spring-cloud-mircroservice-example/docker**目录\n现在，可以开启一个微服务集群，执行下面的命令：\n```\n$ docker-compose up\n```\n\n如果所有的事情都配置正确，每一个镜像都能更早的在我们自己的Docker VM 容器内，被运行构建，网络会自动服务发现. 你将会看见，一大串的log 输出，为每一个服务的开启的顺序。\n这可能需要几分钟来编译整个程序，这个时间是由你的运行机器来决定的。\n\n一旦启动顺序完成，你可以导航到 Eureka主机和看到哪些服务注册与发现服务。\n\n复制和粘贴下面的命令行到你的终端，Docker能接近使用 **$DOCKER_HOST** 环境变量：\n```\n$ open $(echo \\\"$(echo $DOCKER_HOST)\\\"|\n            \\sed 's/tcp:\\/\\//http:\\/\\//g'|\n            \\sed 's/[0-9]\\{4,\\}/8761/g'|\n            \\sed 's/\\\"//g')\n```\n\n如果 Eureka 能正确开启，浏览器窗口将会开启一个本地的Eureka 服务的面板，就如下面所展示的那样：\n![Eureka](http://i.imgur.com/buABI3h.png)\n\n我们能看见，每一个服务实例的运行和运行状态。我们能接近这个数据驱动服务。这个演示程序的就是 **movie** 服务。\n```\n$ open $(echo \\\"$(echo $DOCKER_HOST)/movie\\\"|\n            \\sed 's/tcp:\\/\\//http:\\/\\//g'|\n            \\sed 's/[0-9]\\{4,\\}/10000/g'|\n            \\sed 's/\\\"//g')\n```\n\n这个命令，这个命令将导航到API网关的端点和代理**movie**服务的REST API端点。这些REST APIs 已经使用 **HATEOAS**来被配置了，它支持所有的服务的自动发现功能嵌入链接。\n```\n{\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie\"\n    },\n    \"resume\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/resume\"\n    },\n    \"pause\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/pause\"\n    },\n    \"restart\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/restart\"\n    },\n    \"metrics\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/metrics\"\n    },\n    \"env\" : [ {\n      \"href\" : \"http://192.168.59.103:10000/movie/env\"\n    }, {\n      \"href\" : \"http://192.168.59.103:10000/movie/env\"\n    } ],\n    \"archaius\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/archaius\"\n    },\n    \"beans\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/beans\"\n    },\n    \"configprops\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/configprops\"\n    },\n    \"trace\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/trace\"\n    },\n    \"info\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/info\"\n    },\n    \"health\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/health\"\n    },\n    \"hystrix.stream\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/hystrix.stream\"\n    },\n    \"routes\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/routes\"\n    },\n    \"dump\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/dump\"\n    },\n    \"refresh\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/refresh\"\n    },\n    \"mappings\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/mappings\"\n    },\n    \"autoconfig\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/autoconfig\"\n    }\n  }\n}\n```\n\n# 结论\n本系列的第一部分关于构建mircroservice架构与Spring-cloud 和 Docker。在本文章中，我们已经涉及到了以下的一些概念：\n- 服务发现（Service Discovery）\n- 扩展配置（Externalized Configuration）\n- API Gateway\n- 用Docker实现服务编排（Service Orchestration with Docker Compose）\n\n在下一篇博文中,我们将复习如何构建应用程序前端与后端服务集成。我们也可以关注于这个例子[polyglot persistence](http://martinfowler.com/bliki/PolyglotPersistence.html)使用Mysql(关系型数据库) 和 Neo4j(图形数据库)。\n\n# 特别感谢\n我将会特别感谢[Josh Long](http://www.twitter.com/starbuxman) 和 spring 的 rest 团队给与我这个机会去学习spring 框架提供的第一手精美的东西。没有杰克的指导我将无法用语言表达的所有神奇的spring生态系统所能提供的东西。\n\n这里有很多开源工具，想Spring Cloud。 这将是件不可能的事情，如果没有这些人的思想领导，如：[Adrian Cockcroft (Netflix OSS)](https://twitter.com/adrianco), [Martin Fowler (everything)](https://twitter.com/martinfowler)\n[Sam Newman (O'Reilly's Building Microservices)](https://twitter.com/samnewman), [ Ian Robinson (consumer driven contracts)](https://twitter.com/iansrobinson)\n[ Chris Richardson (Cloud Foundry) ](https://twitter.com/crichardson) 以及很多其他参与到开源工作的人们。\n\n> 参考：\nhttp://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\n\n\n\n\n\n\n","source":"_posts/translation/1.md","raw":"---------\ntitle: 翻译spring-cloud的一篇文章\ncategories:\n- 翻译\ntags:\n- 翻译\n- spring-cloud\n- 微服务\n---------\n\n>导读：\n- 翻译：灯塔\n- 校对：\n- 翻译原文：http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\n- 翻译目的：玩玩这个https://github.com/kbastani/spring-cloud-microservice-example\n注意：企业实现微服务化时，需要考虑团队的水平，技术成本，和当前的业务需求，业务体量，微服务实施也并不好玩，分布式会比单体架构难度大的多。\n-------------------\n\n# 什么是Spring-Cloud?\nSpring-Cloud 是一套工具集合，用来提供解决方案构建分布式系统时遇到的一些常见的模式。如果你熟悉构建用spring 来构建应用，那么spring-cloud常用来构建它的一些常见的构建块。\n在Spring-Cloud 提供的解决方案中，你可能要找一些工具来解决一下的一下问题：\n- Configuration management（配置管理）\n- Service discovery(服务发现)\n- Circuit breakers（断融器）\n- Distributed sessions（分布式回会话）\n\n# Spring Boot\n这里大部分spring-cloud 的工作都是基于spring-boot 的基础上的。\n下面谈论的一些东西对于spring-boot来说都是一些新的东西，下面的项目名称已经很大的程度上已经说明了他是干什么的。\n你能在Spring框架和spring的生态圈中的到所有的最好的东西，调到完美，以最小的配置，为生产环境做好随时发布的准备。\n\n# 服务发现和集成路由\n在为服务的架构中，每一个服务都有单独的作用。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个**配置服务**，和**发现服务**。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个**配置服务**，和**发现服务**。\n\n![微服务](http://i.imgur.com/Dc6xjwd.png \"title\")\n\n上面的图片展示了一个4-microservice设置，连线表示了它们之间的依赖。\n\n**配置服务**，在顶部，用黄色表示，同时，它也被其他的微服务依赖。**发现服务**在低部，标记为蓝色，同时也被其他微服务依赖。\n\n绿色，是代表2个微服务，这是这个例子的应用的一部分，我在这篇博客中叫他为 **movies** 和 **recommendations**\n\n# 配置服务（Configuration Service）\n\n这个**配置服务**，在所有的微服务架构中都是一个非常重要的概念，基于[twelve-factor](http://12factor.net/config)应用方法,微服务的配置应该是在环境中得到存储，而不是仅仅在项目中。\n\n**配置服务** 是必须的，因为他为所有的微服务处理了配置，通过简单的点对点服务调用，来检索这些配置，这是多功能的优点。\n\n让我们来总结一下，这个多个部署环境。如果我们有一个临时环境和生产环境，在这些环境中，我们的配置是不一样的，一个配置服务可能有一个专用的Git存储库的配置环境。没有其他的环境中能够访问这个配置\n它是只提供给服务在该环境运行时的配置。\n\n![微服务](http://i.imgur.com/J7FazPH.png \"title\")\n\n当**配置服务**开启后，它会根据配置路劲找到配置文件，去服务那些需要配置服务的微服务程序。每一个微服务都可以拥有他们的自己的配置，来处理一些正在运行的特殊环境。\n在这个过程中，配置外部化和集中在一个地方，可以版本控制和修改，而无需重启服务改变配置。\n\n可以利用spring-cloud 的节点管理，你可以让配置环境的改变，只是需要简单的刷新 **发现服务**， 这样就能强制让全部的服务消费者发现这个新的服务。\n\n# 发现服务(Discovery Service)\n**发现服务**是微服务架构中的另外一个重要的组件。**发现服务**处理维护服务实例的列表可工作在一个集群中。在应用程序中，service - to - service调用是使用客户端来做。\n\n以这个程序为例子，我使用[Spring Cloud Feign](https://github.com/spring-cloud-samples/feign-eureka), 客户端是依赖于一个RESTful的API 的微服务,它起源于[Netflix OSS](https://github.com/spring-cloud-samples/feign-eureka)项目. \n```\n@FeignClient(\"movie\")\npublic interface MovieClient {\n    @RequestMapping(method = RequestMethod.GET, value = \"/movies\")\n    PagedResources findAll();\n\n    @RequestMapping(method = RequestMethod.GET, value = \"/movies/{id}\")\n    Movie findById(@RequestParam(\"id\") String id);\n\n    @RequestMapping(method = RequestMethod.POST, value = \"/movies\",\n      produces = MediaType.APPLICATION_JSON_VALUE)\n    void createMovie(@RequestBody Movie movie);\n}\n```\n\n在上面的例子，我创建了一个 模拟客户端，用RESTful 方法来暴露**movie service**。使用 **@FeignClient**注解，我首先指定我想为**movice micro service**来创建一个客户端的API。\n接着，我指定一个我想要消费的微服务映射，我是通过在方法上声明URL的样式来做接口映射的（spring mvc类似），作为一个REST Ful 的路由映射。\n\n创建一个模拟的客户端 是相当的简单，我们只是需要在我将要创建的客户端中，知道需要那个服务的ID。这个服务的URL将会在运行期间被自动配置，因为在集群中的每一个微服务在开启时它的ID都会被注册到**发现服务**中。\n\n这同样适用于其他服务的microservice架构。我只是需要知道这个服务的Id,我就能和他做交互，这里的所有事情都会spring自动化了。\n\n# API Gateway\n\nAPI gateway 是另外一个重要的微服务，如果我们需要去创建一个微服务集群管理他们自己的领域实体类。绿色的六边形下面是数据驱动的服务，用来管理他们自己的领域模型实体类，以及他们自己的数据库。通过添加一个**API gateway service**， 我们可以创建一个API 路由的代理，并暴露给绿色的服务。\n![Alt text](http://i.imgur.com/JVSGMfY.png \"Optional title\")\n\n现在，我们假设 **recommendations service** 和 ** movie service ** 都暴露他们自己的REST API 给领域实体管理。这个API gateway 将会通过**discovery service**发现他们的服务和他们依赖注入其他服务的代理路由方法。\n通过这个方式，** recommendation** 和 ** movice ** 服务，将会有一个完整的定义; 本地的路由映射是可以利用所有暴露 REST API 的微服务。API Gateway 将会重新定义转发路由请求服务实例，用自己的路由开始通过HTTP来发出请求。\n\n# 例子项目\n我把全部的例子项目都放到了一起，演示了一个从头到尾的 使用Spring cloud 构建本地云平台的实践架构。\n\n概念：\n- 使用Docker整合测试用例\n- 混合持久化\n- 微服务架构\n- 服务发现\n- API gateway\n\n# Docker\n\n每一个服务都是使用Docker来构建和发布的。从头到尾整合测试用例，能在一台开发机器中，使用Docker compose来做。\n\n# 混合持久化（Polyglot Persistence）\n这个示例项目的核心概念之一是在实践中如何走近通晓多种语言的持久性。Microservices项目中使用自己的数据库,同时结合数据从其他服务通过休息或一个消息总线。例如，你能有一个微服务，服务下面的数据库：\n- Neo4j (graph)\n- MongoDB (document)\n- MySQL (relational)\n\n# 微服务架构（Microservice architecture）\n这个例子项目，演示了如何使用微服务构建一个新的应用程序，而不是monolith-first策略。\n由于在项目中的每一个微服务都是父项目的一个模块，这样对开发者来说是非常友好的，可以在本地中运行和开发每一个微服务。添加一个新的微服务也是非常的容易，当**发现程序**可以自动发现新的在集群中运行的微服务。\n\n# 服务发现（Service discovery）\n这个项目包含2种类型的服务发现，其中一个是使用了Netflix Eureka, 以及另外一个是使用了Hashicorp 的 Consul。发现有多个服务提供了机会来使用一个(Consul)作为集群的DNS提供商，其他如（Eureka）作为一个API gateway 的代理。\n\n# API gateway\n每一个微服务，将会和Eureka 的检索整个集群API路由线，使用此策略中的每个microservice集群可以通过一个API网关负载均衡和暴露API gateway。每个服务将自动发现和API请求路由到服务拥有路线。这个代理技术是十分有帮助的在开发用户接口的时候，作为完整的API可用的平台是通过自己的主机作为代理。\n\n# Docker 例子\n这个Demo项目是使用Docker来构建一个内容镜像都是每个microservices Maven构建的一部分。我们可以轻松地安排整个microservice集群在自己的机器上使用Docker组件。\n\n# 开始这个项目\n\n你可以访问Github仓库，来获取这个例子的项目。\n```\nhttps://github.com/kbastani/spring-cloud-microservice-example\n```\n拷贝这个项目，和下载这个仓库到你的机器。在下载后，你将会需要，使用Maven 和Docker去编译和构建一个本地的镜像。\n\n# 下载Docker\n\n首先，下载一个Docker,如果你并没有安装。接着，按着这个介绍，[这里](https://docs.docker.com/compose/install/), 去获取Docker , 以及在你的开发机器上运行。\n\n你将同时需要安装 [Docker Compose](https://docs.docker.com/compose/),这个安装指导，你可以在这里找到，[这里](https://docs.docker.com/compose/install/). 如果你已经安装了Mac OSX 和 boot2docker,确认你的boot2docker-vm的条件，是否最小为5G内存，下面这个命令将允许你这样设置：\n```\n$ boot2docker init --memory=5000\n```\n\n# 要求\n运行这个Demo,需要一下这些条件：\n- Maven3+\n- Java 8+\n- Docker \n- Docker Compose\n\n# 构建这个项目\n去构建这个项目，可以开启终端在项目的根目录下运行这个命令，\n```\n$ mvn clean install\n```\n在执行，这个命令，他会帮忙下载项目工程所需要的依赖包，以及编译每一个项目工程。每一个服务都会被构建，以及Maven的Docker 插件将会自动构建每一个镜像到本地的Docker 注册。在你运行  **mvn clean install**命令去构建的时候 Docker 必须先被运行，并且是可用的。\n如果构建成功，你会看到这样的信息输出：\n```\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO]\n[INFO] spring-cloud-microservice-example-parent .......... SUCCESS [  0.268 s]\n[INFO] users-microservice ................................ SUCCESS [ 11.929 s]\n[INFO] discovery-microservice ............................ SUCCESS [  5.640 s]\n[INFO] api-gateway-microservice .......................... SUCCESS [  5.156 s]\n[INFO] recommendation-microservice ....................... SUCCESS [  7.732 s]\n[INFO] config-microservice ............................... SUCCESS [  4.711 s]\n[INFO] hystrix-dashboard ................................. SUCCESS [  4.251 s]\n[INFO] consul-microservice ............................... SUCCESS [  6.763 s]\n[INFO] movie-microservice ................................ SUCCESS [  8.359 s]\n[INFO] movies-ui ......................................... SUCCESS [ 15.833 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n```\n\n# 开始使用Docker Compose 来组成集群\n\n现在每一个镜像，已经被构建成功，我们可以使用Docker Compose 来 组成自旋向上的集群，我们将会包含一个预配置的yaml文件。\n在项目的根目录，进入 **spring-cloud-mircroservice-example/docker**目录\n现在，可以开启一个微服务集群，执行下面的命令：\n```\n$ docker-compose up\n```\n\n如果所有的事情都配置正确，每一个镜像都能更早的在我们自己的Docker VM 容器内，被运行构建，网络会自动服务发现. 你将会看见，一大串的log 输出，为每一个服务的开启的顺序。\n这可能需要几分钟来编译整个程序，这个时间是由你的运行机器来决定的。\n\n一旦启动顺序完成，你可以导航到 Eureka主机和看到哪些服务注册与发现服务。\n\n复制和粘贴下面的命令行到你的终端，Docker能接近使用 **$DOCKER_HOST** 环境变量：\n```\n$ open $(echo \\\"$(echo $DOCKER_HOST)\\\"|\n            \\sed 's/tcp:\\/\\//http:\\/\\//g'|\n            \\sed 's/[0-9]\\{4,\\}/8761/g'|\n            \\sed 's/\\\"//g')\n```\n\n如果 Eureka 能正确开启，浏览器窗口将会开启一个本地的Eureka 服务的面板，就如下面所展示的那样：\n![Eureka](http://i.imgur.com/buABI3h.png)\n\n我们能看见，每一个服务实例的运行和运行状态。我们能接近这个数据驱动服务。这个演示程序的就是 **movie** 服务。\n```\n$ open $(echo \\\"$(echo $DOCKER_HOST)/movie\\\"|\n            \\sed 's/tcp:\\/\\//http:\\/\\//g'|\n            \\sed 's/[0-9]\\{4,\\}/10000/g'|\n            \\sed 's/\\\"//g')\n```\n\n这个命令，这个命令将导航到API网关的端点和代理**movie**服务的REST API端点。这些REST APIs 已经使用 **HATEOAS**来被配置了，它支持所有的服务的自动发现功能嵌入链接。\n```\n{\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie\"\n    },\n    \"resume\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/resume\"\n    },\n    \"pause\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/pause\"\n    },\n    \"restart\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/restart\"\n    },\n    \"metrics\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/metrics\"\n    },\n    \"env\" : [ {\n      \"href\" : \"http://192.168.59.103:10000/movie/env\"\n    }, {\n      \"href\" : \"http://192.168.59.103:10000/movie/env\"\n    } ],\n    \"archaius\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/archaius\"\n    },\n    \"beans\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/beans\"\n    },\n    \"configprops\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/configprops\"\n    },\n    \"trace\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/trace\"\n    },\n    \"info\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/info\"\n    },\n    \"health\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/health\"\n    },\n    \"hystrix.stream\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/hystrix.stream\"\n    },\n    \"routes\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/routes\"\n    },\n    \"dump\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/dump\"\n    },\n    \"refresh\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/refresh\"\n    },\n    \"mappings\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/mappings\"\n    },\n    \"autoconfig\" : {\n      \"href\" : \"http://192.168.59.103:10000/movie/autoconfig\"\n    }\n  }\n}\n```\n\n# 结论\n本系列的第一部分关于构建mircroservice架构与Spring-cloud 和 Docker。在本文章中，我们已经涉及到了以下的一些概念：\n- 服务发现（Service Discovery）\n- 扩展配置（Externalized Configuration）\n- API Gateway\n- 用Docker实现服务编排（Service Orchestration with Docker Compose）\n\n在下一篇博文中,我们将复习如何构建应用程序前端与后端服务集成。我们也可以关注于这个例子[polyglot persistence](http://martinfowler.com/bliki/PolyglotPersistence.html)使用Mysql(关系型数据库) 和 Neo4j(图形数据库)。\n\n# 特别感谢\n我将会特别感谢[Josh Long](http://www.twitter.com/starbuxman) 和 spring 的 rest 团队给与我这个机会去学习spring 框架提供的第一手精美的东西。没有杰克的指导我将无法用语言表达的所有神奇的spring生态系统所能提供的东西。\n\n这里有很多开源工具，想Spring Cloud。 这将是件不可能的事情，如果没有这些人的思想领导，如：[Adrian Cockcroft (Netflix OSS)](https://twitter.com/adrianco), [Martin Fowler (everything)](https://twitter.com/martinfowler)\n[Sam Newman (O'Reilly's Building Microservices)](https://twitter.com/samnewman), [ Ian Robinson (consumer driven contracts)](https://twitter.com/iansrobinson)\n[ Chris Richardson (Cloud Foundry) ](https://twitter.com/crichardson) 以及很多其他参与到开源工作的人们。\n\n> 参考：\nhttp://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\n\n\n\n\n\n\n","slug":"translation/1","published":1,"date":"2016-11-26T04:26:13.705Z","updated":"2016-11-26T14:49:13.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp80c0009c88qu8pipyfv","content":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>翻译：灯塔</li>\n<li>校对：</li>\n<li>翻译原文：<a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\" target=\"_blank\" rel=\"external\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a></li>\n<li>翻译目的：玩玩这个<a href=\"https://github.com/kbastani/spring-cloud-microservice-example\" target=\"_blank\" rel=\"external\">https://github.com/kbastani/spring-cloud-microservice-example</a><br>注意：企业实现微服务化时，需要考虑团队的水平，技术成本，和当前的业务需求，业务体量，微服务实施也并不好玩，分布式会比单体架构难度大的多。</li>\n</ul>\n<hr>\n</blockquote>\n<h1 id=\"什么是Spring-Cloud\"><a href=\"#什么是Spring-Cloud\" class=\"headerlink\" title=\"什么是Spring-Cloud?\"></a>什么是Spring-Cloud?</h1><p>Spring-Cloud 是一套工具集合，用来提供解决方案构建分布式系统时遇到的一些常见的模式。如果你熟悉构建用spring 来构建应用，那么spring-cloud常用来构建它的一些常见的构建块。<br>在Spring-Cloud 提供的解决方案中，你可能要找一些工具来解决一下的一下问题：</p>\n<ul>\n<li>Configuration management（配置管理）</li>\n<li>Service discovery(服务发现)</li>\n<li>Circuit breakers（断融器）</li>\n<li>Distributed sessions（分布式回会话）</li>\n</ul>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><p>这里大部分spring-cloud 的工作都是基于spring-boot 的基础上的。<br>下面谈论的一些东西对于spring-boot来说都是一些新的东西，下面的项目名称已经很大的程度上已经说明了他是干什么的。<br>你能在Spring框架和spring的生态圈中的到所有的最好的东西，调到完美，以最小的配置，为生产环境做好随时发布的准备。</p>\n<h1 id=\"服务发现和集成路由\"><a href=\"#服务发现和集成路由\" class=\"headerlink\" title=\"服务发现和集成路由\"></a>服务发现和集成路由</h1><p>在为服务的架构中，每一个服务都有单独的作用。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个<strong>配置服务</strong>，和<strong>发现服务</strong>。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个<strong>配置服务</strong>，和<strong>发现服务</strong>。</p>\n<p><img src=\"http://i.imgur.com/Dc6xjwd.png\" alt=\"微服务\" title=\"title\"></p>\n<p>上面的图片展示了一个4-microservice设置，连线表示了它们之间的依赖。</p>\n<p><strong>配置服务</strong>，在顶部，用黄色表示，同时，它也被其他的微服务依赖。<strong>发现服务</strong>在低部，标记为蓝色，同时也被其他微服务依赖。</p>\n<p>绿色，是代表2个微服务，这是这个例子的应用的一部分，我在这篇博客中叫他为 <strong>movies</strong> 和 <strong>recommendations</strong></p>\n<h1 id=\"配置服务（Configuration-Service）\"><a href=\"#配置服务（Configuration-Service）\" class=\"headerlink\" title=\"配置服务（Configuration Service）\"></a>配置服务（Configuration Service）</h1><p>这个<strong>配置服务</strong>，在所有的微服务架构中都是一个非常重要的概念，基于<a href=\"http://12factor.net/config\" target=\"_blank\" rel=\"external\">twelve-factor</a>应用方法,微服务的配置应该是在环境中得到存储，而不是仅仅在项目中。</p>\n<p><strong>配置服务</strong> 是必须的，因为他为所有的微服务处理了配置，通过简单的点对点服务调用，来检索这些配置，这是多功能的优点。</p>\n<p>让我们来总结一下，这个多个部署环境。如果我们有一个临时环境和生产环境，在这些环境中，我们的配置是不一样的，一个配置服务可能有一个专用的Git存储库的配置环境。没有其他的环境中能够访问这个配置<br>它是只提供给服务在该环境运行时的配置。</p>\n<p><img src=\"http://i.imgur.com/J7FazPH.png\" alt=\"微服务\" title=\"title\"></p>\n<p>当<strong>配置服务</strong>开启后，它会根据配置路劲找到配置文件，去服务那些需要配置服务的微服务程序。每一个微服务都可以拥有他们的自己的配置，来处理一些正在运行的特殊环境。<br>在这个过程中，配置外部化和集中在一个地方，可以版本控制和修改，而无需重启服务改变配置。</p>\n<p>可以利用spring-cloud 的节点管理，你可以让配置环境的改变，只是需要简单的刷新 <strong>发现服务</strong>， 这样就能强制让全部的服务消费者发现这个新的服务。</p>\n<h1 id=\"发现服务-Discovery-Service\"><a href=\"#发现服务-Discovery-Service\" class=\"headerlink\" title=\"发现服务(Discovery Service)\"></a>发现服务(Discovery Service)</h1><p><strong>发现服务</strong>是微服务架构中的另外一个重要的组件。<strong>发现服务</strong>处理维护服务实例的列表可工作在一个集群中。在应用程序中，service - to - service调用是使用客户端来做。</p>\n<p>以这个程序为例子，我使用<a href=\"https://github.com/spring-cloud-samples/feign-eureka\" target=\"_blank\" rel=\"external\">Spring Cloud Feign</a>, 客户端是依赖于一个RESTful的API 的微服务,它起源于<a href=\"https://github.com/spring-cloud-samples/feign-eureka\" target=\"_blank\" rel=\"external\">Netflix OSS</a>项目.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@FeignClient(&quot;movie&quot;)</div><div class=\"line\">public interface MovieClient &#123;</div><div class=\"line\">    @RequestMapping(method = RequestMethod.GET, value = &quot;/movies&quot;)</div><div class=\"line\">    PagedResources findAll();</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(method = RequestMethod.GET, value = &quot;/movies/&#123;id&#125;&quot;)</div><div class=\"line\">    Movie findById(@RequestParam(&quot;id&quot;) String id);</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(method = RequestMethod.POST, value = &quot;/movies&quot;,</div><div class=\"line\">      produces = MediaType.APPLICATION_JSON_VALUE)</div><div class=\"line\">    void createMovie(@RequestBody Movie movie);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的例子，我创建了一个 模拟客户端，用RESTful 方法来暴露<strong>movie service</strong>。使用 <strong>@FeignClient</strong>注解，我首先指定我想为<strong>movice micro service</strong>来创建一个客户端的API。<br>接着，我指定一个我想要消费的微服务映射，我是通过在方法上声明URL的样式来做接口映射的（spring mvc类似），作为一个REST Ful 的路由映射。</p>\n<p>创建一个模拟的客户端 是相当的简单，我们只是需要在我将要创建的客户端中，知道需要那个服务的ID。这个服务的URL将会在运行期间被自动配置，因为在集群中的每一个微服务在开启时它的ID都会被注册到<strong>发现服务</strong>中。</p>\n<p>这同样适用于其他服务的microservice架构。我只是需要知道这个服务的Id,我就能和他做交互，这里的所有事情都会spring自动化了。</p>\n<h1 id=\"API-Gateway\"><a href=\"#API-Gateway\" class=\"headerlink\" title=\"API Gateway\"></a>API Gateway</h1><p>API gateway 是另外一个重要的微服务，如果我们需要去创建一个微服务集群管理他们自己的领域实体类。绿色的六边形下面是数据驱动的服务，用来管理他们自己的领域模型实体类，以及他们自己的数据库。通过添加一个<strong>API gateway service</strong>， 我们可以创建一个API 路由的代理，并暴露给绿色的服务。<br><img src=\"http://i.imgur.com/JVSGMfY.png\" alt=\"Alt text\" title=\"Optional title\"></p>\n<p>现在，我们假设 <strong>recommendations service</strong> 和 <strong> movie service </strong> 都暴露他们自己的REST API 给领域实体管理。这个API gateway 将会通过<strong>discovery service</strong>发现他们的服务和他们依赖注入其他服务的代理路由方法。<br>通过这个方式，<strong> recommendation</strong> 和 <strong> movice </strong> 服务，将会有一个完整的定义; 本地的路由映射是可以利用所有暴露 REST API 的微服务。API Gateway 将会重新定义转发路由请求服务实例，用自己的路由开始通过HTTP来发出请求。</p>\n<h1 id=\"例子项目\"><a href=\"#例子项目\" class=\"headerlink\" title=\"例子项目\"></a>例子项目</h1><p>我把全部的例子项目都放到了一起，演示了一个从头到尾的 使用Spring cloud 构建本地云平台的实践架构。</p>\n<p>概念：</p>\n<ul>\n<li>使用Docker整合测试用例</li>\n<li>混合持久化</li>\n<li>微服务架构</li>\n<li>服务发现</li>\n<li>API gateway</li>\n</ul>\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><p>每一个服务都是使用Docker来构建和发布的。从头到尾整合测试用例，能在一台开发机器中，使用Docker compose来做。</p>\n<h1 id=\"混合持久化（Polyglot-Persistence）\"><a href=\"#混合持久化（Polyglot-Persistence）\" class=\"headerlink\" title=\"混合持久化（Polyglot Persistence）\"></a>混合持久化（Polyglot Persistence）</h1><p>这个示例项目的核心概念之一是在实践中如何走近通晓多种语言的持久性。Microservices项目中使用自己的数据库,同时结合数据从其他服务通过休息或一个消息总线。例如，你能有一个微服务，服务下面的数据库：</p>\n<ul>\n<li>Neo4j (graph)</li>\n<li>MongoDB (document)</li>\n<li>MySQL (relational)</li>\n</ul>\n<h1 id=\"微服务架构（Microservice-architecture）\"><a href=\"#微服务架构（Microservice-architecture）\" class=\"headerlink\" title=\"微服务架构（Microservice architecture）\"></a>微服务架构（Microservice architecture）</h1><p>这个例子项目，演示了如何使用微服务构建一个新的应用程序，而不是monolith-first策略。<br>由于在项目中的每一个微服务都是父项目的一个模块，这样对开发者来说是非常友好的，可以在本地中运行和开发每一个微服务。添加一个新的微服务也是非常的容易，当<strong>发现程序</strong>可以自动发现新的在集群中运行的微服务。</p>\n<h1 id=\"服务发现（Service-discovery）\"><a href=\"#服务发现（Service-discovery）\" class=\"headerlink\" title=\"服务发现（Service discovery）\"></a>服务发现（Service discovery）</h1><p>这个项目包含2种类型的服务发现，其中一个是使用了Netflix Eureka, 以及另外一个是使用了Hashicorp 的 Consul。发现有多个服务提供了机会来使用一个(Consul)作为集群的DNS提供商，其他如（Eureka）作为一个API gateway 的代理。</p>\n<h1 id=\"API-gateway\"><a href=\"#API-gateway\" class=\"headerlink\" title=\"API gateway\"></a>API gateway</h1><p>每一个微服务，将会和Eureka 的检索整个集群API路由线，使用此策略中的每个microservice集群可以通过一个API网关负载均衡和暴露API gateway。每个服务将自动发现和API请求路由到服务拥有路线。这个代理技术是十分有帮助的在开发用户接口的时候，作为完整的API可用的平台是通过自己的主机作为代理。</p>\n<h1 id=\"Docker-例子\"><a href=\"#Docker-例子\" class=\"headerlink\" title=\"Docker 例子\"></a>Docker 例子</h1><p>这个Demo项目是使用Docker来构建一个内容镜像都是每个microservices Maven构建的一部分。我们可以轻松地安排整个microservice集群在自己的机器上使用Docker组件。</p>\n<h1 id=\"开始这个项目\"><a href=\"#开始这个项目\" class=\"headerlink\" title=\"开始这个项目\"></a>开始这个项目</h1><p>你可以访问Github仓库，来获取这个例子的项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/kbastani/spring-cloud-microservice-example</div></pre></td></tr></table></figure></p>\n<p>拷贝这个项目，和下载这个仓库到你的机器。在下载后，你将会需要，使用Maven 和Docker去编译和构建一个本地的镜像。</p>\n<h1 id=\"下载Docker\"><a href=\"#下载Docker\" class=\"headerlink\" title=\"下载Docker\"></a>下载Docker</h1><p>首先，下载一个Docker,如果你并没有安装。接着，按着这个介绍，<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"external\">这里</a>, 去获取Docker , 以及在你的开发机器上运行。</p>\n<p>你将同时需要安装 <a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"external\">Docker Compose</a>,这个安装指导，你可以在这里找到，<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"external\">这里</a>. 如果你已经安装了Mac OSX 和 boot2docker,确认你的boot2docker-vm的条件，是否最小为5G内存，下面这个命令将允许你这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ boot2docker init --memory=5000</div></pre></td></tr></table></figure></p>\n<h1 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h1><p>运行这个Demo,需要一下这些条件：</p>\n<ul>\n<li>Maven3+</li>\n<li>Java 8+</li>\n<li>Docker </li>\n<li>Docker Compose</li>\n</ul>\n<h1 id=\"构建这个项目\"><a href=\"#构建这个项目\" class=\"headerlink\" title=\"构建这个项目\"></a>构建这个项目</h1><p>去构建这个项目，可以开启终端在项目的根目录下运行这个命令，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn clean install</div></pre></td></tr></table></figure></p>\n<p>在执行，这个命令，他会帮忙下载项目工程所需要的依赖包，以及编译每一个项目工程。每一个服务都会被构建，以及Maven的Docker 插件将会自动构建每一个镜像到本地的Docker 注册。在你运行  <strong>mvn clean install</strong>命令去构建的时候 Docker 必须先被运行，并且是可用的。<br>如果构建成功，你会看到这样的信息输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] Reactor Summary:</div><div class=\"line\">[INFO]</div><div class=\"line\">[INFO] spring-cloud-microservice-example-parent .......... SUCCESS [  0.268 s]</div><div class=\"line\">[INFO] users-microservice ................................ SUCCESS [ 11.929 s]</div><div class=\"line\">[INFO] discovery-microservice ............................ SUCCESS [  5.640 s]</div><div class=\"line\">[INFO] api-gateway-microservice .......................... SUCCESS [  5.156 s]</div><div class=\"line\">[INFO] recommendation-microservice ....................... SUCCESS [  7.732 s]</div><div class=\"line\">[INFO] config-microservice ............................... SUCCESS [  4.711 s]</div><div class=\"line\">[INFO] hystrix-dashboard ................................. SUCCESS [  4.251 s]</div><div class=\"line\">[INFO] consul-microservice ............................... SUCCESS [  6.763 s]</div><div class=\"line\">[INFO] movie-microservice ................................ SUCCESS [  8.359 s]</div><div class=\"line\">[INFO] movies-ui ......................................... SUCCESS [ 15.833 s]</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] BUILD SUCCESS</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure></p>\n<h1 id=\"开始使用Docker-Compose-来组成集群\"><a href=\"#开始使用Docker-Compose-来组成集群\" class=\"headerlink\" title=\"开始使用Docker Compose 来组成集群\"></a>开始使用Docker Compose 来组成集群</h1><p>现在每一个镜像，已经被构建成功，我们可以使用Docker Compose 来 组成自旋向上的集群，我们将会包含一个预配置的yaml文件。<br>在项目的根目录，进入 <strong>spring-cloud-mircroservice-example/docker</strong>目录<br>现在，可以开启一个微服务集群，执行下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker-compose up</div></pre></td></tr></table></figure></p>\n<p>如果所有的事情都配置正确，每一个镜像都能更早的在我们自己的Docker VM 容器内，被运行构建，网络会自动服务发现. 你将会看见，一大串的log 输出，为每一个服务的开启的顺序。<br>这可能需要几分钟来编译整个程序，这个时间是由你的运行机器来决定的。</p>\n<p>一旦启动顺序完成，你可以导航到 Eureka主机和看到哪些服务注册与发现服务。</p>\n<p>复制和粘贴下面的命令行到你的终端，Docker能接近使用 <strong>$DOCKER_HOST</strong> 环境变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ open $(echo \\&quot;$(echo $DOCKER_HOST)\\&quot;|</div><div class=\"line\">            \\sed &apos;s/tcp:\\/\\//http:\\/\\//g&apos;|</div><div class=\"line\">            \\sed &apos;s/[0-9]\\&#123;4,\\&#125;/8761/g&apos;|</div><div class=\"line\">            \\sed &apos;s/\\&quot;//g&apos;)</div></pre></td></tr></table></figure></p>\n<p>如果 Eureka 能正确开启，浏览器窗口将会开启一个本地的Eureka 服务的面板，就如下面所展示的那样：<br><img src=\"http://i.imgur.com/buABI3h.png\" alt=\"Eureka\"></p>\n<p>我们能看见，每一个服务实例的运行和运行状态。我们能接近这个数据驱动服务。这个演示程序的就是 <strong>movie</strong> 服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ open $(echo \\&quot;$(echo $DOCKER_HOST)/movie\\&quot;|</div><div class=\"line\">            \\sed &apos;s/tcp:\\/\\//http:\\/\\//g&apos;|</div><div class=\"line\">            \\sed &apos;s/[0-9]\\&#123;4,\\&#125;/10000/g&apos;|</div><div class=\"line\">            \\sed &apos;s/\\&quot;//g&apos;)</div></pre></td></tr></table></figure></p>\n<p>这个命令，这个命令将导航到API网关的端点和代理<strong>movie</strong>服务的REST API端点。这些REST APIs 已经使用 <strong>HATEOAS</strong>来被配置了，它支持所有的服务的自动发现功能嵌入链接。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_links&quot; : &#123;</div><div class=\"line\">    &quot;self&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;resume&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/resume&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;pause&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/pause&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;restart&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/restart&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;metrics&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/metrics&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;env&quot; : [ &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/env&quot;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/env&quot;</div><div class=\"line\">    &#125; ],</div><div class=\"line\">    &quot;archaius&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/archaius&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;beans&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/beans&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;configprops&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/configprops&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;trace&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/trace&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;info&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/info&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;health&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/health&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;hystrix.stream&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/hystrix.stream&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;routes&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/routes&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;dump&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/dump&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;refresh&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/refresh&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;mappings&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/mappings&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoconfig&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/autoconfig&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>本系列的第一部分关于构建mircroservice架构与Spring-cloud 和 Docker。在本文章中，我们已经涉及到了以下的一些概念：</p>\n<ul>\n<li>服务发现（Service Discovery）</li>\n<li>扩展配置（Externalized Configuration）</li>\n<li>API Gateway</li>\n<li>用Docker实现服务编排（Service Orchestration with Docker Compose）</li>\n</ul>\n<p>在下一篇博文中,我们将复习如何构建应用程序前端与后端服务集成。我们也可以关注于这个例子<a href=\"http://martinfowler.com/bliki/PolyglotPersistence.html\" target=\"_blank\" rel=\"external\">polyglot persistence</a>使用Mysql(关系型数据库) 和 Neo4j(图形数据库)。</p>\n<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>我将会特别感谢<a href=\"http://www.twitter.com/starbuxman\" target=\"_blank\" rel=\"external\">Josh Long</a> 和 spring 的 rest 团队给与我这个机会去学习spring 框架提供的第一手精美的东西。没有杰克的指导我将无法用语言表达的所有神奇的spring生态系统所能提供的东西。</p>\n<p>这里有很多开源工具，想Spring Cloud。 这将是件不可能的事情，如果没有这些人的思想领导，如：<a href=\"https://twitter.com/adrianco\" target=\"_blank\" rel=\"external\">Adrian Cockcroft (Netflix OSS)</a>, <a href=\"https://twitter.com/martinfowler\" target=\"_blank\" rel=\"external\">Martin Fowler (everything)</a><br><a href=\"https://twitter.com/samnewman\" target=\"_blank\" rel=\"external\">Sam Newman (O’Reilly’s Building Microservices)</a>, <a href=\"https://twitter.com/iansrobinson\" target=\"_blank\" rel=\"external\"> Ian Robinson (consumer driven contracts)</a><br><a href=\"https://twitter.com/crichardson\" target=\"_blank\" rel=\"external\"> Chris Richardson (Cloud Foundry) </a> 以及很多其他参与到开源工作的人们。</p>\n<blockquote>\n<p>参考：<br><a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\" target=\"_blank\" rel=\"external\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>翻译：灯塔</li>\n<li>校对：</li>\n<li>翻译原文：<a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a></li>\n<li>翻译目的：玩玩这个<a href=\"https://github.com/kbastani/spring-cloud-microservice-example\">https://github.com/kbastani/spring-cloud-microservice-example</a><br>注意：企业实现微服务化时，需要考虑团队的水平，技术成本，和当前的业务需求，业务体量，微服务实施也并不好玩，分布式会比单体架构难度大的多。</li>\n</ul>\n<hr>\n</blockquote>\n<h1 id=\"什么是Spring-Cloud\"><a href=\"#什么是Spring-Cloud\" class=\"headerlink\" title=\"什么是Spring-Cloud?\"></a>什么是Spring-Cloud?</h1><p>Spring-Cloud 是一套工具集合，用来提供解决方案构建分布式系统时遇到的一些常见的模式。如果你熟悉构建用spring 来构建应用，那么spring-cloud常用来构建它的一些常见的构建块。<br>在Spring-Cloud 提供的解决方案中，你可能要找一些工具来解决一下的一下问题：</p>\n<ul>\n<li>Configuration management（配置管理）</li>\n<li>Service discovery(服务发现)</li>\n<li>Circuit breakers（断融器）</li>\n<li>Distributed sessions（分布式回会话）</li>\n</ul>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><p>这里大部分spring-cloud 的工作都是基于spring-boot 的基础上的。<br>下面谈论的一些东西对于spring-boot来说都是一些新的东西，下面的项目名称已经很大的程度上已经说明了他是干什么的。<br>你能在Spring框架和spring的生态圈中的到所有的最好的东西，调到完美，以最小的配置，为生产环境做好随时发布的准备。</p>\n<h1 id=\"服务发现和集成路由\"><a href=\"#服务发现和集成路由\" class=\"headerlink\" title=\"服务发现和集成路由\"></a>服务发现和集成路由</h1><p>在为服务的架构中，每一个服务都有单独的作用。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个<strong>配置服务</strong>，和<strong>发现服务</strong>。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个<strong>配置服务</strong>，和<strong>发现服务</strong>。</p>\n<p><img src=\"http://i.imgur.com/Dc6xjwd.png\" alt=\"微服务\" title=\"title\"></p>\n<p>上面的图片展示了一个4-microservice设置，连线表示了它们之间的依赖。</p>\n<p><strong>配置服务</strong>，在顶部，用黄色表示，同时，它也被其他的微服务依赖。<strong>发现服务</strong>在低部，标记为蓝色，同时也被其他微服务依赖。</p>\n<p>绿色，是代表2个微服务，这是这个例子的应用的一部分，我在这篇博客中叫他为 <strong>movies</strong> 和 <strong>recommendations</strong></p>\n<h1 id=\"配置服务（Configuration-Service）\"><a href=\"#配置服务（Configuration-Service）\" class=\"headerlink\" title=\"配置服务（Configuration Service）\"></a>配置服务（Configuration Service）</h1><p>这个<strong>配置服务</strong>，在所有的微服务架构中都是一个非常重要的概念，基于<a href=\"http://12factor.net/config\">twelve-factor</a>应用方法,微服务的配置应该是在环境中得到存储，而不是仅仅在项目中。</p>\n<p><strong>配置服务</strong> 是必须的，因为他为所有的微服务处理了配置，通过简单的点对点服务调用，来检索这些配置，这是多功能的优点。</p>\n<p>让我们来总结一下，这个多个部署环境。如果我们有一个临时环境和生产环境，在这些环境中，我们的配置是不一样的，一个配置服务可能有一个专用的Git存储库的配置环境。没有其他的环境中能够访问这个配置<br>它是只提供给服务在该环境运行时的配置。</p>\n<p><img src=\"http://i.imgur.com/J7FazPH.png\" alt=\"微服务\" title=\"title\"></p>\n<p>当<strong>配置服务</strong>开启后，它会根据配置路劲找到配置文件，去服务那些需要配置服务的微服务程序。每一个微服务都可以拥有他们的自己的配置，来处理一些正在运行的特殊环境。<br>在这个过程中，配置外部化和集中在一个地方，可以版本控制和修改，而无需重启服务改变配置。</p>\n<p>可以利用spring-cloud 的节点管理，你可以让配置环境的改变，只是需要简单的刷新 <strong>发现服务</strong>， 这样就能强制让全部的服务消费者发现这个新的服务。</p>\n<h1 id=\"发现服务-Discovery-Service\"><a href=\"#发现服务-Discovery-Service\" class=\"headerlink\" title=\"发现服务(Discovery Service)\"></a>发现服务(Discovery Service)</h1><p><strong>发现服务</strong>是微服务架构中的另外一个重要的组件。<strong>发现服务</strong>处理维护服务实例的列表可工作在一个集群中。在应用程序中，service - to - service调用是使用客户端来做。</p>\n<p>以这个程序为例子，我使用<a href=\"https://github.com/spring-cloud-samples/feign-eureka\">Spring Cloud Feign</a>, 客户端是依赖于一个RESTful的API 的微服务,它起源于<a href=\"https://github.com/spring-cloud-samples/feign-eureka\">Netflix OSS</a>项目.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@FeignClient(&quot;movie&quot;)</div><div class=\"line\">public interface MovieClient &#123;</div><div class=\"line\">    @RequestMapping(method = RequestMethod.GET, value = &quot;/movies&quot;)</div><div class=\"line\">    PagedResources findAll();</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(method = RequestMethod.GET, value = &quot;/movies/&#123;id&#125;&quot;)</div><div class=\"line\">    Movie findById(@RequestParam(&quot;id&quot;) String id);</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(method = RequestMethod.POST, value = &quot;/movies&quot;,</div><div class=\"line\">      produces = MediaType.APPLICATION_JSON_VALUE)</div><div class=\"line\">    void createMovie(@RequestBody Movie movie);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上面的例子，我创建了一个 模拟客户端，用RESTful 方法来暴露<strong>movie service</strong>。使用 <strong>@FeignClient</strong>注解，我首先指定我想为<strong>movice micro service</strong>来创建一个客户端的API。<br>接着，我指定一个我想要消费的微服务映射，我是通过在方法上声明URL的样式来做接口映射的（spring mvc类似），作为一个REST Ful 的路由映射。</p>\n<p>创建一个模拟的客户端 是相当的简单，我们只是需要在我将要创建的客户端中，知道需要那个服务的ID。这个服务的URL将会在运行期间被自动配置，因为在集群中的每一个微服务在开启时它的ID都会被注册到<strong>发现服务</strong>中。</p>\n<p>这同样适用于其他服务的microservice架构。我只是需要知道这个服务的Id,我就能和他做交互，这里的所有事情都会spring自动化了。</p>\n<h1 id=\"API-Gateway\"><a href=\"#API-Gateway\" class=\"headerlink\" title=\"API Gateway\"></a>API Gateway</h1><p>API gateway 是另外一个重要的微服务，如果我们需要去创建一个微服务集群管理他们自己的领域实体类。绿色的六边形下面是数据驱动的服务，用来管理他们自己的领域模型实体类，以及他们自己的数据库。通过添加一个<strong>API gateway service</strong>， 我们可以创建一个API 路由的代理，并暴露给绿色的服务。<br><img src=\"http://i.imgur.com/JVSGMfY.png\" alt=\"Alt text\" title=\"Optional title\"></p>\n<p>现在，我们假设 <strong>recommendations service</strong> 和 <strong> movie service </strong> 都暴露他们自己的REST API 给领域实体管理。这个API gateway 将会通过<strong>discovery service</strong>发现他们的服务和他们依赖注入其他服务的代理路由方法。<br>通过这个方式，<strong> recommendation</strong> 和 <strong> movice </strong> 服务，将会有一个完整的定义; 本地的路由映射是可以利用所有暴露 REST API 的微服务。API Gateway 将会重新定义转发路由请求服务实例，用自己的路由开始通过HTTP来发出请求。</p>\n<h1 id=\"例子项目\"><a href=\"#例子项目\" class=\"headerlink\" title=\"例子项目\"></a>例子项目</h1><p>我把全部的例子项目都放到了一起，演示了一个从头到尾的 使用Spring cloud 构建本地云平台的实践架构。</p>\n<p>概念：</p>\n<ul>\n<li>使用Docker整合测试用例</li>\n<li>混合持久化</li>\n<li>微服务架构</li>\n<li>服务发现</li>\n<li>API gateway</li>\n</ul>\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><p>每一个服务都是使用Docker来构建和发布的。从头到尾整合测试用例，能在一台开发机器中，使用Docker compose来做。</p>\n<h1 id=\"混合持久化（Polyglot-Persistence）\"><a href=\"#混合持久化（Polyglot-Persistence）\" class=\"headerlink\" title=\"混合持久化（Polyglot Persistence）\"></a>混合持久化（Polyglot Persistence）</h1><p>这个示例项目的核心概念之一是在实践中如何走近通晓多种语言的持久性。Microservices项目中使用自己的数据库,同时结合数据从其他服务通过休息或一个消息总线。例如，你能有一个微服务，服务下面的数据库：</p>\n<ul>\n<li>Neo4j (graph)</li>\n<li>MongoDB (document)</li>\n<li>MySQL (relational)</li>\n</ul>\n<h1 id=\"微服务架构（Microservice-architecture）\"><a href=\"#微服务架构（Microservice-architecture）\" class=\"headerlink\" title=\"微服务架构（Microservice architecture）\"></a>微服务架构（Microservice architecture）</h1><p>这个例子项目，演示了如何使用微服务构建一个新的应用程序，而不是monolith-first策略。<br>由于在项目中的每一个微服务都是父项目的一个模块，这样对开发者来说是非常友好的，可以在本地中运行和开发每一个微服务。添加一个新的微服务也是非常的容易，当<strong>发现程序</strong>可以自动发现新的在集群中运行的微服务。</p>\n<h1 id=\"服务发现（Service-discovery）\"><a href=\"#服务发现（Service-discovery）\" class=\"headerlink\" title=\"服务发现（Service discovery）\"></a>服务发现（Service discovery）</h1><p>这个项目包含2种类型的服务发现，其中一个是使用了Netflix Eureka, 以及另外一个是使用了Hashicorp 的 Consul。发现有多个服务提供了机会来使用一个(Consul)作为集群的DNS提供商，其他如（Eureka）作为一个API gateway 的代理。</p>\n<h1 id=\"API-gateway\"><a href=\"#API-gateway\" class=\"headerlink\" title=\"API gateway\"></a>API gateway</h1><p>每一个微服务，将会和Eureka 的检索整个集群API路由线，使用此策略中的每个microservice集群可以通过一个API网关负载均衡和暴露API gateway。每个服务将自动发现和API请求路由到服务拥有路线。这个代理技术是十分有帮助的在开发用户接口的时候，作为完整的API可用的平台是通过自己的主机作为代理。</p>\n<h1 id=\"Docker-例子\"><a href=\"#Docker-例子\" class=\"headerlink\" title=\"Docker 例子\"></a>Docker 例子</h1><p>这个Demo项目是使用Docker来构建一个内容镜像都是每个microservices Maven构建的一部分。我们可以轻松地安排整个microservice集群在自己的机器上使用Docker组件。</p>\n<h1 id=\"开始这个项目\"><a href=\"#开始这个项目\" class=\"headerlink\" title=\"开始这个项目\"></a>开始这个项目</h1><p>你可以访问Github仓库，来获取这个例子的项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/kbastani/spring-cloud-microservice-example</div></pre></td></tr></table></figure></p>\n<p>拷贝这个项目，和下载这个仓库到你的机器。在下载后，你将会需要，使用Maven 和Docker去编译和构建一个本地的镜像。</p>\n<h1 id=\"下载Docker\"><a href=\"#下载Docker\" class=\"headerlink\" title=\"下载Docker\"></a>下载Docker</h1><p>首先，下载一个Docker,如果你并没有安装。接着，按着这个介绍，<a href=\"https://docs.docker.com/compose/install/\">这里</a>, 去获取Docker , 以及在你的开发机器上运行。</p>\n<p>你将同时需要安装 <a href=\"https://docs.docker.com/compose/\">Docker Compose</a>,这个安装指导，你可以在这里找到，<a href=\"https://docs.docker.com/compose/install/\">这里</a>. 如果你已经安装了Mac OSX 和 boot2docker,确认你的boot2docker-vm的条件，是否最小为5G内存，下面这个命令将允许你这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ boot2docker init --memory=5000</div></pre></td></tr></table></figure></p>\n<h1 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h1><p>运行这个Demo,需要一下这些条件：</p>\n<ul>\n<li>Maven3+</li>\n<li>Java 8+</li>\n<li>Docker </li>\n<li>Docker Compose</li>\n</ul>\n<h1 id=\"构建这个项目\"><a href=\"#构建这个项目\" class=\"headerlink\" title=\"构建这个项目\"></a>构建这个项目</h1><p>去构建这个项目，可以开启终端在项目的根目录下运行这个命令，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mvn clean install</div></pre></td></tr></table></figure></p>\n<p>在执行，这个命令，他会帮忙下载项目工程所需要的依赖包，以及编译每一个项目工程。每一个服务都会被构建，以及Maven的Docker 插件将会自动构建每一个镜像到本地的Docker 注册。在你运行  <strong>mvn clean install</strong>命令去构建的时候 Docker 必须先被运行，并且是可用的。<br>如果构建成功，你会看到这样的信息输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] Reactor Summary:</div><div class=\"line\">[INFO]</div><div class=\"line\">[INFO] spring-cloud-microservice-example-parent .......... SUCCESS [  0.268 s]</div><div class=\"line\">[INFO] users-microservice ................................ SUCCESS [ 11.929 s]</div><div class=\"line\">[INFO] discovery-microservice ............................ SUCCESS [  5.640 s]</div><div class=\"line\">[INFO] api-gateway-microservice .......................... SUCCESS [  5.156 s]</div><div class=\"line\">[INFO] recommendation-microservice ....................... SUCCESS [  7.732 s]</div><div class=\"line\">[INFO] config-microservice ............................... SUCCESS [  4.711 s]</div><div class=\"line\">[INFO] hystrix-dashboard ................................. SUCCESS [  4.251 s]</div><div class=\"line\">[INFO] consul-microservice ............................... SUCCESS [  6.763 s]</div><div class=\"line\">[INFO] movie-microservice ................................ SUCCESS [  8.359 s]</div><div class=\"line\">[INFO] movies-ui ......................................... SUCCESS [ 15.833 s]</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div><div class=\"line\">[INFO] BUILD SUCCESS</div><div class=\"line\">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure></p>\n<h1 id=\"开始使用Docker-Compose-来组成集群\"><a href=\"#开始使用Docker-Compose-来组成集群\" class=\"headerlink\" title=\"开始使用Docker Compose 来组成集群\"></a>开始使用Docker Compose 来组成集群</h1><p>现在每一个镜像，已经被构建成功，我们可以使用Docker Compose 来 组成自旋向上的集群，我们将会包含一个预配置的yaml文件。<br>在项目的根目录，进入 <strong>spring-cloud-mircroservice-example/docker</strong>目录<br>现在，可以开启一个微服务集群，执行下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker-compose up</div></pre></td></tr></table></figure></p>\n<p>如果所有的事情都配置正确，每一个镜像都能更早的在我们自己的Docker VM 容器内，被运行构建，网络会自动服务发现. 你将会看见，一大串的log 输出，为每一个服务的开启的顺序。<br>这可能需要几分钟来编译整个程序，这个时间是由你的运行机器来决定的。</p>\n<p>一旦启动顺序完成，你可以导航到 Eureka主机和看到哪些服务注册与发现服务。</p>\n<p>复制和粘贴下面的命令行到你的终端，Docker能接近使用 <strong>$DOCKER_HOST</strong> 环境变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ open $(echo \\&quot;$(echo $DOCKER_HOST)\\&quot;|</div><div class=\"line\">            \\sed &apos;s/tcp:\\/\\//http:\\/\\//g&apos;|</div><div class=\"line\">            \\sed &apos;s/[0-9]\\&#123;4,\\&#125;/8761/g&apos;|</div><div class=\"line\">            \\sed &apos;s/\\&quot;//g&apos;)</div></pre></td></tr></table></figure></p>\n<p>如果 Eureka 能正确开启，浏览器窗口将会开启一个本地的Eureka 服务的面板，就如下面所展示的那样：<br><img src=\"http://i.imgur.com/buABI3h.png\" alt=\"Eureka\"></p>\n<p>我们能看见，每一个服务实例的运行和运行状态。我们能接近这个数据驱动服务。这个演示程序的就是 <strong>movie</strong> 服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ open $(echo \\&quot;$(echo $DOCKER_HOST)/movie\\&quot;|</div><div class=\"line\">            \\sed &apos;s/tcp:\\/\\//http:\\/\\//g&apos;|</div><div class=\"line\">            \\sed &apos;s/[0-9]\\&#123;4,\\&#125;/10000/g&apos;|</div><div class=\"line\">            \\sed &apos;s/\\&quot;//g&apos;)</div></pre></td></tr></table></figure></p>\n<p>这个命令，这个命令将导航到API网关的端点和代理<strong>movie</strong>服务的REST API端点。这些REST APIs 已经使用 <strong>HATEOAS</strong>来被配置了，它支持所有的服务的自动发现功能嵌入链接。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_links&quot; : &#123;</div><div class=\"line\">    &quot;self&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;resume&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/resume&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;pause&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/pause&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;restart&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/restart&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;metrics&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/metrics&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;env&quot; : [ &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/env&quot;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/env&quot;</div><div class=\"line\">    &#125; ],</div><div class=\"line\">    &quot;archaius&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/archaius&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;beans&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/beans&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;configprops&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/configprops&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;trace&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/trace&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;info&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/info&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;health&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/health&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;hystrix.stream&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/hystrix.stream&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;routes&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/routes&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;dump&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/dump&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;refresh&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/refresh&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;mappings&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/mappings&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoconfig&quot; : &#123;</div><div class=\"line\">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/autoconfig&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>本系列的第一部分关于构建mircroservice架构与Spring-cloud 和 Docker。在本文章中，我们已经涉及到了以下的一些概念：</p>\n<ul>\n<li>服务发现（Service Discovery）</li>\n<li>扩展配置（Externalized Configuration）</li>\n<li>API Gateway</li>\n<li>用Docker实现服务编排（Service Orchestration with Docker Compose）</li>\n</ul>\n<p>在下一篇博文中,我们将复习如何构建应用程序前端与后端服务集成。我们也可以关注于这个例子<a href=\"http://martinfowler.com/bliki/PolyglotPersistence.html\">polyglot persistence</a>使用Mysql(关系型数据库) 和 Neo4j(图形数据库)。</p>\n<h1 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h1><p>我将会特别感谢<a href=\"http://www.twitter.com/starbuxman\">Josh Long</a> 和 spring 的 rest 团队给与我这个机会去学习spring 框架提供的第一手精美的东西。没有杰克的指导我将无法用语言表达的所有神奇的spring生态系统所能提供的东西。</p>\n<p>这里有很多开源工具，想Spring Cloud。 这将是件不可能的事情，如果没有这些人的思想领导，如：<a href=\"https://twitter.com/adrianco\">Adrian Cockcroft (Netflix OSS)</a>, <a href=\"https://twitter.com/martinfowler\">Martin Fowler (everything)</a><br><a href=\"https://twitter.com/samnewman\">Sam Newman (O’Reilly’s Building Microservices)</a>, <a href=\"https://twitter.com/iansrobinson\"> Ian Robinson (consumer driven contracts)</a><br><a href=\"https://twitter.com/crichardson\"> Chris Richardson (Cloud Foundry) </a> 以及很多其他参与到开源工作的人们。</p>\n<blockquote>\n<p>参考：<br><a href=\"http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html\">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a></p>\n</blockquote>\n"},{"title":"消息摘要与数字签名(补充基础知识)","_content":"\n\n![vv](http://img2.tuicool.com/3mMjAf.jpg \"title\")\n<!-- more -->\n\n>导读：\n在读java.security 源码时，发现有很多不懂的地方，需要补充一下基础知识。这章节主要说说Java安全的**消息摘要** 和 **数字签名** 的内容。\n\n# 1、消息摘要\n## 定义\n他是有一个唯一对一个消息或文本的固定长度的值。它是由一个单向的Hash加密函数对消息进行作用而产生。如果消息在途中改变了，则接收者通过对收到消息的新产生的摘要与原摘要比较，就可知道消息是否被改变了。因此消息摘要保证了消息的完整性。消息摘要采用单向Hash 函数将需加密的明文\"摘要\"成一串密文，这一串密文亦称为数字指纹(Finger Print)。它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是\"真身\"的\"指纹\"了。\n类是MD5加密，明文摘要成密文，过程不可逆，但密文是唯一的，只需要对比密文的一致性，就能知道原来的明文有没有因为远程传输而改变。\n## 特点\n消息摘要具有以下特点：\n- 唯一性：数据只要有一点改变，那么再通过消息摘要算法得到的摘要也会发生变化。虽然理论上有可能会发生碰撞，但是概率极其低。\n- 不可逆：消息摘要算法的密文无法被解密。\n- 不需要密钥，可使用于分布式网络。\n- 无论输入的明文有多长，计算出来的消息摘要的长度总是固定的。\n\n原理\n消息摘要，其实就是将需要摘要的数据作为参数，经过哈希函数(Hash)的计算，得到的散列值。\n如下，给出常用的消息摘要工具类。\n```\npublic class MessageDigestUtils {        \n    /**\n     * 默认字节缓冲区大小。\n     */\n    private static final int DEFAULT_BUFFER_SIZE = 1024 * 8;\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。\n     */\n    public static byte[] getMD2Digest(byte[] input){\n        //throw new UnsupportedOperationException();\n        return getMessageDigest(input, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException  如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。\n     */\n    public static byte[] getMD2Digest(InputStream inputStream) throws IOException{\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(inputStream, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。\n     */\n    public static String getMD2StringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流。\n     * @return 字符串形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。\n     */\n    public static String getMD2StringDigest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。\n     */\n    public static byte[] getMD5Digest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.MD5); \n    }\n    \n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。\n     */\n    public static byte[] getMD5Digest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.MD5);\n    }\n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。\n     */\n    public static String getMD5StringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.MD5);\n    }\n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。\n     */\n    public static String getMD5StringDigest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD5);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。\n     */\n    public static byte[] getSHADigest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。\n     */\n    public static byte[] getSHADigest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。\n     */\n    public static String getSHAStringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException  如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。\n     */\n    public static String getSHAStringDigest(InputStream inputStream) \n            throws IOException{\n       // throw new UnsupportedOperationException();\n       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据流\n     * @return  字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。\n     */\n    public static byte[] getSHA256Digest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。\n     */\n    public static byte[] getSHA256Digest(InputStream inputStream) \n            throws IOException{\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return  字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。\n     */\n    public static String getSHA256StringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param inputStream\n     * @return \n     *      字符串形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。\n     */\n    public static String getSHA256StringDigest(InputStream inputStream) \n            throws IOException{\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。\n     */\n    public static byte[] getSHA384Digest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要。\n     * \n     * @param inputStream inputStream 要进行消息摘要的数据流。\n     * @return 字节数组形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。\n     */\n    public static byte[] getSHA384Digest(InputStream inputStream) throws IOException{\n       // throw new UnsupportedOperationException();\n       \t\treturn getMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。\n     */\n    public static String getSHA384StringDigest(byte[] input){\n       //throw new UnsupportedOperationException();\n       return getStringMessageDigest(input, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException  如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。\n     */\n    public static String getSHA384StringDigest(InputStream inputStream) \n            throws IOException{\n        //  throw new UnsupportedOperationException();  \n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return  字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。\n     */\n    public static byte[] getSHA512Digest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(input, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要。\n     * \n     * @param inputStream 要进行消息摘要的数据流。\n     * @return 字节数组形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。\n     */\n    public static byte[] getSHA512Digest(InputStream inputStream) \n            throws IOException{ \n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。\n     */\n    public static String getSHA512StringDigest(byte [] input) {\n        //throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。\n     */\n    public static String getSHA512StringDigest(InputStream inputStream) \n            throws IOException {        \n       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 获取消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @param alogrithm 消息摘要算法 @see {@link MessageDigestAlgorithm}\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。\n     */\n    private static byte[] getMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) {\n        // throw new UnsupportedOperationException();\n        Assert.notNull(input, \"要进行消息摘要的数据不能为空!\");\n        Assert.notNull(algorithm, \"消息摘要算法不能为空!\");\n        try {\n                MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());\n                return messageDigest.digest(input);\n        } catch (NoSuchAlgorithmException e) {\n                throw new IllegalArgumentException(e);\n        }        \n    }\n    \n    /**\n     * 获取消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @param alogrithm 消息摘要算法 @see {@link  MessageDigestAlogrithm}\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。\n     */\n    private static String getStringMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) {\n        // throw new UnsupportedOperationException();\n        byte[] digest = getMessageDigest(input, algorithm);\n        return HexUtils.toHexString(digest);        \n    }\n    \n    /**\n     * 获取消息摘要。\n     * @param inputStream 要进行消息摘要的数据流。\n     * @param alogrithm 消息摘要算法 @see {@link MessageDigestAlogrithm }\n     * @return 字节数组形式的消息摘要。\n     * @throws IOException 如果从数据流中读取数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。\n     */\n    private static byte[] getMessageDigest (InputStream inputStream, MessageDigestAlgorithm algorithm) \n            throws IOException {\n        //throw new UnsupportedOperationException();\n        Assert.notNull(inputStream, \"要进行消息摘要的数据流不能为空!\");\n        Assert.notNull(algorithm, \"消息摘要算法不能为空!\");\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());\n            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n            int len = -1;\n            while ((len = inputStream.read(buffer)) > -1) {\n                messageDigest.update(buffer, 0, len);\n            }\n            return messageDigest.digest();\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        }        \n    }\n    \n    /**\n     * 获取消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流。\n     * @param alogrithm 消息摘要算法 @see {@link MessageDigestAlogrithm}。\n     * @return 字符串形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。\n     */\n    private static String getStringMessageDigest(InputStream inputStream, MessageDigestAlgorithm algorithm) \n            throws IOException {        \n        byte[] digest = getMessageDigest(inputStream, algorithm);\n        return HexUtils.toHexString(digest);\n    }\n    \n    private MessageDigestUtils() {} \n    \n    /**\n     * 消息摘要算法\n     * \n     * 这里只是列举JDK6以上（包含6）支持的算法\n     */\n    public static enum  MessageDigestAlgorithm {\n        \n        MD2(\"MD2\",128),\n        MD5(\"MD5\",128),\n        SHA(\"SHA-1\",160),\n        SHA256(\"SHA-256\",256),\n        SHA384(\"SHA-384\",384),\n        SHA512(\"SHA-512\",512);\n        \n        /**\n         * 算法名称\n         */\n        private String name;\n        \n        /**\n         * 摘要长度（单位：比特）\n         */\n        private int digestLength;\n\n        private  MessageDigestAlgorithm(String name,int digestLength) {\n            this.name = name;\n            this.digestLength = digestLength;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getDigestLength() {\n            return digestLength;\n        }                \n    }\n    \n}\n\n```\n\n## 常用算法\nMD2(\"MD2\",128),\nMD5(\"MD5\",128),\nSHA(\"SHA-1\",160),\nSHA256(\"SHA-256\",256),\nSHA384(\"SHA-384\",384),\nSHA512(\"SHA-512\",512);\n\n消息摘要算法包括MD(Message Digest，消息摘要算法)、SHA(Secure Hash Algorithm，安全散列算法)、MAC(Message AuthenticationCode，消息认证码算法)共3大系列，常用于验证数据的完整性，是数字签名算法的核心算法。\nMD5和SHA1分别是MD、SHA算法系列中最有代表性的算法。\n如今，MD5已被发现有许多漏洞，从而不再安全。SHA算法比MD算法的摘要长度更长，也更加安全。\n\n# 2、数字签名\n数字签名算法可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是非对称加密算法和消息摘要算法的结合体。\n\n## 算法简述\n**数字签名算法**可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是**非对称加密算法和消息摘要算法的结合体**。\n\n## 特点\n\n数字签名算法要求能够验证数据完整性、认证数据来源，并起到抗否认的作用。\n\n原理\n数字签名算法包含签名和验证两项操作，遵循私钥签名，公钥验证的方式。\n签名时要使用私钥和待签名数据，验证时则需要公钥、签名值和待签名数据，其核心算法主要是消息摘要算法。\n\n常用算法：\nRSA、DSA、ECDSA\n\n实现：RSA\n```\npublic class RSASignatureUtils {\n    \n    /**\n     * RSA算法名称。\n     */\n    private static final String ALGORITHM = \"RSA\";\n    \n    /**\n     * 对数据进行签名。\n     * \n     * @param data 待签名的数据。\n     * @param privateKey 私钥。\n     * @param signatureAlgorithm 数字签名算法。 参见{@link SignatureAlgorithm}\n     * @return  \n     *      数字签名。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在签名过程中发生错误。\n     */\n    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm){\n        //throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要签名的数据不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n            PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);\n            Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n            signature.initSign(key);\n            signature.update(data);\n            return signature.sign();\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n            throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n            throw new IllegalStateException(e);\n        }        \n    }\n    \n    /**\n     * 对数据的数字签名进行验证。\n     * \n     * @param data 待验证数据。\n     * @param publicKey 公钥。\n     * @param sign data的数据签名。\n     * @param signatureAlgorithm 数字签名算法。参见{@link SignatureAlgorithm}\n     * @return \n     *      签名是否有效。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在验证过程中发生错误。\n     * \n     */\n    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm){\n        // throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要验证的数据不能为null!\");\n        Assert.notNull(sign, \"数字签名不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n            PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);\n            Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n            signature.initVerify(key);\n            signature.update(data);\n            return signature.verify(sign);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n            throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n            throw new IllegalStateException(e);\n        }       \n    }\n    \n    /**\n     * RSA数字签名算法。 \n     * 这里只列举JDK6支持的算法。\n     */    \n    public static enum SignatureAlgorithm{\n        MD2WithRSA(\"MD2WithRSA\"),\n        MD5WithRSA(\"MD5WithRSA\"),\n        SHA1WithRSA(\"SHA1WithRSA\"),\n        SHA256WithRSA(\"SHA256WithRSA\"),\n        SHA384WithRSA(\"SHA384WithRSA\"),\n        SHA512WithRSA(\"SHA512WithRSA\");\n\n        /**\n         * 算法名称。\n         */\n        private String name;\n\n        private SignatureAlgorithm(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }        \n    }\n    \n    private RSASignatureUtils(){}\n}\n```\n\nDSA：\n```\npublic class DSASignatureUtils {\n    \n    /**\n     * DSA算法名称。\n     */\n    private static final String ALGORITHM = \"DSA\";\n    \n    /**\n     * JDK6支持的DSA算法默认密钥长度。\n     */\n    private static final int KEYSIZE = 1024;\n    \n    /**\n     * 生成一个密钥对Bean(包括公钥和私钥)。\n     * \n     * @param keySize 密钥长度(必须大于等于512且小于等于1024，同时是64的倍数。)\n     * @return 密钥对。\n     * @throws IllegalArgumentException 如果密钥长度不合法。\n     * @throws IllegalStateException 如果系统不支持DSA算法。\n     */\n    public static KeyPairBean generateKeyPair(int keySize){\n       //throw new UnsupportedOperationException();\n        Assert.isTrue(keySize >= 512 && keySize <= 1024 && keySize % 64 == 0,\n                \"密钥长度必须大于等512且小于等于1024，同时是64的倍数!\");\n        return EncryptionBase.generateKeyPair(ALGORITHM, keySize);       \n    }\n    \n    /**\n     * 生成一个密钥对Bean(包括公钥和私钥)。\n     * <p>使用默认密钥长度1024。\n     * \n     * @return  密钥对。\n     * @throws IllegalArgumentException 如果密钥长度不合法。\n     * @throws IllegalStateException 如果系统不支持DSA算法。\n     */\n    public static KeyPairBean generateKeyPair(){\n        // throw new UnsupportedOperationException();\n        return generateKeyPair(KEYSIZE);\n    }\n    \n    /**\n     * 对数据进行签名。\n     * \n     * @param data 待签名的数据。\n     * @param privateKey 私钥。\n     * @param signatureAlgorithm 数字签名算法。 参见{@link SignatureAlgorithm}\n     * @return \n     *      数字签名。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在签名过程中发生错误。\n     */\n    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm){\n        // throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要签名的数据不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n                PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);\n                Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n                signature.initSign(key);\n                signature.update(data);\n                return signature.sign();\n        } catch (NoSuchAlgorithmException e) {\n                throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n                throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n                throw new IllegalStateException(e);\n        }        \n    }\n    \n    /**\n     * 对数据的数字签名进行验证。\n     * \n     * @param data 待验证数据。\n     * @param publicKey 公钥。\n     * @param sign data的数据签名。\n     * @param signatureAlgorithm 数字签名算法。参见{@link SignatureAlgorithm}\n     * @return  \n     *      签名是否有效。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在验证过程中发生错误。\n     */\n    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm) throws SignatureException{\n        // throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要验证的数据不能为null!\");\n        Assert.notNull(sign, \"数字签名不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n                PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);\n                Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n                signature.initVerify(key);\n                signature.update(data);\n                return signature.verify(sign);\n        } catch (NoSuchAlgorithmException e) {\n                throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n                throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n                throw new IllegalStateException(e);\n        }        \n    }\n    \n    /**\n     * DSA数字签名算法。\n     * 这里只列举JDK6支持的算法。\n     */\n    public static enum SignatureAlgorithm{\n        SHA1WithDSA(\"SHA1WithDSA\");\n        /**\n         * 算法名称。\n         */\n        private String name;\n\n        private SignatureAlgorithm(String name) {\n                this.name = name;\n        }\n\n        public String getName() {\n                return name;\n        }        \n    }\n    \n    private DSASignatureUtils(){}\n}\n```\n\n>参考文章：\nhttp://www.cnblogs.com/jingmoxukong/p/5700906.html\nhttp://www.cnblogs.com/jingmoxukong/p/5688306.html\n《Core Java Volume2》\n《Java加密与解密技术》\n","source":"_posts/jca/04.md","raw":"---\ntitle: 消息摘要与数字签名(补充基础知识)\ncategories:\n- 源码阅读\n- security源码导读系列\ntags:\n- jdk源码系列\n- security源码导读系列\n---\n\n\n![vv](http://img2.tuicool.com/3mMjAf.jpg \"title\")\n<!-- more -->\n\n>导读：\n在读java.security 源码时，发现有很多不懂的地方，需要补充一下基础知识。这章节主要说说Java安全的**消息摘要** 和 **数字签名** 的内容。\n\n# 1、消息摘要\n## 定义\n他是有一个唯一对一个消息或文本的固定长度的值。它是由一个单向的Hash加密函数对消息进行作用而产生。如果消息在途中改变了，则接收者通过对收到消息的新产生的摘要与原摘要比较，就可知道消息是否被改变了。因此消息摘要保证了消息的完整性。消息摘要采用单向Hash 函数将需加密的明文\"摘要\"成一串密文，这一串密文亦称为数字指纹(Finger Print)。它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是\"真身\"的\"指纹\"了。\n类是MD5加密，明文摘要成密文，过程不可逆，但密文是唯一的，只需要对比密文的一致性，就能知道原来的明文有没有因为远程传输而改变。\n## 特点\n消息摘要具有以下特点：\n- 唯一性：数据只要有一点改变，那么再通过消息摘要算法得到的摘要也会发生变化。虽然理论上有可能会发生碰撞，但是概率极其低。\n- 不可逆：消息摘要算法的密文无法被解密。\n- 不需要密钥，可使用于分布式网络。\n- 无论输入的明文有多长，计算出来的消息摘要的长度总是固定的。\n\n原理\n消息摘要，其实就是将需要摘要的数据作为参数，经过哈希函数(Hash)的计算，得到的散列值。\n如下，给出常用的消息摘要工具类。\n```\npublic class MessageDigestUtils {        \n    /**\n     * 默认字节缓冲区大小。\n     */\n    private static final int DEFAULT_BUFFER_SIZE = 1024 * 8;\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。\n     */\n    public static byte[] getMD2Digest(byte[] input){\n        //throw new UnsupportedOperationException();\n        return getMessageDigest(input, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException  如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。\n     */\n    public static byte[] getMD2Digest(InputStream inputStream) throws IOException{\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(inputStream, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。\n     */\n    public static String getMD2StringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD2算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流。\n     * @return 字符串形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。\n     */\n    public static String getMD2StringDigest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD2);\n    }\n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。\n     */\n    public static byte[] getMD5Digest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.MD5); \n    }\n    \n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。\n     */\n    public static byte[] getMD5Digest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.MD5);\n    }\n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。\n     */\n    public static String getMD5StringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.MD5);\n    }\n    \n    /**\n     * 通过MD5算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。\n     */\n    public static String getMD5StringDigest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD5);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。\n     */\n    public static byte[] getSHADigest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。\n     */\n    public static byte[] getSHADigest(InputStream inputStream) throws IOException{\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。\n     */\n    public static String getSHAStringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-1(简称SHA)算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException  如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。\n     */\n    public static String getSHAStringDigest(InputStream inputStream) \n            throws IOException{\n       // throw new UnsupportedOperationException();\n       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据流\n     * @return  字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。\n     */\n    public static byte[] getSHA256Digest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字节数组形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。\n     */\n    public static byte[] getSHA256Digest(InputStream inputStream) \n            throws IOException{\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return  字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。\n     */\n    public static String getSHA256StringDigest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-256算法进行消息摘要\n     * \n     * @param inputStream\n     * @return \n     *      字符串形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。\n     */\n    public static String getSHA256StringDigest(InputStream inputStream) \n            throws IOException{\n        // throw new UnsupportedOperationException();\n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。\n     */\n    public static byte[] getSHA384Digest(byte[] input){\n       // throw new UnsupportedOperationException();\n       return getMessageDigest(input, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要。\n     * \n     * @param inputStream inputStream 要进行消息摘要的数据流。\n     * @return 字节数组形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。\n     */\n    public static byte[] getSHA384Digest(InputStream inputStream) throws IOException{\n       // throw new UnsupportedOperationException();\n       \t\treturn getMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。\n     */\n    public static String getSHA384StringDigest(byte[] input){\n       //throw new UnsupportedOperationException();\n       return getStringMessageDigest(input, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-384算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException  如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。\n     */\n    public static String getSHA384StringDigest(InputStream inputStream) \n            throws IOException{\n        //  throw new UnsupportedOperationException();  \n        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return  字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。\n     */\n    public static byte[] getSHA512Digest(byte[] input){\n        // throw new UnsupportedOperationException();\n        return getMessageDigest(input, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要。\n     * \n     * @param inputStream 要进行消息摘要的数据流。\n     * @return 字节数组形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。\n     */\n    public static byte[] getSHA512Digest(InputStream inputStream) \n            throws IOException{ \n        // throw new UnsupportedOperationException();\n        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。\n     */\n    public static String getSHA512StringDigest(byte [] input) {\n        //throw new UnsupportedOperationException();\n        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 通过SHA-512算法进行消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流\n     * @return 字符串形式的消息摘要\n     * @throws IOException 如果从数据流中读数据发生错误\n     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。\n     */\n    public static String getSHA512StringDigest(InputStream inputStream) \n            throws IOException {        \n       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);\n    }\n    \n    /**\n     * 获取消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @param alogrithm 消息摘要算法 @see {@link MessageDigestAlgorithm}\n     * @return 字节数组形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。\n     */\n    private static byte[] getMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) {\n        // throw new UnsupportedOperationException();\n        Assert.notNull(input, \"要进行消息摘要的数据不能为空!\");\n        Assert.notNull(algorithm, \"消息摘要算法不能为空!\");\n        try {\n                MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());\n                return messageDigest.digest(input);\n        } catch (NoSuchAlgorithmException e) {\n                throw new IllegalArgumentException(e);\n        }        \n    }\n    \n    /**\n     * 获取消息摘要\n     * \n     * @param input 要进行消息摘要的数据\n     * @param alogrithm 消息摘要算法 @see {@link  MessageDigestAlogrithm}\n     * @return 字符串形式的消息摘要\n     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。\n     */\n    private static String getStringMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) {\n        // throw new UnsupportedOperationException();\n        byte[] digest = getMessageDigest(input, algorithm);\n        return HexUtils.toHexString(digest);        \n    }\n    \n    /**\n     * 获取消息摘要。\n     * @param inputStream 要进行消息摘要的数据流。\n     * @param alogrithm 消息摘要算法 @see {@link MessageDigestAlogrithm }\n     * @return 字节数组形式的消息摘要。\n     * @throws IOException 如果从数据流中读取数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。\n     */\n    private static byte[] getMessageDigest (InputStream inputStream, MessageDigestAlgorithm algorithm) \n            throws IOException {\n        //throw new UnsupportedOperationException();\n        Assert.notNull(inputStream, \"要进行消息摘要的数据流不能为空!\");\n        Assert.notNull(algorithm, \"消息摘要算法不能为空!\");\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());\n            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n            int len = -1;\n            while ((len = inputStream.read(buffer)) > -1) {\n                messageDigest.update(buffer, 0, len);\n            }\n            return messageDigest.digest();\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        }        \n    }\n    \n    /**\n     * 获取消息摘要\n     * \n     * @param inputStream 要进行消息摘要的数据流。\n     * @param alogrithm 消息摘要算法 @see {@link MessageDigestAlogrithm}。\n     * @return 字符串形式的消息摘要。\n     * @throws IOException 如果从数据流中读数据发生错误。\n     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。\n     */\n    private static String getStringMessageDigest(InputStream inputStream, MessageDigestAlgorithm algorithm) \n            throws IOException {        \n        byte[] digest = getMessageDigest(inputStream, algorithm);\n        return HexUtils.toHexString(digest);\n    }\n    \n    private MessageDigestUtils() {} \n    \n    /**\n     * 消息摘要算法\n     * \n     * 这里只是列举JDK6以上（包含6）支持的算法\n     */\n    public static enum  MessageDigestAlgorithm {\n        \n        MD2(\"MD2\",128),\n        MD5(\"MD5\",128),\n        SHA(\"SHA-1\",160),\n        SHA256(\"SHA-256\",256),\n        SHA384(\"SHA-384\",384),\n        SHA512(\"SHA-512\",512);\n        \n        /**\n         * 算法名称\n         */\n        private String name;\n        \n        /**\n         * 摘要长度（单位：比特）\n         */\n        private int digestLength;\n\n        private  MessageDigestAlgorithm(String name,int digestLength) {\n            this.name = name;\n            this.digestLength = digestLength;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public int getDigestLength() {\n            return digestLength;\n        }                \n    }\n    \n}\n\n```\n\n## 常用算法\nMD2(\"MD2\",128),\nMD5(\"MD5\",128),\nSHA(\"SHA-1\",160),\nSHA256(\"SHA-256\",256),\nSHA384(\"SHA-384\",384),\nSHA512(\"SHA-512\",512);\n\n消息摘要算法包括MD(Message Digest，消息摘要算法)、SHA(Secure Hash Algorithm，安全散列算法)、MAC(Message AuthenticationCode，消息认证码算法)共3大系列，常用于验证数据的完整性，是数字签名算法的核心算法。\nMD5和SHA1分别是MD、SHA算法系列中最有代表性的算法。\n如今，MD5已被发现有许多漏洞，从而不再安全。SHA算法比MD算法的摘要长度更长，也更加安全。\n\n# 2、数字签名\n数字签名算法可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是非对称加密算法和消息摘要算法的结合体。\n\n## 算法简述\n**数字签名算法**可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是**非对称加密算法和消息摘要算法的结合体**。\n\n## 特点\n\n数字签名算法要求能够验证数据完整性、认证数据来源，并起到抗否认的作用。\n\n原理\n数字签名算法包含签名和验证两项操作，遵循私钥签名，公钥验证的方式。\n签名时要使用私钥和待签名数据，验证时则需要公钥、签名值和待签名数据，其核心算法主要是消息摘要算法。\n\n常用算法：\nRSA、DSA、ECDSA\n\n实现：RSA\n```\npublic class RSASignatureUtils {\n    \n    /**\n     * RSA算法名称。\n     */\n    private static final String ALGORITHM = \"RSA\";\n    \n    /**\n     * 对数据进行签名。\n     * \n     * @param data 待签名的数据。\n     * @param privateKey 私钥。\n     * @param signatureAlgorithm 数字签名算法。 参见{@link SignatureAlgorithm}\n     * @return  \n     *      数字签名。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在签名过程中发生错误。\n     */\n    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm){\n        //throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要签名的数据不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n            PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);\n            Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n            signature.initSign(key);\n            signature.update(data);\n            return signature.sign();\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n            throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n            throw new IllegalStateException(e);\n        }        \n    }\n    \n    /**\n     * 对数据的数字签名进行验证。\n     * \n     * @param data 待验证数据。\n     * @param publicKey 公钥。\n     * @param sign data的数据签名。\n     * @param signatureAlgorithm 数字签名算法。参见{@link SignatureAlgorithm}\n     * @return \n     *      签名是否有效。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在验证过程中发生错误。\n     * \n     */\n    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm){\n        // throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要验证的数据不能为null!\");\n        Assert.notNull(sign, \"数字签名不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n            PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);\n            Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n            signature.initVerify(key);\n            signature.update(data);\n            return signature.verify(sign);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n            throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n            throw new IllegalStateException(e);\n        }       \n    }\n    \n    /**\n     * RSA数字签名算法。 \n     * 这里只列举JDK6支持的算法。\n     */    \n    public static enum SignatureAlgorithm{\n        MD2WithRSA(\"MD2WithRSA\"),\n        MD5WithRSA(\"MD5WithRSA\"),\n        SHA1WithRSA(\"SHA1WithRSA\"),\n        SHA256WithRSA(\"SHA256WithRSA\"),\n        SHA384WithRSA(\"SHA384WithRSA\"),\n        SHA512WithRSA(\"SHA512WithRSA\");\n\n        /**\n         * 算法名称。\n         */\n        private String name;\n\n        private SignatureAlgorithm(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }        \n    }\n    \n    private RSASignatureUtils(){}\n}\n```\n\nDSA：\n```\npublic class DSASignatureUtils {\n    \n    /**\n     * DSA算法名称。\n     */\n    private static final String ALGORITHM = \"DSA\";\n    \n    /**\n     * JDK6支持的DSA算法默认密钥长度。\n     */\n    private static final int KEYSIZE = 1024;\n    \n    /**\n     * 生成一个密钥对Bean(包括公钥和私钥)。\n     * \n     * @param keySize 密钥长度(必须大于等于512且小于等于1024，同时是64的倍数。)\n     * @return 密钥对。\n     * @throws IllegalArgumentException 如果密钥长度不合法。\n     * @throws IllegalStateException 如果系统不支持DSA算法。\n     */\n    public static KeyPairBean generateKeyPair(int keySize){\n       //throw new UnsupportedOperationException();\n        Assert.isTrue(keySize >= 512 && keySize <= 1024 && keySize % 64 == 0,\n                \"密钥长度必须大于等512且小于等于1024，同时是64的倍数!\");\n        return EncryptionBase.generateKeyPair(ALGORITHM, keySize);       \n    }\n    \n    /**\n     * 生成一个密钥对Bean(包括公钥和私钥)。\n     * <p>使用默认密钥长度1024。\n     * \n     * @return  密钥对。\n     * @throws IllegalArgumentException 如果密钥长度不合法。\n     * @throws IllegalStateException 如果系统不支持DSA算法。\n     */\n    public static KeyPairBean generateKeyPair(){\n        // throw new UnsupportedOperationException();\n        return generateKeyPair(KEYSIZE);\n    }\n    \n    /**\n     * 对数据进行签名。\n     * \n     * @param data 待签名的数据。\n     * @param privateKey 私钥。\n     * @param signatureAlgorithm 数字签名算法。 参见{@link SignatureAlgorithm}\n     * @return \n     *      数字签名。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在签名过程中发生错误。\n     */\n    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm){\n        // throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要签名的数据不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n                PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);\n                Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n                signature.initSign(key);\n                signature.update(data);\n                return signature.sign();\n        } catch (NoSuchAlgorithmException e) {\n                throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n                throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n                throw new IllegalStateException(e);\n        }        \n    }\n    \n    /**\n     * 对数据的数字签名进行验证。\n     * \n     * @param data 待验证数据。\n     * @param publicKey 公钥。\n     * @param sign data的数据签名。\n     * @param signatureAlgorithm 数字签名算法。参见{@link SignatureAlgorithm}\n     * @return  \n     *      签名是否有效。\n     * @throws IllegalArgumentException 如果参数不合法。\n     * @throws IllegalStateException 如果在验证过程中发生错误。\n     */\n    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm) throws SignatureException{\n        // throw new UnsupportedOperationException();\n        Assert.notNull(data, \"要验证的数据不能为null!\");\n        Assert.notNull(sign, \"数字签名不能为null!\");\n        Assert.notNull(signatureAlgorithm, \"数字签名算法不能为null!\");\n        try {\n                PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);\n                Signature signature = Signature.getInstance(signatureAlgorithm.getName());\n                signature.initVerify(key);\n                signature.update(data);\n                return signature.verify(sign);\n        } catch (NoSuchAlgorithmException e) {\n                throw new IllegalArgumentException(e);\n        } catch (InvalidKeyException e) {\n                throw new IllegalArgumentException(e);\n        } catch (SignatureException e) {\n                throw new IllegalStateException(e);\n        }        \n    }\n    \n    /**\n     * DSA数字签名算法。\n     * 这里只列举JDK6支持的算法。\n     */\n    public static enum SignatureAlgorithm{\n        SHA1WithDSA(\"SHA1WithDSA\");\n        /**\n         * 算法名称。\n         */\n        private String name;\n\n        private SignatureAlgorithm(String name) {\n                this.name = name;\n        }\n\n        public String getName() {\n                return name;\n        }        \n    }\n    \n    private DSASignatureUtils(){}\n}\n```\n\n>参考文章：\nhttp://www.cnblogs.com/jingmoxukong/p/5700906.html\nhttp://www.cnblogs.com/jingmoxukong/p/5688306.html\n《Core Java Volume2》\n《Java加密与解密技术》\n","slug":"jca/04","published":1,"date":"2016-11-21T13:59:09.490Z","updated":"2016-11-27T11:46:55.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp80e000ac88q76cat0mi","content":"<p><img src=\"http://img2.tuicool.com/3mMjAf.jpg\" alt=\"vv\" title=\"title\"><br><a id=\"more\"></a></p>\n<blockquote>\n<p>导读：<br>在读java.security 源码时，发现有很多不懂的地方，需要补充一下基础知识。这章节主要说说Java安全的<strong>消息摘要</strong> 和 <strong>数字签名</strong> 的内容。</p>\n</blockquote>\n<h1 id=\"1、消息摘要\"><a href=\"#1、消息摘要\" class=\"headerlink\" title=\"1、消息摘要\"></a>1、消息摘要</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>他是有一个唯一对一个消息或文本的固定长度的值。它是由一个单向的Hash加密函数对消息进行作用而产生。如果消息在途中改变了，则接收者通过对收到消息的新产生的摘要与原摘要比较，就可知道消息是否被改变了。因此消息摘要保证了消息的完整性。消息摘要采用单向Hash 函数将需加密的明文”摘要”成一串密文，这一串密文亦称为数字指纹(Finger Print)。它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是”真身”的”指纹”了。<br>类是MD5加密，明文摘要成密文，过程不可逆，但密文是唯一的，只需要对比密文的一致性，就能知道原来的明文有没有因为远程传输而改变。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>消息摘要具有以下特点：</p>\n<ul>\n<li>唯一性：数据只要有一点改变，那么再通过消息摘要算法得到的摘要也会发生变化。虽然理论上有可能会发生碰撞，但是概率极其低。</li>\n<li>不可逆：消息摘要算法的密文无法被解密。</li>\n<li>不需要密钥，可使用于分布式网络。</li>\n<li>无论输入的明文有多长，计算出来的消息摘要的长度总是固定的。</li>\n</ul>\n<p>原理<br>消息摘要，其实就是将需要摘要的数据作为参数，经过哈希函数(Hash)的计算，得到的散列值。<br>如下，给出常用的消息摘要工具类。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MessageDigestUtils &#123;        </div><div class=\"line\">    /**</div><div class=\"line\">     * 默认字节缓冲区大小。</div><div class=\"line\">     */</div><div class=\"line\">    private static final int DEFAULT_BUFFER_SIZE = 1024 * 8;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD2Digest(byte[] input)&#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(input, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException  如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD2Digest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(inputStream, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD2StringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @return 字符串形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD2StringDigest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD5Digest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.MD5); </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD5Digest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.MD5);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD5StringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.MD5);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD5StringDigest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD5);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHADigest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHADigest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHAStringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException  如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHAStringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据流</div><div class=\"line\">     * @return  字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA256Digest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA256Digest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return  字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA256StringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream</div><div class=\"line\">     * @return </div><div class=\"line\">     *      字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA256StringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA384Digest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要。</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @return 字节数组形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA384Digest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       \t\treturn getMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA384StringDigest(byte[] input)&#123;</div><div class=\"line\">       //throw new UnsupportedOperationException();</div><div class=\"line\">       return getStringMessageDigest(input, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException  如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA384StringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">        //  throw new UnsupportedOperationException();  </div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return  字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA512Digest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(input, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要。</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @return 字节数组形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA512Digest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123; </div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA512StringDigest(byte [] input) &#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA512StringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException &#123;        </div><div class=\"line\">       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlgorithm&#125;</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static byte[] getMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(input, &quot;要进行消息摘要的数据不能为空!&quot;);</div><div class=\"line\">        Assert.notNull(algorithm, &quot;消息摘要算法不能为空!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">                MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());</div><div class=\"line\">                return messageDigest.digest(input);</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link  MessageDigestAlogrithm&#125;</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static String getStringMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        byte[] digest = getMessageDigest(input, algorithm);</div><div class=\"line\">        return HexUtils.toHexString(digest);        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要。</div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlogrithm &#125;</div><div class=\"line\">     * @return 字节数组形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读取数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static byte[] getMessageDigest (InputStream inputStream, MessageDigestAlgorithm algorithm) </div><div class=\"line\">            throws IOException &#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(inputStream, &quot;要进行消息摘要的数据流不能为空!&quot;);</div><div class=\"line\">        Assert.notNull(algorithm, &quot;消息摘要算法不能为空!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());</div><div class=\"line\">            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];</div><div class=\"line\">            int len = -1;</div><div class=\"line\">            while ((len = inputStream.read(buffer)) &gt; -1) &#123;</div><div class=\"line\">                messageDigest.update(buffer, 0, len);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return messageDigest.digest();</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlogrithm&#125;。</div><div class=\"line\">     * @return 字符串形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static String getStringMessageDigest(InputStream inputStream, MessageDigestAlgorithm algorithm) </div><div class=\"line\">            throws IOException &#123;        </div><div class=\"line\">        byte[] digest = getMessageDigest(inputStream, algorithm);</div><div class=\"line\">        return HexUtils.toHexString(digest);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    private MessageDigestUtils() &#123;&#125; </div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 消息摘要算法</div><div class=\"line\">     * </div><div class=\"line\">     * 这里只是列举JDK6以上（包含6）支持的算法</div><div class=\"line\">     */</div><div class=\"line\">    public static enum  MessageDigestAlgorithm &#123;</div><div class=\"line\">        </div><div class=\"line\">        MD2(&quot;MD2&quot;,128),</div><div class=\"line\">        MD5(&quot;MD5&quot;,128),</div><div class=\"line\">        SHA(&quot;SHA-1&quot;,160),</div><div class=\"line\">        SHA256(&quot;SHA-256&quot;,256),</div><div class=\"line\">        SHA384(&quot;SHA-384&quot;,384),</div><div class=\"line\">        SHA512(&quot;SHA-512&quot;,512);</div><div class=\"line\">        </div><div class=\"line\">        /**</div><div class=\"line\">         * 算法名称</div><div class=\"line\">         */</div><div class=\"line\">        private String name;</div><div class=\"line\">        </div><div class=\"line\">        /**</div><div class=\"line\">         * 摘要长度（单位：比特）</div><div class=\"line\">         */</div><div class=\"line\">        private int digestLength;</div><div class=\"line\"></div><div class=\"line\">        private  MessageDigestAlgorithm(String name,int digestLength) &#123;</div><div class=\"line\">            this.name = name;</div><div class=\"line\">            this.digestLength = digestLength;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getName() &#123;</div><div class=\"line\">            return name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public int getDigestLength() &#123;</div><div class=\"line\">            return digestLength;</div><div class=\"line\">        &#125;                </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"常用算法\"><a href=\"#常用算法\" class=\"headerlink\" title=\"常用算法\"></a>常用算法</h2><p>MD2(“MD2”,128),<br>MD5(“MD5”,128),<br>SHA(“SHA-1”,160),<br>SHA256(“SHA-256”,256),<br>SHA384(“SHA-384”,384),<br>SHA512(“SHA-512”,512);</p>\n<p>消息摘要算法包括MD(Message Digest，消息摘要算法)、SHA(Secure Hash Algorithm，安全散列算法)、MAC(Message AuthenticationCode，消息认证码算法)共3大系列，常用于验证数据的完整性，是数字签名算法的核心算法。<br>MD5和SHA1分别是MD、SHA算法系列中最有代表性的算法。<br>如今，MD5已被发现有许多漏洞，从而不再安全。SHA算法比MD算法的摘要长度更长，也更加安全。</p>\n<h1 id=\"2、数字签名\"><a href=\"#2、数字签名\" class=\"headerlink\" title=\"2、数字签名\"></a>2、数字签名</h1><p>数字签名算法可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是非对称加密算法和消息摘要算法的结合体。</p>\n<h2 id=\"算法简述\"><a href=\"#算法简述\" class=\"headerlink\" title=\"算法简述\"></a>算法简述</h2><p><strong>数字签名算法</strong>可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是<strong>非对称加密算法和消息摘要算法的结合体</strong>。</p>\n<h2 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>数字签名算法要求能够验证数据完整性、认证数据来源，并起到抗否认的作用。</p>\n<p>原理<br>数字签名算法包含签名和验证两项操作，遵循私钥签名，公钥验证的方式。<br>签名时要使用私钥和待签名数据，验证时则需要公钥、签名值和待签名数据，其核心算法主要是消息摘要算法。</p>\n<p>常用算法：<br>RSA、DSA、ECDSA</p>\n<p>实现：RSA<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RSASignatureUtils &#123;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * RSA算法名称。</div><div class=\"line\">     */</div><div class=\"line\">    private static final String ALGORITHM = &quot;RSA&quot;;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据进行签名。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待签名的数据。</div><div class=\"line\">     * @param privateKey 私钥。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。 参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return  </div><div class=\"line\">     *      数字签名。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在签名过程中发生错误。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要签名的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);</div><div class=\"line\">            Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">            signature.initSign(key);</div><div class=\"line\">            signature.update(data);</div><div class=\"line\">            return signature.sign();</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">            throw new IllegalStateException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据的数字签名进行验证。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待验证数据。</div><div class=\"line\">     * @param publicKey 公钥。</div><div class=\"line\">     * @param sign data的数据签名。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return </div><div class=\"line\">     *      签名是否有效。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在验证过程中发生错误。</div><div class=\"line\">     * </div><div class=\"line\">     */</div><div class=\"line\">    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要验证的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(sign, &quot;数字签名不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);</div><div class=\"line\">            Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">            signature.initVerify(key);</div><div class=\"line\">            signature.update(data);</div><div class=\"line\">            return signature.verify(sign);</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">            throw new IllegalStateException(e);</div><div class=\"line\">        &#125;       </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * RSA数字签名算法。 </div><div class=\"line\">     * 这里只列举JDK6支持的算法。</div><div class=\"line\">     */    </div><div class=\"line\">    public static enum SignatureAlgorithm&#123;</div><div class=\"line\">        MD2WithRSA(&quot;MD2WithRSA&quot;),</div><div class=\"line\">        MD5WithRSA(&quot;MD5WithRSA&quot;),</div><div class=\"line\">        SHA1WithRSA(&quot;SHA1WithRSA&quot;),</div><div class=\"line\">        SHA256WithRSA(&quot;SHA256WithRSA&quot;),</div><div class=\"line\">        SHA384WithRSA(&quot;SHA384WithRSA&quot;),</div><div class=\"line\">        SHA512WithRSA(&quot;SHA512WithRSA&quot;);</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * 算法名称。</div><div class=\"line\">         */</div><div class=\"line\">        private String name;</div><div class=\"line\"></div><div class=\"line\">        private SignatureAlgorithm(String name) &#123;</div><div class=\"line\">            this.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getName() &#123;</div><div class=\"line\">            return name;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    private RSASignatureUtils()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DSA：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DSASignatureUtils &#123;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * DSA算法名称。</div><div class=\"line\">     */</div><div class=\"line\">    private static final String ALGORITHM = &quot;DSA&quot;;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * JDK6支持的DSA算法默认密钥长度。</div><div class=\"line\">     */</div><div class=\"line\">    private static final int KEYSIZE = 1024;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 生成一个密钥对Bean(包括公钥和私钥)。</div><div class=\"line\">     * </div><div class=\"line\">     * @param keySize 密钥长度(必须大于等于512且小于等于1024，同时是64的倍数。)</div><div class=\"line\">     * @return 密钥对。</div><div class=\"line\">     * @throws IllegalArgumentException 如果密钥长度不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果系统不支持DSA算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static KeyPairBean generateKeyPair(int keySize)&#123;</div><div class=\"line\">       //throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.isTrue(keySize &gt;= 512 &amp;&amp; keySize &lt;= 1024 &amp;&amp; keySize % 64 == 0,</div><div class=\"line\">                &quot;密钥长度必须大于等512且小于等于1024，同时是64的倍数!&quot;);</div><div class=\"line\">        return EncryptionBase.generateKeyPair(ALGORITHM, keySize);       </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 生成一个密钥对Bean(包括公钥和私钥)。</div><div class=\"line\">     * &lt;p&gt;使用默认密钥长度1024。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  密钥对。</div><div class=\"line\">     * @throws IllegalArgumentException 如果密钥长度不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果系统不支持DSA算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static KeyPairBean generateKeyPair()&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return generateKeyPair(KEYSIZE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据进行签名。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待签名的数据。</div><div class=\"line\">     * @param privateKey 私钥。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。 参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return </div><div class=\"line\">     *      数字签名。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在签名过程中发生错误。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要签名的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">                PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);</div><div class=\"line\">                Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">                signature.initSign(key);</div><div class=\"line\">                signature.update(data);</div><div class=\"line\">                return signature.sign();</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">                throw new IllegalStateException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据的数字签名进行验证。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待验证数据。</div><div class=\"line\">     * @param publicKey 公钥。</div><div class=\"line\">     * @param sign data的数据签名。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return  </div><div class=\"line\">     *      签名是否有效。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在验证过程中发生错误。</div><div class=\"line\">     */</div><div class=\"line\">    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm) throws SignatureException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要验证的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(sign, &quot;数字签名不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">                PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);</div><div class=\"line\">                Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">                signature.initVerify(key);</div><div class=\"line\">                signature.update(data);</div><div class=\"line\">                return signature.verify(sign);</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">                throw new IllegalStateException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * DSA数字签名算法。</div><div class=\"line\">     * 这里只列举JDK6支持的算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static enum SignatureAlgorithm&#123;</div><div class=\"line\">        SHA1WithDSA(&quot;SHA1WithDSA&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 算法名称。</div><div class=\"line\">         */</div><div class=\"line\">        private String name;</div><div class=\"line\"></div><div class=\"line\">        private SignatureAlgorithm(String name) &#123;</div><div class=\"line\">                this.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getName() &#123;</div><div class=\"line\">                return name;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    private DSASignatureUtils()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5700906.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jingmoxukong/p/5700906.html</a><br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5688306.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jingmoxukong/p/5688306.html</a><br>《Core Java Volume2》<br>《Java加密与解密技术》</p>\n</blockquote>\n","excerpt":"<p><img src=\"http://img2.tuicool.com/3mMjAf.jpg\" alt=\"vv\" title=\"title\"><br>","more":"</p>\n<blockquote>\n<p>导读：<br>在读java.security 源码时，发现有很多不懂的地方，需要补充一下基础知识。这章节主要说说Java安全的<strong>消息摘要</strong> 和 <strong>数字签名</strong> 的内容。</p>\n</blockquote>\n<h1 id=\"1、消息摘要\"><a href=\"#1、消息摘要\" class=\"headerlink\" title=\"1、消息摘要\"></a>1、消息摘要</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>他是有一个唯一对一个消息或文本的固定长度的值。它是由一个单向的Hash加密函数对消息进行作用而产生。如果消息在途中改变了，则接收者通过对收到消息的新产生的摘要与原摘要比较，就可知道消息是否被改变了。因此消息摘要保证了消息的完整性。消息摘要采用单向Hash 函数将需加密的明文”摘要”成一串密文，这一串密文亦称为数字指纹(Finger Print)。它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是”真身”的”指纹”了。<br>类是MD5加密，明文摘要成密文，过程不可逆，但密文是唯一的，只需要对比密文的一致性，就能知道原来的明文有没有因为远程传输而改变。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>消息摘要具有以下特点：</p>\n<ul>\n<li>唯一性：数据只要有一点改变，那么再通过消息摘要算法得到的摘要也会发生变化。虽然理论上有可能会发生碰撞，但是概率极其低。</li>\n<li>不可逆：消息摘要算法的密文无法被解密。</li>\n<li>不需要密钥，可使用于分布式网络。</li>\n<li>无论输入的明文有多长，计算出来的消息摘要的长度总是固定的。</li>\n</ul>\n<p>原理<br>消息摘要，其实就是将需要摘要的数据作为参数，经过哈希函数(Hash)的计算，得到的散列值。<br>如下，给出常用的消息摘要工具类。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div><div class=\"line\">413</div><div class=\"line\">414</div><div class=\"line\">415</div><div class=\"line\">416</div><div class=\"line\">417</div><div class=\"line\">418</div><div class=\"line\">419</div><div class=\"line\">420</div><div class=\"line\">421</div><div class=\"line\">422</div><div class=\"line\">423</div><div class=\"line\">424</div><div class=\"line\">425</div><div class=\"line\">426</div><div class=\"line\">427</div><div class=\"line\">428</div><div class=\"line\">429</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MessageDigestUtils &#123;        </div><div class=\"line\">    /**</div><div class=\"line\">     * 默认字节缓冲区大小。</div><div class=\"line\">     */</div><div class=\"line\">    private static final int DEFAULT_BUFFER_SIZE = 1024 * 8;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD2Digest(byte[] input)&#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(input, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException  如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD2Digest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(inputStream, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD2StringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD2算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @return 字符串形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD2StringDigest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD2);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD5Digest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.MD5); </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getMD5Digest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.MD5);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD5StringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.MD5);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过MD5算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getMD5StringDigest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD5);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHADigest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHADigest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHAStringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException  如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHAStringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据流</div><div class=\"line\">     * @return  字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA256Digest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA256Digest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return  字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA256StringDigest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-256算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream</div><div class=\"line\">     * @return </div><div class=\"line\">     *      字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA256StringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA384Digest(byte[] input)&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       return getMessageDigest(input, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要。</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @return 字节数组形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA384Digest(InputStream inputStream) throws IOException&#123;</div><div class=\"line\">       // throw new UnsupportedOperationException();</div><div class=\"line\">       \t\treturn getMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA384StringDigest(byte[] input)&#123;</div><div class=\"line\">       //throw new UnsupportedOperationException();</div><div class=\"line\">       return getStringMessageDigest(input, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-384算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException  如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA384StringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123;</div><div class=\"line\">        //  throw new UnsupportedOperationException();  </div><div class=\"line\">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return  字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA512Digest(byte[] input)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(input, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要。</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @return 字节数组形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] getSHA512Digest(InputStream inputStream) </div><div class=\"line\">            throws IOException&#123; </div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA512StringDigest(byte [] input) &#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 通过SHA-512算法进行消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getSHA512StringDigest(InputStream inputStream) </div><div class=\"line\">            throws IOException &#123;        </div><div class=\"line\">       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlgorithm&#125;</div><div class=\"line\">     * @return 字节数组形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static byte[] getMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(input, &quot;要进行消息摘要的数据不能为空!&quot;);</div><div class=\"line\">        Assert.notNull(algorithm, &quot;消息摘要算法不能为空!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">                MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());</div><div class=\"line\">                return messageDigest.digest(input);</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param input 要进行消息摘要的数据</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link  MessageDigestAlogrithm&#125;</div><div class=\"line\">     * @return 字符串形式的消息摘要</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static String getStringMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        byte[] digest = getMessageDigest(input, algorithm);</div><div class=\"line\">        return HexUtils.toHexString(digest);        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要。</div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlogrithm &#125;</div><div class=\"line\">     * @return 字节数组形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读取数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static byte[] getMessageDigest (InputStream inputStream, MessageDigestAlgorithm algorithm) </div><div class=\"line\">            throws IOException &#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(inputStream, &quot;要进行消息摘要的数据流不能为空!&quot;);</div><div class=\"line\">        Assert.notNull(algorithm, &quot;消息摘要算法不能为空!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());</div><div class=\"line\">            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];</div><div class=\"line\">            int len = -1;</div><div class=\"line\">            while ((len = inputStream.read(buffer)) &gt; -1) &#123;</div><div class=\"line\">                messageDigest.update(buffer, 0, len);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return messageDigest.digest();</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取消息摘要</div><div class=\"line\">     * </div><div class=\"line\">     * @param inputStream 要进行消息摘要的数据流。</div><div class=\"line\">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlogrithm&#125;。</div><div class=\"line\">     * @return 字符串形式的消息摘要。</div><div class=\"line\">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。</div><div class=\"line\">     */</div><div class=\"line\">    private static String getStringMessageDigest(InputStream inputStream, MessageDigestAlgorithm algorithm) </div><div class=\"line\">            throws IOException &#123;        </div><div class=\"line\">        byte[] digest = getMessageDigest(inputStream, algorithm);</div><div class=\"line\">        return HexUtils.toHexString(digest);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    private MessageDigestUtils() &#123;&#125; </div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 消息摘要算法</div><div class=\"line\">     * </div><div class=\"line\">     * 这里只是列举JDK6以上（包含6）支持的算法</div><div class=\"line\">     */</div><div class=\"line\">    public static enum  MessageDigestAlgorithm &#123;</div><div class=\"line\">        </div><div class=\"line\">        MD2(&quot;MD2&quot;,128),</div><div class=\"line\">        MD5(&quot;MD5&quot;,128),</div><div class=\"line\">        SHA(&quot;SHA-1&quot;,160),</div><div class=\"line\">        SHA256(&quot;SHA-256&quot;,256),</div><div class=\"line\">        SHA384(&quot;SHA-384&quot;,384),</div><div class=\"line\">        SHA512(&quot;SHA-512&quot;,512);</div><div class=\"line\">        </div><div class=\"line\">        /**</div><div class=\"line\">         * 算法名称</div><div class=\"line\">         */</div><div class=\"line\">        private String name;</div><div class=\"line\">        </div><div class=\"line\">        /**</div><div class=\"line\">         * 摘要长度（单位：比特）</div><div class=\"line\">         */</div><div class=\"line\">        private int digestLength;</div><div class=\"line\"></div><div class=\"line\">        private  MessageDigestAlgorithm(String name,int digestLength) &#123;</div><div class=\"line\">            this.name = name;</div><div class=\"line\">            this.digestLength = digestLength;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getName() &#123;</div><div class=\"line\">            return name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public int getDigestLength() &#123;</div><div class=\"line\">            return digestLength;</div><div class=\"line\">        &#125;                </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"常用算法\"><a href=\"#常用算法\" class=\"headerlink\" title=\"常用算法\"></a>常用算法</h2><p>MD2(“MD2”,128),<br>MD5(“MD5”,128),<br>SHA(“SHA-1”,160),<br>SHA256(“SHA-256”,256),<br>SHA384(“SHA-384”,384),<br>SHA512(“SHA-512”,512);</p>\n<p>消息摘要算法包括MD(Message Digest，消息摘要算法)、SHA(Secure Hash Algorithm，安全散列算法)、MAC(Message AuthenticationCode，消息认证码算法)共3大系列，常用于验证数据的完整性，是数字签名算法的核心算法。<br>MD5和SHA1分别是MD、SHA算法系列中最有代表性的算法。<br>如今，MD5已被发现有许多漏洞，从而不再安全。SHA算法比MD算法的摘要长度更长，也更加安全。</p>\n<h1 id=\"2、数字签名\"><a href=\"#2、数字签名\" class=\"headerlink\" title=\"2、数字签名\"></a>2、数字签名</h1><p>数字签名算法可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是非对称加密算法和消息摘要算法的结合体。</p>\n<h2 id=\"算法简述\"><a href=\"#算法简述\" class=\"headerlink\" title=\"算法简述\"></a>算法简述</h2><p><strong>数字签名算法</strong>可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是<strong>非对称加密算法和消息摘要算法的结合体</strong>。</p>\n<h2 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>数字签名算法要求能够验证数据完整性、认证数据来源，并起到抗否认的作用。</p>\n<p>原理<br>数字签名算法包含签名和验证两项操作，遵循私钥签名，公钥验证的方式。<br>签名时要使用私钥和待签名数据，验证时则需要公钥、签名值和待签名数据，其核心算法主要是消息摘要算法。</p>\n<p>常用算法：<br>RSA、DSA、ECDSA</p>\n<p>实现：RSA<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RSASignatureUtils &#123;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * RSA算法名称。</div><div class=\"line\">     */</div><div class=\"line\">    private static final String ALGORITHM = &quot;RSA&quot;;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据进行签名。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待签名的数据。</div><div class=\"line\">     * @param privateKey 私钥。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。 参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return  </div><div class=\"line\">     *      数字签名。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在签名过程中发生错误。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class=\"line\">        //throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要签名的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);</div><div class=\"line\">            Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">            signature.initSign(key);</div><div class=\"line\">            signature.update(data);</div><div class=\"line\">            return signature.sign();</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">            throw new IllegalStateException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据的数字签名进行验证。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待验证数据。</div><div class=\"line\">     * @param publicKey 公钥。</div><div class=\"line\">     * @param sign data的数据签名。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return </div><div class=\"line\">     *      签名是否有效。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在验证过程中发生错误。</div><div class=\"line\">     * </div><div class=\"line\">     */</div><div class=\"line\">    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要验证的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(sign, &quot;数字签名不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">            PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);</div><div class=\"line\">            Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">            signature.initVerify(key);</div><div class=\"line\">            signature.update(data);</div><div class=\"line\">            return signature.verify(sign);</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">            throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">            throw new IllegalStateException(e);</div><div class=\"line\">        &#125;       </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * RSA数字签名算法。 </div><div class=\"line\">     * 这里只列举JDK6支持的算法。</div><div class=\"line\">     */    </div><div class=\"line\">    public static enum SignatureAlgorithm&#123;</div><div class=\"line\">        MD2WithRSA(&quot;MD2WithRSA&quot;),</div><div class=\"line\">        MD5WithRSA(&quot;MD5WithRSA&quot;),</div><div class=\"line\">        SHA1WithRSA(&quot;SHA1WithRSA&quot;),</div><div class=\"line\">        SHA256WithRSA(&quot;SHA256WithRSA&quot;),</div><div class=\"line\">        SHA384WithRSA(&quot;SHA384WithRSA&quot;),</div><div class=\"line\">        SHA512WithRSA(&quot;SHA512WithRSA&quot;);</div><div class=\"line\"></div><div class=\"line\">        /**</div><div class=\"line\">         * 算法名称。</div><div class=\"line\">         */</div><div class=\"line\">        private String name;</div><div class=\"line\"></div><div class=\"line\">        private SignatureAlgorithm(String name) &#123;</div><div class=\"line\">            this.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getName() &#123;</div><div class=\"line\">            return name;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    private RSASignatureUtils()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DSA：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DSASignatureUtils &#123;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * DSA算法名称。</div><div class=\"line\">     */</div><div class=\"line\">    private static final String ALGORITHM = &quot;DSA&quot;;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * JDK6支持的DSA算法默认密钥长度。</div><div class=\"line\">     */</div><div class=\"line\">    private static final int KEYSIZE = 1024;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 生成一个密钥对Bean(包括公钥和私钥)。</div><div class=\"line\">     * </div><div class=\"line\">     * @param keySize 密钥长度(必须大于等于512且小于等于1024，同时是64的倍数。)</div><div class=\"line\">     * @return 密钥对。</div><div class=\"line\">     * @throws IllegalArgumentException 如果密钥长度不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果系统不支持DSA算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static KeyPairBean generateKeyPair(int keySize)&#123;</div><div class=\"line\">       //throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.isTrue(keySize &gt;= 512 &amp;&amp; keySize &lt;= 1024 &amp;&amp; keySize % 64 == 0,</div><div class=\"line\">                &quot;密钥长度必须大于等512且小于等于1024，同时是64的倍数!&quot;);</div><div class=\"line\">        return EncryptionBase.generateKeyPair(ALGORITHM, keySize);       </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 生成一个密钥对Bean(包括公钥和私钥)。</div><div class=\"line\">     * &lt;p&gt;使用默认密钥长度1024。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  密钥对。</div><div class=\"line\">     * @throws IllegalArgumentException 如果密钥长度不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果系统不支持DSA算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static KeyPairBean generateKeyPair()&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        return generateKeyPair(KEYSIZE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据进行签名。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待签名的数据。</div><div class=\"line\">     * @param privateKey 私钥。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。 参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return </div><div class=\"line\">     *      数字签名。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在签名过程中发生错误。</div><div class=\"line\">     */</div><div class=\"line\">    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要签名的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">                PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);</div><div class=\"line\">                Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">                signature.initSign(key);</div><div class=\"line\">                signature.update(data);</div><div class=\"line\">                return signature.sign();</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">                throw new IllegalStateException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 对数据的数字签名进行验证。</div><div class=\"line\">     * </div><div class=\"line\">     * @param data 待验证数据。</div><div class=\"line\">     * @param publicKey 公钥。</div><div class=\"line\">     * @param sign data的数据签名。</div><div class=\"line\">     * @param signatureAlgorithm 数字签名算法。参见&#123;@link SignatureAlgorithm&#125;</div><div class=\"line\">     * @return  </div><div class=\"line\">     *      签名是否有效。</div><div class=\"line\">     * @throws IllegalArgumentException 如果参数不合法。</div><div class=\"line\">     * @throws IllegalStateException 如果在验证过程中发生错误。</div><div class=\"line\">     */</div><div class=\"line\">    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm) throws SignatureException&#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();</div><div class=\"line\">        Assert.notNull(data, &quot;要验证的数据不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(sign, &quot;数字签名不能为null!&quot;);</div><div class=\"line\">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class=\"line\">        try &#123;</div><div class=\"line\">                PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);</div><div class=\"line\">                Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class=\"line\">                signature.initVerify(key);</div><div class=\"line\">                signature.update(data);</div><div class=\"line\">                return signature.verify(sign);</div><div class=\"line\">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (InvalidKeyException e) &#123;</div><div class=\"line\">                throw new IllegalArgumentException(e);</div><div class=\"line\">        &#125; catch (SignatureException e) &#123;</div><div class=\"line\">                throw new IllegalStateException(e);</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * DSA数字签名算法。</div><div class=\"line\">     * 这里只列举JDK6支持的算法。</div><div class=\"line\">     */</div><div class=\"line\">    public static enum SignatureAlgorithm&#123;</div><div class=\"line\">        SHA1WithDSA(&quot;SHA1WithDSA&quot;);</div><div class=\"line\">        /**</div><div class=\"line\">         * 算法名称。</div><div class=\"line\">         */</div><div class=\"line\">        private String name;</div><div class=\"line\"></div><div class=\"line\">        private SignatureAlgorithm(String name) &#123;</div><div class=\"line\">                this.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public String getName() &#123;</div><div class=\"line\">                return name;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    private DSASignatureUtils()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5700906.html\">http://www.cnblogs.com/jingmoxukong/p/5700906.html</a><br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5688306.html\">http://www.cnblogs.com/jingmoxukong/p/5688306.html</a><br>《Core Java Volume2》<br>《Java加密与解密技术》</p>\n</blockquote>"},{"title":"菜名：红烧冬瓜","_content":"\n>导读：\n本人除了是个写字的，还是一个厨艺爱好者，我们写代码的除了关心代码外，我们更加应该关系我们的健康，毕竟这是一个高风险职业啊。\nso,我就写了这个饮食健康的系列，show show 我自己的拿手好菜。\n本章，拿手好菜，**红烧冬瓜**\n\n# 原料\n- 冬瓜500克  5块钱\n- 葱油40克   142ml -9.90块， \n- 花生油35克 \n- 甜酱25克\n- 酱油25克\n- 白糖10克\n- 精盐3克\n- 味精2克\n- 葱 姜末 各一点\n- 水淀粉20克\n- 高汤100毫升\n\n\n# 做法\n\n步骤一：\n\n到超市去买个冬瓜，如何挑冬瓜？如今的农家冬瓜基本都是藏过的，可以挑那种硬皮的比较好。\n\n步骤二：\n将冬瓜去皮，去子瓢洗净，切成3厘米长（这个切的参不多就行，别计较），1.2厘米厚，2厘米宽的块状物。\n步骤三：\n起油锅，锅内加花生油烧热，下入葱 姜末（前面已经切好），甜酱，再放入冬瓜，酱油，白糖，精盐，味精（个人不喜欢味精没放），高汤（我用的是热米水，可以是开水），开后转微火，烧至冬瓜软烂时，用钩勺淋上葱油，搅匀，呈上盘子就可以。\n\n\n# 最终的作品：\n![sss](http://ali.xinshipu.cn/20110610/original/1307684166819.jpg \"title\")\n\n\n\n","source":"_posts/cooker/01.md","raw":"---\ntitle: 菜名：红烧冬瓜\ncategories:\n- 爱上烧菜\n- 熟食\ntags:\n- 饮食健康\n- 熟食\n- 冬瓜\n- 拿手菜\n---\n\n>导读：\n本人除了是个写字的，还是一个厨艺爱好者，我们写代码的除了关心代码外，我们更加应该关系我们的健康，毕竟这是一个高风险职业啊。\nso,我就写了这个饮食健康的系列，show show 我自己的拿手好菜。\n本章，拿手好菜，**红烧冬瓜**\n\n# 原料\n- 冬瓜500克  5块钱\n- 葱油40克   142ml -9.90块， \n- 花生油35克 \n- 甜酱25克\n- 酱油25克\n- 白糖10克\n- 精盐3克\n- 味精2克\n- 葱 姜末 各一点\n- 水淀粉20克\n- 高汤100毫升\n\n\n# 做法\n\n步骤一：\n\n到超市去买个冬瓜，如何挑冬瓜？如今的农家冬瓜基本都是藏过的，可以挑那种硬皮的比较好。\n\n步骤二：\n将冬瓜去皮，去子瓢洗净，切成3厘米长（这个切的参不多就行，别计较），1.2厘米厚，2厘米宽的块状物。\n步骤三：\n起油锅，锅内加花生油烧热，下入葱 姜末（前面已经切好），甜酱，再放入冬瓜，酱油，白糖，精盐，味精（个人不喜欢味精没放），高汤（我用的是热米水，可以是开水），开后转微火，烧至冬瓜软烂时，用钩勺淋上葱油，搅匀，呈上盘子就可以。\n\n\n# 最终的作品：\n![sss](http://ali.xinshipu.cn/20110610/original/1307684166819.jpg \"title\")\n\n\n\n","slug":"cooker/01","published":1,"date":"2016-11-27T10:05:56.039Z","updated":"2016-11-27T11:27:29.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp80i000dc88qusb2q73i","content":"<blockquote>\n<p>导读：<br>本人除了是个写字的，还是一个厨艺爱好者，我们写代码的除了关心代码外，我们更加应该关系我们的健康，毕竟这是一个高风险职业啊。<br>so,我就写了这个饮食健康的系列，show show 我自己的拿手好菜。<br>本章，拿手好菜，<strong>红烧冬瓜</strong></p>\n</blockquote>\n<h1 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h1><ul>\n<li>冬瓜500克  5块钱</li>\n<li>葱油40克   142ml -9.90块， </li>\n<li>花生油35克 </li>\n<li>甜酱25克</li>\n<li>酱油25克</li>\n<li>白糖10克</li>\n<li>精盐3克</li>\n<li>味精2克</li>\n<li>葱 姜末 各一点</li>\n<li>水淀粉20克</li>\n<li>高汤100毫升</li>\n</ul>\n<h1 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h1><p>步骤一：</p>\n<p>到超市去买个冬瓜，如何挑冬瓜？如今的农家冬瓜基本都是藏过的，可以挑那种硬皮的比较好。</p>\n<p>步骤二：<br>将冬瓜去皮，去子瓢洗净，切成3厘米长（这个切的参不多就行，别计较），1.2厘米厚，2厘米宽的块状物。<br>步骤三：<br>起油锅，锅内加花生油烧热，下入葱 姜末（前面已经切好），甜酱，再放入冬瓜，酱油，白糖，精盐，味精（个人不喜欢味精没放），高汤（我用的是热米水，可以是开水），开后转微火，烧至冬瓜软烂时，用钩勺淋上葱油，搅匀，呈上盘子就可以。</p>\n<h1 id=\"最终的作品：\"><a href=\"#最终的作品：\" class=\"headerlink\" title=\"最终的作品：\"></a>最终的作品：</h1><p><img src=\"http://ali.xinshipu.cn/20110610/original/1307684166819.jpg\" alt=\"sss\" title=\"title\"></p>\n","excerpt":"","more":"<blockquote>\n<p>导读：<br>本人除了是个写字的，还是一个厨艺爱好者，我们写代码的除了关心代码外，我们更加应该关系我们的健康，毕竟这是一个高风险职业啊。<br>so,我就写了这个饮食健康的系列，show show 我自己的拿手好菜。<br>本章，拿手好菜，<strong>红烧冬瓜</strong></p>\n</blockquote>\n<h1 id=\"原料\"><a href=\"#原料\" class=\"headerlink\" title=\"原料\"></a>原料</h1><ul>\n<li>冬瓜500克  5块钱</li>\n<li>葱油40克   142ml -9.90块， </li>\n<li>花生油35克 </li>\n<li>甜酱25克</li>\n<li>酱油25克</li>\n<li>白糖10克</li>\n<li>精盐3克</li>\n<li>味精2克</li>\n<li>葱 姜末 各一点</li>\n<li>水淀粉20克</li>\n<li>高汤100毫升</li>\n</ul>\n<h1 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h1><p>步骤一：</p>\n<p>到超市去买个冬瓜，如何挑冬瓜？如今的农家冬瓜基本都是藏过的，可以挑那种硬皮的比较好。</p>\n<p>步骤二：<br>将冬瓜去皮，去子瓢洗净，切成3厘米长（这个切的参不多就行，别计较），1.2厘米厚，2厘米宽的块状物。<br>步骤三：<br>起油锅，锅内加花生油烧热，下入葱 姜末（前面已经切好），甜酱，再放入冬瓜，酱油，白糖，精盐，味精（个人不喜欢味精没放），高汤（我用的是热米水，可以是开水），开后转微火，烧至冬瓜软烂时，用钩勺淋上葱油，搅匀，呈上盘子就可以。</p>\n<h1 id=\"最终的作品：\"><a href=\"#最终的作品：\" class=\"headerlink\" title=\"最终的作品：\"></a>最终的作品：</h1><p><img src=\"http://ali.xinshipu.cn/20110610/original/1307684166819.jpg\" alt=\"sss\" title=\"title\"></p>\n"},{"title":"java.security源码解读系列-总体导读","_content":"\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n\nJava平台(Java运行时环境，即JVM + Java API) 在多个层面上提供了security机制，在工作中常用的安全加密一般是采用jdk和spring-security提供的算法。\n\n# jdk 中加解密相关类\njava的自带的加解密的算法，主要是由rt.jar下java.security 和 jce.jar（Java Cryptography Extension）加密扩展包下面的类来实现。\n安全API中包含的各种类和接口为如下这些：\n- java.security中\n- java.security.spec\n- java.security.interfaces\n- javax.crypto\n- javax.crypto.spec\n- 方法javax.crypto.interfaces\n通过阅java的加解密源码，目的是为了有经验的程序员，希望创建自己的提供程序包提供加密服务的实现。\n\n<!-- more -->\n\n# JCE框架\njdk自身并没有实现了加解密的主要是jce.jar , jac 主要包括2个软件组件：\n- 框架，定义并支持加密服务提供商提供实现。该框架包括软件包，比如rt.jar中的java.security中的类，jce.jar 中的javax.crypto 、javax.crypto.spec javax.interfaces\n- 实际提供了SUNJCE，SunRsaSign, 其中包含实际的加密实现，在sun.security 下有MD5 DSA等加解密的具体实现，在jdk8中发现JCE已经废除使用sun.securit 下的接口了\n对于JCE的详情，可以参考这篇文章[http://m635674608.iteye.com/blog/1844777](http://m635674608.iteye.com/blog/1844777)\n\n# 阅读源码如何入手\n首先，我要明确自己阅读源码的目的，我这次阅读源码的目的是搞清楚jdk下实现的加解密机制，提供的方法，是我要自定义加解密应该如何实现，虽然不知到自己能不能做到自己实现（尽管有很多加解密的实现了，工作中不提倡轮子，但学习上提倡鲁轮子，so,就硬着头皮上了）。\n但是，在阅读源码的时候，必须要了解源码的设计背景和理念，不然会不知所措，无从看起，起码对于我这个菜鸟是这样，嘿嘿嘿，自黑一把。\n为此，我门先要了解JDK源码。\n![image](http://img.blog.csdn.net/20131204171127140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmJpcmRza3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们通常所说的JDK 包，一般是指rt.jar 下的包，其他的jar 包一般是提供商提供的或有SUN公司提供的，里面多多少少或有sun以前的代码影子，毕竟是发明者啊！他们是随时可能被代码重构的，并不能保证jdk的跨平台调用等特性。\njdk 下的包，一般会分为：Java.*、javax.*包，org.*包\n1、作为J2SE的API公开接口的一部分，与操作系统无关可以在所有Java平台上运行；\n2、不同的jdk版本会保持兼容不会轻易变化，提供API文档及源码(src.zip)。\n\nsun.*包：\n1、不是API公开接口的一部分，调用sun包的程序并不能确保工作在所有Java平台上，不同的操作系统中的实现可能不相同。\n2、不同的jdk版本sun包中的类也可能不定期的变化，因此sun.*包中的类没有提供API文档及源码。\n>注意：平台无关性是Java语言最大的优势之一，从技术上讲，并不能防止你的程序调用sun.*包中的类。在JDK版本的变迁当中，这些类可能会被删除或转移到其它包路径下，而且它的接口（包括名称、标签等）也很有可能发生变化，在这种情况下，即便你希望程序仅仅运行在SUN的实现平台下，你仍将承受新的版本给你的系统带来破坏的风险。总之，编写依赖于sun.*包的Java程序是不安全的，他们将变得无法移植、破坏了程序的平台无法性、也无法被JDK各版本所兼容。\n\njavax.*包:\n是指基于rt.jar 所做的扩展包，一般是由提供商提供。\n\norg.*包：\n是指由开源社区或非盈利组织提供的源码。这一般很少出现在jdk中。\n\n# 强大的Security API\n在次处，不再罗列出Java core 和JVM提供的一些security相关机制.如private, public, protected, package等安全机制。\n在这里，重点说说Security API。\n这套API覆盖了密码相关的功能、PKI (public key infrastructure)、认证(authentication)、安全通信(secure conmmunication)、访问控制(access control)等方方面面。接下来我们将重点介绍这部分的内容。\n\n# Basic Security Architecture\n\nSecurity 基础架构\njava Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。此外，除了Java提供的安全服务外，用户可以编写自定义的security provider，按需扩展Java的security平台。\n扩展Java的security平台的库在许多框架中都有自己的实现。如：spring-security模块中org.springframework.security，这里有具体的实现。\n\n# Security Provider\njava.security.Provider抽象了Java security provider。它指定了provider的名字，罗列了它实现的安全服务。多个provider可能同时被配置，他们会以优先级排列。当一个安全服务收到请求，这个服务的最高优先级的provider提供服务。\n应用通过相关的getInstance方法来获得安全服务，比如：调用java.security.MessageDigest的getInstance方法来获得一个message digest 算法(MD5)。[例子源于Java官网](http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html)\n\n```\nMessageDigest md = MessageDigest.getInstance(\"MD5\");  \n```\n\n[jdk中的Provider者算法](http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html)\n\n\n# Cryptography Arthitecture (JCA)\n\n密码架构\nJava的Cryptography架构是一个提供访问和开发密码功能的框架。它提供了许多cryptographic服务：\n- Message digest algorithms 【信息摘要算法, 如：MD5】\n- Digital signature algorithms 【数字签名算法，DSA】\n- Symmetric bulk encryption  【对称块加密， 如：DES】\n- Symmetric stream encryption 【对称流加密， 如：RC4】\n- Asymmetric encryption 【非对称加密， 如：RSA】\n- Password-based encryption (PBE) 【密码加密】\n- Elliptic Curve Cryptography (ECC) 【椭圆曲线加密】\n- Key agreement algorithms 【key协议算法】\n- Key generators 【key生成器】\n- Message Authentication Codes (MACs) 【消息认证码】\n- (Pseudo-)random number generators 【伪随机数生成器】\n因为历史原因，Cryptography API位于两个独立的包内：\njava.security(Signature, MessageDigest)和javax.crypto(Cipher, KeyAgreement)。\n参考：http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\n\nJava内置的Provider提供了许多通用的密码算法，比如：RSA, DSA, ECDSA等签名算法、DES, AES, ARCFOUR等加密算法、MD5, SHA-1, SHA-256等信息摘要算法、还有Diffie-Hellman和ECDH这样的密钥协商算法。\n此外，还有一些特殊的provider。\n\n比如SunPKCS11， 它允许Java代码无缝地使用PKCS#11的compliant tokens。\n在Windows平台上，Java还提供了一些native的Provider去连接本地的 Microsoft CryptoAPI。这个provider的名字叫MSCAPI。它允许Java应用无缝地使用Windows平台的cryptographic service。\n\n# Public Key Infrastructure(PKI)\n公钥基础构件\nPKI是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。 \nJava平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。PKI相关的类可以在java.security和java.security.cert包下获取。\n\n\n密钥和证书的仓库\nJava提供了长期持久化密钥和证书的功能。它通过key store和certificate store来实现。java.security.KeyStore这个类代表了一个key store，一个安全的，用于存储密码和可信证书的仓库。java.security.cert.CertStore类代表了一个certificate store，用于存储不相关的，不受信的证书。同样它可以存储CRLs。\nJava平台包含标准的PKCS#11和PKCS#12 key store类型，此外还有一个基于文件的key store类型，叫做JKS(Java Key Store)。Java平台内置了一个名叫cacerts的特殊JKS，它为CA证书提供一个默认的密钥库。\nSunPKCS11(之前在密码架构小节有提过哦)包含了一个PKCS#11的key store实现。这意味着安全硬件(比如：smartcard)的密钥和证书可以被Java应用所使用。\n此外，Java平台提供了LDAP的certificate store类型用于访问存放在LDAP中的证书。还有一个certificate type用于访问存放在java.util.Collection中的证书。\n\nPKI Tools\nJava提供了两个内置的工具帮助用户使用密钥，证书和Key store：keytool和jarsigner。\nkeytool用于创建和管理key store。它可以\n- 创建公钥私钥对\n- 显示，导入、导出X.509 v1, v2, v3的证书\n- 创建自签名证书\n- 基于证书请求创建证书\n- 导入证书回复(certificate reply)【在外部CA颁发证书之后，会受到一个回复，该回复通常是一个PKCS7编码的证书】\n- 指定公钥证书为可信\njarsigner用于给JAR文件签名或者验证已经签名的JAR包。 \n\n# Authentication\n认证\nAuthentication是确认用户身份的过程。在Java运行时环境的上下文中，指认证执行Java程序用户的过程。在这种情况下，这个过程依赖于在Cryptography小节描述到的一些服务。\n\nJava平台提供API，用户可以通过插件式的登录模块为应用提供用户认证功能。应用调用LoginContext类(在javax.security.auth.login包内)，它依赖于配置。该配置指定了哪个登录模块(所有登录模块必须实现javax.security.auth.spi.LoginModule接口)为应用提供实际的认证功能。\n应用只使用标准的LoginContext API， 所以能保持对于底层插件模块的独立性。新的模块可以被无缝地添加到应用中，不需要修改任何的应用代码。如下图：\n![image](http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/3.jpg)\n\nJava平台提供了一些内置的登录模块，所有模块都可以再com.sun.security.auth.module包下找到：\nKrb5LoginModule 【Kerberos认证】\nJndiLoginModule 【使用LDAP/NIS的用户名/密码认证】\nKeyStoreLoginModule 【基于Key store的认证】\n\n# Secure Communication\n安全通信\n数据走网络，总会通过一些不需要接收该信息的用户。当数据包含一些私人信息时(比如密码，信用卡号等），我们必须采取措施使这些信息不落入未经授权者之手。我们也需要确保数据在传输过程中不被他人篡改。\nCryptography(请见Cryptography小节)是安全通讯的基础。Java平台提供了很多API来支持和实现许多标准的安全通讯协议。\nSSL/TLS\n对于这部分协议的实现包含了数据加密、数据完整性、服务器认证和客户端认证(可选)功能。用户的应用可以使用[SSL/TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security)来为两端提供安全的数据通路。它支持任何应用协议，比如：HTTP。\njavax.net.ssl.SSLSocket，这个socket类基于普通的stream socket(java.net.Socket)，并封装了SSL/TLS协议功能。此外，你的应用可能需要像New-I/O这样的交替式数据传输功能。javax.net.ssl.SSLEngine类可以帮你生成和解读SSL/TLS数据包。\n\nJava平台还提供API支持插件式(基于Provider)的key manager和trust manager。Key Manager封装在javax.net.ssl.KeyManager内，它管理用于认证的密钥。trust manager封装在javax.net.ssl.TrustManager类中，由它来决断哪个用户是受信的，这基于它自身管理的Key store中的证书。\nJava平台包含了一个内置的实现了SSL/TLS协议的Provider，它支持如下协议：\n* SSLv3\n* TLSv1\n* TLSv1.1\n* TLSv1.2\n\nSASL\n[Simple Authentication and Security Layer](http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82)， SASL定义了认证数据如何被交换，但是它本身并没有指定认证数据的内容。SASL框架可以适用于任何SASL支持的认证机制。目前有很多 标准的SASL机制用于不同的安全级别和部署场景。\n\n用户的应用使用Java的SASL API并不需要强制绑定任何特定的SASL机制，应用可以选择使用自己需要的机制。API支持客户端应用和服务端应用。用户可以使用javax.security.sasl.Sasl类创建SaslClient和SaslServer对象。\n\nSASL机制的实现可以从provider包下找到。每个provider可能提供一个或多个SASL机制。这些provider已经注册到标准的provider架构中，用户可以很方便地使用它们。下面罗列Java平台提供的SASL provider：\n* DRAM-MD5，DIGEST-MD5，EXTERNAL，GSSAPI，NTLM，PLAIN client machanisms [【协议相关的说明】](http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82)\n* DRAM-MD5，DIGEST-MD5，GSSAPI，NTLM server machanisms [【协议相关的说明】](http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82)\n\nGSS-API and Kerberos\nGSS-API, Generic Security Service Application Programming Interface。GSS-API提供应用开发者基于大量底层安全机制的统一安全服务入口。目前，Java的GSS-API需要使用Kerberos v5，而Java已经包含了内置的Kerberos实现。注意，之前介绍的Krb5LoginModule可以结合GSS Kerberos使用。此外，Java平台还有内置的SPNEGO(Simple and Protected GSS API Negotiation Mechanism)的实现。\n在两个应用使用Java GSS-API安全通信之前，它们必须建立一个共同的安全上下文。上下文封装了共享的状态信息， 比如：密钥。这两个应用都需要创建并使用org.ietf.jgss.GSSContext对象去建立和维护这些共享信息。\nJava GSS API放在org.ietf.jgss包下。Java平台也定义了基础的Kerberos类，比如KerberosPrinciple，KerberosTicket，KerberosKey和KeyTab。这些类都在javax.security.auth.kerberos包下。\n\n# Access Control\n访问控制\nJava平台的访问控制架构保护了对敏感资源(比如本地文件)或者应用代码(类的方法)的访问。所有访问控制的决策由security manager(java.lang.SecurityManger类)仲裁。\nJava Applets和Java Web应用会自动使用SecurityManager。但是，本地的应用如果通过java命令来执行，默认是不会使用SecurityManager的。如果你想在上述情况下使用，那你的应用必须显示地设置它。在Java程序中，你可以调用java.lang.System#setSecurityManager方法来使用SecurityManager，你也可以通过设置参数的方式达成同样的效果：-Djava.security.manager。\n\n权限\n当Java代码被类加载器加载时，类加载器会为代码自动关联下列信息：\n- 代码从哪里加载的\n- 谁签名了该代码(如果有的话)\n- 授权给该代码的默认权限\n\n无论代码是从一个不受信的网络下载(比如: applet)还是从本地文件系统加载，以上信息都会关联到你的代码。代码的加载路径由一个URL表示，code signer是signer的证书链。默认的权限为java.security.Permission对象。\n对于网络下载的代码，默认权限会自动授权代码可以访问下载源的主机。对于本地代码，代码默认有对于代码目录和子目录的访问权限。\n值得注意的是，在类加载时，系统并不会去验证执行代码的用户身份。如果有必要，应该由应用代码来完成认证的工作(见上文认证小节)。 一旦用户通过认证，应用可以动态地关联运行代码的用户和被执行的代码。这个过程由javax.security.auth.Subject类的doAs方法完成。\n\n\n策略 (Policy)\n如上文所述，一个默认权限的有限集在类加载时由类加载器授权给了代码，Admin可以通过安全策略灵活地管理代码权限。\nJava平台把策略封装在java.security.Policy类中。在任何时间，有且只有一个Policy对象被加载到了Java运行时。这个Policy负责仲裁代码是否可以访问受保护的资源。Policy如何仲裁则依赖于实现。比如，可以使用数据库保存授权信息或者使用一个外部的服务。\nJava平台提供了默认的策略实现，它从一个或多个ASCII(UTF-8)文件中读取security properties。这些策略文件包含了授权给代码的权限集。这些策略必须符合特定的语法。策略文件可以由简单的文本编辑器或者图形化工具policytool编写。\nPolicy详解，policytool使用方式和例子: 面向Applet, 面向Application\n\n执行访问控制\n当应用请求访问受限资源时，默认来说，Java会评判整个调用栈来决定程序是否可以访问该资源。\n如上文所述，资源受SecurityManager保护。Java平台和应用中的安全敏感代码保护着资源访问：\n```\nSecurityManager sm = System.getSecurityManager();  \nif (sm != null) {  \n   sm.checkPermission(perm);  \n} \n```\n 代码中的perm是Permission对象，比如，要读取/tmp/abc文件，那么Permission对象可以构建如下：\n```\nPermission perm =   \n    new java.io.FilePermission(\"/tmp/abc\", \"read\");   \n```\nSecurityManager的默认实现把决策委派给java.security.AccessController的实现。AccessController会遍历调用栈中的每个代码元素的安全策略信息。这些策略基于Admin配置的permission决定请求是否被授权。如果未被授权则跑出java.lang.SecurityException异常。\n\n下图描绘了访问控制的执行过程。在这个特定的例子中，调用栈中有两个元素：ClassA和ClassB。ClassA调用了ClassB的一个方法。这个方法会通过FileInputStream去访问/tmp/abc这个文件。FileInputStream的构造器创建了FilePermission：perm。接着，perm被传递给SecurityManager的checkPermission方法。在本例中，只有ClassA和ClassB的权限需要验证，这是因为，所有的系统代码(FileInputStream,SecurityManager,AccessController)自动获取了所有权限。\n\n\n从图片中可以看到，ClassA和ClassB加载自不同的路径，并且签名者也不同。它们也可能被授予不同的权限集合。只有这两个类都被授予了访问abc的FilePermission，AccessController才会通过访问abc的请求。\n![image](http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/4.jpg)\n\n\n# XML Signature\nXML签名\nJava XML数字签名API用于生成和校验XML的数字签名。XML签名可以应用于任何数据类，XML或者二进制。签名用XML表示。XML签名可以用来保护你的数据并提供数据完整性，消息认证，签名者认证功能。\nAPI支持所有的W3C推荐的XML签名语法。API支持扩展和插件形式。它基于Java Cryptography服务provider架构。该API由6个包组成：\n- javax.xml.crypto\n- javax.xml.crypto.dsig\n- javax.xml.crypto.dsig.keyinfo\n- javax.xml.crypto.dsig.spec\n- javax.xml.crypto.dom\n- javax.xml.crypto.dsig.dom\n\n\n\n\n\n>参考文章：\nhttp://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\nhttp://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\nhttp://m635674608.iteye.com/blog/1844777（强推荐）\nhttp://joshuasabrina.iteye.com/blog/1798245（强推荐）\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\nhttp://www.cnblogs.com/NullPointException/p/5054082.html\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html","source":"_posts/jca/01.md","raw":"---\ntitle: java.security源码解读系列-总体导读\ncategories:\n- 源码阅读\n- security源码导读系列\ntags:\n- jdk源码系列\n- security源码导读系列\n---\n\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n\nJava平台(Java运行时环境，即JVM + Java API) 在多个层面上提供了security机制，在工作中常用的安全加密一般是采用jdk和spring-security提供的算法。\n\n# jdk 中加解密相关类\njava的自带的加解密的算法，主要是由rt.jar下java.security 和 jce.jar（Java Cryptography Extension）加密扩展包下面的类来实现。\n安全API中包含的各种类和接口为如下这些：\n- java.security中\n- java.security.spec\n- java.security.interfaces\n- javax.crypto\n- javax.crypto.spec\n- 方法javax.crypto.interfaces\n通过阅java的加解密源码，目的是为了有经验的程序员，希望创建自己的提供程序包提供加密服务的实现。\n\n<!-- more -->\n\n# JCE框架\njdk自身并没有实现了加解密的主要是jce.jar , jac 主要包括2个软件组件：\n- 框架，定义并支持加密服务提供商提供实现。该框架包括软件包，比如rt.jar中的java.security中的类，jce.jar 中的javax.crypto 、javax.crypto.spec javax.interfaces\n- 实际提供了SUNJCE，SunRsaSign, 其中包含实际的加密实现，在sun.security 下有MD5 DSA等加解密的具体实现，在jdk8中发现JCE已经废除使用sun.securit 下的接口了\n对于JCE的详情，可以参考这篇文章[http://m635674608.iteye.com/blog/1844777](http://m635674608.iteye.com/blog/1844777)\n\n# 阅读源码如何入手\n首先，我要明确自己阅读源码的目的，我这次阅读源码的目的是搞清楚jdk下实现的加解密机制，提供的方法，是我要自定义加解密应该如何实现，虽然不知到自己能不能做到自己实现（尽管有很多加解密的实现了，工作中不提倡轮子，但学习上提倡鲁轮子，so,就硬着头皮上了）。\n但是，在阅读源码的时候，必须要了解源码的设计背景和理念，不然会不知所措，无从看起，起码对于我这个菜鸟是这样，嘿嘿嘿，自黑一把。\n为此，我门先要了解JDK源码。\n![image](http://img.blog.csdn.net/20131204171127140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmJpcmRza3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们通常所说的JDK 包，一般是指rt.jar 下的包，其他的jar 包一般是提供商提供的或有SUN公司提供的，里面多多少少或有sun以前的代码影子，毕竟是发明者啊！他们是随时可能被代码重构的，并不能保证jdk的跨平台调用等特性。\njdk 下的包，一般会分为：Java.*、javax.*包，org.*包\n1、作为J2SE的API公开接口的一部分，与操作系统无关可以在所有Java平台上运行；\n2、不同的jdk版本会保持兼容不会轻易变化，提供API文档及源码(src.zip)。\n\nsun.*包：\n1、不是API公开接口的一部分，调用sun包的程序并不能确保工作在所有Java平台上，不同的操作系统中的实现可能不相同。\n2、不同的jdk版本sun包中的类也可能不定期的变化，因此sun.*包中的类没有提供API文档及源码。\n>注意：平台无关性是Java语言最大的优势之一，从技术上讲，并不能防止你的程序调用sun.*包中的类。在JDK版本的变迁当中，这些类可能会被删除或转移到其它包路径下，而且它的接口（包括名称、标签等）也很有可能发生变化，在这种情况下，即便你希望程序仅仅运行在SUN的实现平台下，你仍将承受新的版本给你的系统带来破坏的风险。总之，编写依赖于sun.*包的Java程序是不安全的，他们将变得无法移植、破坏了程序的平台无法性、也无法被JDK各版本所兼容。\n\njavax.*包:\n是指基于rt.jar 所做的扩展包，一般是由提供商提供。\n\norg.*包：\n是指由开源社区或非盈利组织提供的源码。这一般很少出现在jdk中。\n\n# 强大的Security API\n在次处，不再罗列出Java core 和JVM提供的一些security相关机制.如private, public, protected, package等安全机制。\n在这里，重点说说Security API。\n这套API覆盖了密码相关的功能、PKI (public key infrastructure)、认证(authentication)、安全通信(secure conmmunication)、访问控制(access control)等方方面面。接下来我们将重点介绍这部分的内容。\n\n# Basic Security Architecture\n\nSecurity 基础架构\njava Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。此外，除了Java提供的安全服务外，用户可以编写自定义的security provider，按需扩展Java的security平台。\n扩展Java的security平台的库在许多框架中都有自己的实现。如：spring-security模块中org.springframework.security，这里有具体的实现。\n\n# Security Provider\njava.security.Provider抽象了Java security provider。它指定了provider的名字，罗列了它实现的安全服务。多个provider可能同时被配置，他们会以优先级排列。当一个安全服务收到请求，这个服务的最高优先级的provider提供服务。\n应用通过相关的getInstance方法来获得安全服务，比如：调用java.security.MessageDigest的getInstance方法来获得一个message digest 算法(MD5)。[例子源于Java官网](http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html)\n\n```\nMessageDigest md = MessageDigest.getInstance(\"MD5\");  \n```\n\n[jdk中的Provider者算法](http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html)\n\n\n# Cryptography Arthitecture (JCA)\n\n密码架构\nJava的Cryptography架构是一个提供访问和开发密码功能的框架。它提供了许多cryptographic服务：\n- Message digest algorithms 【信息摘要算法, 如：MD5】\n- Digital signature algorithms 【数字签名算法，DSA】\n- Symmetric bulk encryption  【对称块加密， 如：DES】\n- Symmetric stream encryption 【对称流加密， 如：RC4】\n- Asymmetric encryption 【非对称加密， 如：RSA】\n- Password-based encryption (PBE) 【密码加密】\n- Elliptic Curve Cryptography (ECC) 【椭圆曲线加密】\n- Key agreement algorithms 【key协议算法】\n- Key generators 【key生成器】\n- Message Authentication Codes (MACs) 【消息认证码】\n- (Pseudo-)random number generators 【伪随机数生成器】\n因为历史原因，Cryptography API位于两个独立的包内：\njava.security(Signature, MessageDigest)和javax.crypto(Cipher, KeyAgreement)。\n参考：http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\n\nJava内置的Provider提供了许多通用的密码算法，比如：RSA, DSA, ECDSA等签名算法、DES, AES, ARCFOUR等加密算法、MD5, SHA-1, SHA-256等信息摘要算法、还有Diffie-Hellman和ECDH这样的密钥协商算法。\n此外，还有一些特殊的provider。\n\n比如SunPKCS11， 它允许Java代码无缝地使用PKCS#11的compliant tokens。\n在Windows平台上，Java还提供了一些native的Provider去连接本地的 Microsoft CryptoAPI。这个provider的名字叫MSCAPI。它允许Java应用无缝地使用Windows平台的cryptographic service。\n\n# Public Key Infrastructure(PKI)\n公钥基础构件\nPKI是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。 \nJava平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。PKI相关的类可以在java.security和java.security.cert包下获取。\n\n\n密钥和证书的仓库\nJava提供了长期持久化密钥和证书的功能。它通过key store和certificate store来实现。java.security.KeyStore这个类代表了一个key store，一个安全的，用于存储密码和可信证书的仓库。java.security.cert.CertStore类代表了一个certificate store，用于存储不相关的，不受信的证书。同样它可以存储CRLs。\nJava平台包含标准的PKCS#11和PKCS#12 key store类型，此外还有一个基于文件的key store类型，叫做JKS(Java Key Store)。Java平台内置了一个名叫cacerts的特殊JKS，它为CA证书提供一个默认的密钥库。\nSunPKCS11(之前在密码架构小节有提过哦)包含了一个PKCS#11的key store实现。这意味着安全硬件(比如：smartcard)的密钥和证书可以被Java应用所使用。\n此外，Java平台提供了LDAP的certificate store类型用于访问存放在LDAP中的证书。还有一个certificate type用于访问存放在java.util.Collection中的证书。\n\nPKI Tools\nJava提供了两个内置的工具帮助用户使用密钥，证书和Key store：keytool和jarsigner。\nkeytool用于创建和管理key store。它可以\n- 创建公钥私钥对\n- 显示，导入、导出X.509 v1, v2, v3的证书\n- 创建自签名证书\n- 基于证书请求创建证书\n- 导入证书回复(certificate reply)【在外部CA颁发证书之后，会受到一个回复，该回复通常是一个PKCS7编码的证书】\n- 指定公钥证书为可信\njarsigner用于给JAR文件签名或者验证已经签名的JAR包。 \n\n# Authentication\n认证\nAuthentication是确认用户身份的过程。在Java运行时环境的上下文中，指认证执行Java程序用户的过程。在这种情况下，这个过程依赖于在Cryptography小节描述到的一些服务。\n\nJava平台提供API，用户可以通过插件式的登录模块为应用提供用户认证功能。应用调用LoginContext类(在javax.security.auth.login包内)，它依赖于配置。该配置指定了哪个登录模块(所有登录模块必须实现javax.security.auth.spi.LoginModule接口)为应用提供实际的认证功能。\n应用只使用标准的LoginContext API， 所以能保持对于底层插件模块的独立性。新的模块可以被无缝地添加到应用中，不需要修改任何的应用代码。如下图：\n![image](http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/3.jpg)\n\nJava平台提供了一些内置的登录模块，所有模块都可以再com.sun.security.auth.module包下找到：\nKrb5LoginModule 【Kerberos认证】\nJndiLoginModule 【使用LDAP/NIS的用户名/密码认证】\nKeyStoreLoginModule 【基于Key store的认证】\n\n# Secure Communication\n安全通信\n数据走网络，总会通过一些不需要接收该信息的用户。当数据包含一些私人信息时(比如密码，信用卡号等），我们必须采取措施使这些信息不落入未经授权者之手。我们也需要确保数据在传输过程中不被他人篡改。\nCryptography(请见Cryptography小节)是安全通讯的基础。Java平台提供了很多API来支持和实现许多标准的安全通讯协议。\nSSL/TLS\n对于这部分协议的实现包含了数据加密、数据完整性、服务器认证和客户端认证(可选)功能。用户的应用可以使用[SSL/TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security)来为两端提供安全的数据通路。它支持任何应用协议，比如：HTTP。\njavax.net.ssl.SSLSocket，这个socket类基于普通的stream socket(java.net.Socket)，并封装了SSL/TLS协议功能。此外，你的应用可能需要像New-I/O这样的交替式数据传输功能。javax.net.ssl.SSLEngine类可以帮你生成和解读SSL/TLS数据包。\n\nJava平台还提供API支持插件式(基于Provider)的key manager和trust manager。Key Manager封装在javax.net.ssl.KeyManager内，它管理用于认证的密钥。trust manager封装在javax.net.ssl.TrustManager类中，由它来决断哪个用户是受信的，这基于它自身管理的Key store中的证书。\nJava平台包含了一个内置的实现了SSL/TLS协议的Provider，它支持如下协议：\n* SSLv3\n* TLSv1\n* TLSv1.1\n* TLSv1.2\n\nSASL\n[Simple Authentication and Security Layer](http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82)， SASL定义了认证数据如何被交换，但是它本身并没有指定认证数据的内容。SASL框架可以适用于任何SASL支持的认证机制。目前有很多 标准的SASL机制用于不同的安全级别和部署场景。\n\n用户的应用使用Java的SASL API并不需要强制绑定任何特定的SASL机制，应用可以选择使用自己需要的机制。API支持客户端应用和服务端应用。用户可以使用javax.security.sasl.Sasl类创建SaslClient和SaslServer对象。\n\nSASL机制的实现可以从provider包下找到。每个provider可能提供一个或多个SASL机制。这些provider已经注册到标准的provider架构中，用户可以很方便地使用它们。下面罗列Java平台提供的SASL provider：\n* DRAM-MD5，DIGEST-MD5，EXTERNAL，GSSAPI，NTLM，PLAIN client machanisms [【协议相关的说明】](http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82)\n* DRAM-MD5，DIGEST-MD5，GSSAPI，NTLM server machanisms [【协议相关的说明】](http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82)\n\nGSS-API and Kerberos\nGSS-API, Generic Security Service Application Programming Interface。GSS-API提供应用开发者基于大量底层安全机制的统一安全服务入口。目前，Java的GSS-API需要使用Kerberos v5，而Java已经包含了内置的Kerberos实现。注意，之前介绍的Krb5LoginModule可以结合GSS Kerberos使用。此外，Java平台还有内置的SPNEGO(Simple and Protected GSS API Negotiation Mechanism)的实现。\n在两个应用使用Java GSS-API安全通信之前，它们必须建立一个共同的安全上下文。上下文封装了共享的状态信息， 比如：密钥。这两个应用都需要创建并使用org.ietf.jgss.GSSContext对象去建立和维护这些共享信息。\nJava GSS API放在org.ietf.jgss包下。Java平台也定义了基础的Kerberos类，比如KerberosPrinciple，KerberosTicket，KerberosKey和KeyTab。这些类都在javax.security.auth.kerberos包下。\n\n# Access Control\n访问控制\nJava平台的访问控制架构保护了对敏感资源(比如本地文件)或者应用代码(类的方法)的访问。所有访问控制的决策由security manager(java.lang.SecurityManger类)仲裁。\nJava Applets和Java Web应用会自动使用SecurityManager。但是，本地的应用如果通过java命令来执行，默认是不会使用SecurityManager的。如果你想在上述情况下使用，那你的应用必须显示地设置它。在Java程序中，你可以调用java.lang.System#setSecurityManager方法来使用SecurityManager，你也可以通过设置参数的方式达成同样的效果：-Djava.security.manager。\n\n权限\n当Java代码被类加载器加载时，类加载器会为代码自动关联下列信息：\n- 代码从哪里加载的\n- 谁签名了该代码(如果有的话)\n- 授权给该代码的默认权限\n\n无论代码是从一个不受信的网络下载(比如: applet)还是从本地文件系统加载，以上信息都会关联到你的代码。代码的加载路径由一个URL表示，code signer是signer的证书链。默认的权限为java.security.Permission对象。\n对于网络下载的代码，默认权限会自动授权代码可以访问下载源的主机。对于本地代码，代码默认有对于代码目录和子目录的访问权限。\n值得注意的是，在类加载时，系统并不会去验证执行代码的用户身份。如果有必要，应该由应用代码来完成认证的工作(见上文认证小节)。 一旦用户通过认证，应用可以动态地关联运行代码的用户和被执行的代码。这个过程由javax.security.auth.Subject类的doAs方法完成。\n\n\n策略 (Policy)\n如上文所述，一个默认权限的有限集在类加载时由类加载器授权给了代码，Admin可以通过安全策略灵活地管理代码权限。\nJava平台把策略封装在java.security.Policy类中。在任何时间，有且只有一个Policy对象被加载到了Java运行时。这个Policy负责仲裁代码是否可以访问受保护的资源。Policy如何仲裁则依赖于实现。比如，可以使用数据库保存授权信息或者使用一个外部的服务。\nJava平台提供了默认的策略实现，它从一个或多个ASCII(UTF-8)文件中读取security properties。这些策略文件包含了授权给代码的权限集。这些策略必须符合特定的语法。策略文件可以由简单的文本编辑器或者图形化工具policytool编写。\nPolicy详解，policytool使用方式和例子: 面向Applet, 面向Application\n\n执行访问控制\n当应用请求访问受限资源时，默认来说，Java会评判整个调用栈来决定程序是否可以访问该资源。\n如上文所述，资源受SecurityManager保护。Java平台和应用中的安全敏感代码保护着资源访问：\n```\nSecurityManager sm = System.getSecurityManager();  \nif (sm != null) {  \n   sm.checkPermission(perm);  \n} \n```\n 代码中的perm是Permission对象，比如，要读取/tmp/abc文件，那么Permission对象可以构建如下：\n```\nPermission perm =   \n    new java.io.FilePermission(\"/tmp/abc\", \"read\");   \n```\nSecurityManager的默认实现把决策委派给java.security.AccessController的实现。AccessController会遍历调用栈中的每个代码元素的安全策略信息。这些策略基于Admin配置的permission决定请求是否被授权。如果未被授权则跑出java.lang.SecurityException异常。\n\n下图描绘了访问控制的执行过程。在这个特定的例子中，调用栈中有两个元素：ClassA和ClassB。ClassA调用了ClassB的一个方法。这个方法会通过FileInputStream去访问/tmp/abc这个文件。FileInputStream的构造器创建了FilePermission：perm。接着，perm被传递给SecurityManager的checkPermission方法。在本例中，只有ClassA和ClassB的权限需要验证，这是因为，所有的系统代码(FileInputStream,SecurityManager,AccessController)自动获取了所有权限。\n\n\n从图片中可以看到，ClassA和ClassB加载自不同的路径，并且签名者也不同。它们也可能被授予不同的权限集合。只有这两个类都被授予了访问abc的FilePermission，AccessController才会通过访问abc的请求。\n![image](http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/4.jpg)\n\n\n# XML Signature\nXML签名\nJava XML数字签名API用于生成和校验XML的数字签名。XML签名可以应用于任何数据类，XML或者二进制。签名用XML表示。XML签名可以用来保护你的数据并提供数据完整性，消息认证，签名者认证功能。\nAPI支持所有的W3C推荐的XML签名语法。API支持扩展和插件形式。它基于Java Cryptography服务provider架构。该API由6个包组成：\n- javax.xml.crypto\n- javax.xml.crypto.dsig\n- javax.xml.crypto.dsig.keyinfo\n- javax.xml.crypto.dsig.spec\n- javax.xml.crypto.dom\n- javax.xml.crypto.dsig.dom\n\n\n\n\n\n>参考文章：\nhttp://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\nhttp://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\nhttp://m635674608.iteye.com/blog/1844777（强推荐）\nhttp://joshuasabrina.iteye.com/blog/1798245（强推荐）\nhttp://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\nhttp://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\nhttp://www.cnblogs.com/NullPointException/p/5054082.html\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html","slug":"jca/01","published":1,"date":"2016-11-12T09:19:33.936Z","updated":"2016-11-20T15:56:03.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp80l000ec88qw32qz6cy","content":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n</ul>\n</blockquote>\n<p>Java平台(Java运行时环境，即JVM + Java API) 在多个层面上提供了security机制，在工作中常用的安全加密一般是采用jdk和spring-security提供的算法。</p>\n<h1 id=\"jdk-中加解密相关类\"><a href=\"#jdk-中加解密相关类\" class=\"headerlink\" title=\"jdk 中加解密相关类\"></a>jdk 中加解密相关类</h1><p>java的自带的加解密的算法，主要是由rt.jar下java.security 和 jce.jar（Java Cryptography Extension）加密扩展包下面的类来实现。<br>安全API中包含的各种类和接口为如下这些：</p>\n<ul>\n<li>java.security中</li>\n<li>java.security.spec</li>\n<li>java.security.interfaces</li>\n<li>javax.crypto</li>\n<li>javax.crypto.spec</li>\n<li>方法javax.crypto.interfaces<br>通过阅java的加解密源码，目的是为了有经验的程序员，希望创建自己的提供程序包提供加密服务的实现。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"JCE框架\"><a href=\"#JCE框架\" class=\"headerlink\" title=\"JCE框架\"></a>JCE框架</h1><p>jdk自身并没有实现了加解密的主要是jce.jar , jac 主要包括2个软件组件：</p>\n<ul>\n<li>框架，定义并支持加密服务提供商提供实现。该框架包括软件包，比如rt.jar中的java.security中的类，jce.jar 中的javax.crypto 、javax.crypto.spec javax.interfaces</li>\n<li>实际提供了SUNJCE，SunRsaSign, 其中包含实际的加密实现，在sun.security 下有MD5 DSA等加解密的具体实现，在jdk8中发现JCE已经废除使用sun.securit 下的接口了<br>对于JCE的详情，可以参考这篇文章<a href=\"http://m635674608.iteye.com/blog/1844777\" target=\"_blank\" rel=\"external\">http://m635674608.iteye.com/blog/1844777</a></li>\n</ul>\n<h1 id=\"阅读源码如何入手\"><a href=\"#阅读源码如何入手\" class=\"headerlink\" title=\"阅读源码如何入手\"></a>阅读源码如何入手</h1><p>首先，我要明确自己阅读源码的目的，我这次阅读源码的目的是搞清楚jdk下实现的加解密机制，提供的方法，是我要自定义加解密应该如何实现，虽然不知到自己能不能做到自己实现（尽管有很多加解密的实现了，工作中不提倡轮子，但学习上提倡鲁轮子，so,就硬着头皮上了）。<br>但是，在阅读源码的时候，必须要了解源码的设计背景和理念，不然会不知所措，无从看起，起码对于我这个菜鸟是这样，嘿嘿嘿，自黑一把。<br>为此，我门先要了解JDK源码。<br><img src=\"http://img.blog.csdn.net/20131204171127140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmJpcmRza3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"image\"><br>我们通常所说的JDK 包，一般是指rt.jar 下的包，其他的jar 包一般是提供商提供的或有SUN公司提供的，里面多多少少或有sun以前的代码影子，毕竟是发明者啊！他们是随时可能被代码重构的，并不能保证jdk的跨平台调用等特性。<br>jdk 下的包，一般会分为：Java.<em>、javax.</em>包，org.*包<br>1、作为J2SE的API公开接口的一部分，与操作系统无关可以在所有Java平台上运行；<br>2、不同的jdk版本会保持兼容不会轻易变化，提供API文档及源码(src.zip)。</p>\n<p>sun.<em>包：<br>1、不是API公开接口的一部分，调用sun包的程序并不能确保工作在所有Java平台上，不同的操作系统中的实现可能不相同。<br>2、不同的jdk版本sun包中的类也可能不定期的变化，因此sun.</em>包中的类没有提供API文档及源码。</p>\n<blockquote>\n<p>注意：平台无关性是Java语言最大的优势之一，从技术上讲，并不能防止你的程序调用sun.<em>包中的类。在JDK版本的变迁当中，这些类可能会被删除或转移到其它包路径下，而且它的接口（包括名称、标签等）也很有可能发生变化，在这种情况下，即便你希望程序仅仅运行在SUN的实现平台下，你仍将承受新的版本给你的系统带来破坏的风险。总之，编写依赖于sun.</em>包的Java程序是不安全的，他们将变得无法移植、破坏了程序的平台无法性、也无法被JDK各版本所兼容。</p>\n</blockquote>\n<p>javax.*包:<br>是指基于rt.jar 所做的扩展包，一般是由提供商提供。</p>\n<p>org.*包：<br>是指由开源社区或非盈利组织提供的源码。这一般很少出现在jdk中。</p>\n<h1 id=\"强大的Security-API\"><a href=\"#强大的Security-API\" class=\"headerlink\" title=\"强大的Security API\"></a>强大的Security API</h1><p>在次处，不再罗列出Java core 和JVM提供的一些security相关机制.如private, public, protected, package等安全机制。<br>在这里，重点说说Security API。<br>这套API覆盖了密码相关的功能、PKI (public key infrastructure)、认证(authentication)、安全通信(secure conmmunication)、访问控制(access control)等方方面面。接下来我们将重点介绍这部分的内容。</p>\n<h1 id=\"Basic-Security-Architecture\"><a href=\"#Basic-Security-Architecture\" class=\"headerlink\" title=\"Basic Security Architecture\"></a>Basic Security Architecture</h1><p>Security 基础架构<br>java Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。此外，除了Java提供的安全服务外，用户可以编写自定义的security provider，按需扩展Java的security平台。<br>扩展Java的security平台的库在许多框架中都有自己的实现。如：spring-security模块中org.springframework.security，这里有具体的实现。</p>\n<h1 id=\"Security-Provider\"><a href=\"#Security-Provider\" class=\"headerlink\" title=\"Security Provider\"></a>Security Provider</h1><p>java.security.Provider抽象了Java security provider。它指定了provider的名字，罗列了它实现的安全服务。多个provider可能同时被配置，他们会以优先级排列。当一个安全服务收到请求，这个服务的最高优先级的provider提供服务。<br>应用通过相关的getInstance方法来获得安全服务，比如：调用java.security.MessageDigest的getInstance方法来获得一个message digest 算法(MD5)。<a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html\" target=\"_blank\" rel=\"external\">例子源于Java官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</div></pre></td></tr></table></figure>\n<p><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html\" target=\"_blank\" rel=\"external\">jdk中的Provider者算法</a></p>\n<h1 id=\"Cryptography-Arthitecture-JCA\"><a href=\"#Cryptography-Arthitecture-JCA\" class=\"headerlink\" title=\"Cryptography Arthitecture (JCA)\"></a>Cryptography Arthitecture (JCA)</h1><p>密码架构<br>Java的Cryptography架构是一个提供访问和开发密码功能的框架。它提供了许多cryptographic服务：</p>\n<ul>\n<li>Message digest algorithms 【信息摘要算法, 如：MD5】</li>\n<li>Digital signature algorithms 【数字签名算法，DSA】</li>\n<li>Symmetric bulk encryption  【对称块加密， 如：DES】</li>\n<li>Symmetric stream encryption 【对称流加密， 如：RC4】</li>\n<li>Asymmetric encryption 【非对称加密， 如：RSA】</li>\n<li>Password-based encryption (PBE) 【密码加密】</li>\n<li>Elliptic Curve Cryptography (ECC) 【椭圆曲线加密】</li>\n<li>Key agreement algorithms 【key协议算法】</li>\n<li>Key generators 【key生成器】</li>\n<li>Message Authentication Codes (MACs) 【消息认证码】</li>\n<li>(Pseudo-)random number generators 【伪随机数生成器】<br>因为历史原因，Cryptography API位于两个独立的包内：<br>java.security(Signature, MessageDigest)和javax.crypto(Cipher, KeyAgreement)。<br>参考：<a href=\"http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a></li>\n</ul>\n<p>Java内置的Provider提供了许多通用的密码算法，比如：RSA, DSA, ECDSA等签名算法、DES, AES, ARCFOUR等加密算法、MD5, SHA-1, SHA-256等信息摘要算法、还有Diffie-Hellman和ECDH这样的密钥协商算法。<br>此外，还有一些特殊的provider。</p>\n<p>比如SunPKCS11， 它允许Java代码无缝地使用PKCS#11的compliant tokens。<br>在Windows平台上，Java还提供了一些native的Provider去连接本地的 Microsoft CryptoAPI。这个provider的名字叫MSCAPI。它允许Java应用无缝地使用Windows平台的cryptographic service。</p>\n<h1 id=\"Public-Key-Infrastructure-PKI\"><a href=\"#Public-Key-Infrastructure-PKI\" class=\"headerlink\" title=\"Public Key Infrastructure(PKI)\"></a>Public Key Infrastructure(PKI)</h1><p>公钥基础构件<br>PKI是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。<br>Java平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。PKI相关的类可以在java.security和java.security.cert包下获取。</p>\n<p>密钥和证书的仓库<br>Java提供了长期持久化密钥和证书的功能。它通过key store和certificate store来实现。java.security.KeyStore这个类代表了一个key store，一个安全的，用于存储密码和可信证书的仓库。java.security.cert.CertStore类代表了一个certificate store，用于存储不相关的，不受信的证书。同样它可以存储CRLs。<br>Java平台包含标准的PKCS#11和PKCS#12 key store类型，此外还有一个基于文件的key store类型，叫做JKS(Java Key Store)。Java平台内置了一个名叫cacerts的特殊JKS，它为CA证书提供一个默认的密钥库。<br>SunPKCS11(之前在密码架构小节有提过哦)包含了一个PKCS#11的key store实现。这意味着安全硬件(比如：smartcard)的密钥和证书可以被Java应用所使用。<br>此外，Java平台提供了LDAP的certificate store类型用于访问存放在LDAP中的证书。还有一个certificate type用于访问存放在java.util.Collection中的证书。</p>\n<p>PKI Tools<br>Java提供了两个内置的工具帮助用户使用密钥，证书和Key store：keytool和jarsigner。<br>keytool用于创建和管理key store。它可以</p>\n<ul>\n<li>创建公钥私钥对</li>\n<li>显示，导入、导出X.509 v1, v2, v3的证书</li>\n<li>创建自签名证书</li>\n<li>基于证书请求创建证书</li>\n<li>导入证书回复(certificate reply)【在外部CA颁发证书之后，会受到一个回复，该回复通常是一个PKCS7编码的证书】</li>\n<li>指定公钥证书为可信<br>jarsigner用于给JAR文件签名或者验证已经签名的JAR包。 </li>\n</ul>\n<h1 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h1><p>认证<br>Authentication是确认用户身份的过程。在Java运行时环境的上下文中，指认证执行Java程序用户的过程。在这种情况下，这个过程依赖于在Cryptography小节描述到的一些服务。</p>\n<p>Java平台提供API，用户可以通过插件式的登录模块为应用提供用户认证功能。应用调用LoginContext类(在javax.security.auth.login包内)，它依赖于配置。该配置指定了哪个登录模块(所有登录模块必须实现javax.security.auth.spi.LoginModule接口)为应用提供实际的认证功能。<br>应用只使用标准的LoginContext API， 所以能保持对于底层插件模块的独立性。新的模块可以被无缝地添加到应用中，不需要修改任何的应用代码。如下图：<br><img src=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/3.jpg\" alt=\"image\"></p>\n<p>Java平台提供了一些内置的登录模块，所有模块都可以再com.sun.security.auth.module包下找到：<br>Krb5LoginModule 【Kerberos认证】<br>JndiLoginModule 【使用LDAP/NIS的用户名/密码认证】<br>KeyStoreLoginModule 【基于Key store的认证】</p>\n<h1 id=\"Secure-Communication\"><a href=\"#Secure-Communication\" class=\"headerlink\" title=\"Secure Communication\"></a>Secure Communication</h1><p>安全通信<br>数据走网络，总会通过一些不需要接收该信息的用户。当数据包含一些私人信息时(比如密码，信用卡号等），我们必须采取措施使这些信息不落入未经授权者之手。我们也需要确保数据在传输过程中不被他人篡改。<br>Cryptography(请见Cryptography小节)是安全通讯的基础。Java平台提供了很多API来支持和实现许多标准的安全通讯协议。<br>SSL/TLS<br>对于这部分协议的实现包含了数据加密、数据完整性、服务器认证和客户端认证(可选)功能。用户的应用可以使用<a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\" target=\"_blank\" rel=\"external\">SSL/TLS</a>来为两端提供安全的数据通路。它支持任何应用协议，比如：HTTP。<br>javax.net.ssl.SSLSocket，这个socket类基于普通的stream socket(java.net.Socket)，并封装了SSL/TLS协议功能。此外，你的应用可能需要像New-I/O这样的交替式数据传输功能。javax.net.ssl.SSLEngine类可以帮你生成和解读SSL/TLS数据包。</p>\n<p>Java平台还提供API支持插件式(基于Provider)的key manager和trust manager。Key Manager封装在javax.net.ssl.KeyManager内，它管理用于认证的密钥。trust manager封装在javax.net.ssl.TrustManager类中，由它来决断哪个用户是受信的，这基于它自身管理的Key store中的证书。<br>Java平台包含了一个内置的实现了SSL/TLS协议的Provider，它支持如下协议：</p>\n<ul>\n<li>SSLv3</li>\n<li>TLSv1</li>\n<li>TLSv1.1</li>\n<li>TLSv1.2</li>\n</ul>\n<p>SASL<br><a href=\"http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82\" target=\"_blank\" rel=\"external\">Simple Authentication and Security Layer</a>， SASL定义了认证数据如何被交换，但是它本身并没有指定认证数据的内容。SASL框架可以适用于任何SASL支持的认证机制。目前有很多 标准的SASL机制用于不同的安全级别和部署场景。</p>\n<p>用户的应用使用Java的SASL API并不需要强制绑定任何特定的SASL机制，应用可以选择使用自己需要的机制。API支持客户端应用和服务端应用。用户可以使用javax.security.sasl.Sasl类创建SaslClient和SaslServer对象。</p>\n<p>SASL机制的实现可以从provider包下找到。每个provider可能提供一个或多个SASL机制。这些provider已经注册到标准的provider架构中，用户可以很方便地使用它们。下面罗列Java平台提供的SASL provider：</p>\n<ul>\n<li>DRAM-MD5，DIGEST-MD5，EXTERNAL，GSSAPI，NTLM，PLAIN client machanisms <a href=\"http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82\" target=\"_blank\" rel=\"external\">【协议相关的说明】</a></li>\n<li>DRAM-MD5，DIGEST-MD5，GSSAPI，NTLM server machanisms <a href=\"http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82\" target=\"_blank\" rel=\"external\">【协议相关的说明】</a></li>\n</ul>\n<p>GSS-API and Kerberos<br>GSS-API, Generic Security Service Application Programming Interface。GSS-API提供应用开发者基于大量底层安全机制的统一安全服务入口。目前，Java的GSS-API需要使用Kerberos v5，而Java已经包含了内置的Kerberos实现。注意，之前介绍的Krb5LoginModule可以结合GSS Kerberos使用。此外，Java平台还有内置的SPNEGO(Simple and Protected GSS API Negotiation Mechanism)的实现。<br>在两个应用使用Java GSS-API安全通信之前，它们必须建立一个共同的安全上下文。上下文封装了共享的状态信息， 比如：密钥。这两个应用都需要创建并使用org.ietf.jgss.GSSContext对象去建立和维护这些共享信息。<br>Java GSS API放在org.ietf.jgss包下。Java平台也定义了基础的Kerberos类，比如KerberosPrinciple，KerberosTicket，KerberosKey和KeyTab。这些类都在javax.security.auth.kerberos包下。</p>\n<h1 id=\"Access-Control\"><a href=\"#Access-Control\" class=\"headerlink\" title=\"Access Control\"></a>Access Control</h1><p>访问控制<br>Java平台的访问控制架构保护了对敏感资源(比如本地文件)或者应用代码(类的方法)的访问。所有访问控制的决策由security manager(java.lang.SecurityManger类)仲裁。<br>Java Applets和Java Web应用会自动使用SecurityManager。但是，本地的应用如果通过java命令来执行，默认是不会使用SecurityManager的。如果你想在上述情况下使用，那你的应用必须显示地设置它。在Java程序中，你可以调用java.lang.System#setSecurityManager方法来使用SecurityManager，你也可以通过设置参数的方式达成同样的效果：-Djava.security.manager。</p>\n<p>权限<br>当Java代码被类加载器加载时，类加载器会为代码自动关联下列信息：</p>\n<ul>\n<li>代码从哪里加载的</li>\n<li>谁签名了该代码(如果有的话)</li>\n<li>授权给该代码的默认权限</li>\n</ul>\n<p>无论代码是从一个不受信的网络下载(比如: applet)还是从本地文件系统加载，以上信息都会关联到你的代码。代码的加载路径由一个URL表示，code signer是signer的证书链。默认的权限为java.security.Permission对象。<br>对于网络下载的代码，默认权限会自动授权代码可以访问下载源的主机。对于本地代码，代码默认有对于代码目录和子目录的访问权限。<br>值得注意的是，在类加载时，系统并不会去验证执行代码的用户身份。如果有必要，应该由应用代码来完成认证的工作(见上文认证小节)。 一旦用户通过认证，应用可以动态地关联运行代码的用户和被执行的代码。这个过程由javax.security.auth.Subject类的doAs方法完成。</p>\n<p>策略 (Policy)<br>如上文所述，一个默认权限的有限集在类加载时由类加载器授权给了代码，Admin可以通过安全策略灵活地管理代码权限。<br>Java平台把策略封装在java.security.Policy类中。在任何时间，有且只有一个Policy对象被加载到了Java运行时。这个Policy负责仲裁代码是否可以访问受保护的资源。Policy如何仲裁则依赖于实现。比如，可以使用数据库保存授权信息或者使用一个外部的服务。<br>Java平台提供了默认的策略实现，它从一个或多个ASCII(UTF-8)文件中读取security properties。这些策略文件包含了授权给代码的权限集。这些策略必须符合特定的语法。策略文件可以由简单的文本编辑器或者图形化工具policytool编写。<br>Policy详解，policytool使用方式和例子: 面向Applet, 面向Application</p>\n<p>执行访问控制<br>当应用请求访问受限资源时，默认来说，Java会评判整个调用栈来决定程序是否可以访问该资源。<br>如上文所述，资源受SecurityManager保护。Java平台和应用中的安全敏感代码保护着资源访问：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecurityManager sm = System.getSecurityManager();  </div><div class=\"line\">if (sm != null) &#123;  </div><div class=\"line\">   sm.checkPermission(perm);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 代码中的perm是Permission对象，比如，要读取/tmp/abc文件，那么Permission对象可以构建如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Permission perm =   </div><div class=\"line\">    new java.io.FilePermission(&quot;/tmp/abc&quot;, &quot;read&quot;);</div></pre></td></tr></table></figure></p>\n<p>SecurityManager的默认实现把决策委派给java.security.AccessController的实现。AccessController会遍历调用栈中的每个代码元素的安全策略信息。这些策略基于Admin配置的permission决定请求是否被授权。如果未被授权则跑出java.lang.SecurityException异常。</p>\n<p>下图描绘了访问控制的执行过程。在这个特定的例子中，调用栈中有两个元素：ClassA和ClassB。ClassA调用了ClassB的一个方法。这个方法会通过FileInputStream去访问/tmp/abc这个文件。FileInputStream的构造器创建了FilePermission：perm。接着，perm被传递给SecurityManager的checkPermission方法。在本例中，只有ClassA和ClassB的权限需要验证，这是因为，所有的系统代码(FileInputStream,SecurityManager,AccessController)自动获取了所有权限。</p>\n<p>从图片中可以看到，ClassA和ClassB加载自不同的路径，并且签名者也不同。它们也可能被授予不同的权限集合。只有这两个类都被授予了访问abc的FilePermission，AccessController才会通过访问abc的请求。<br><img src=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/4.jpg\" alt=\"image\"></p>\n<h1 id=\"XML-Signature\"><a href=\"#XML-Signature\" class=\"headerlink\" title=\"XML Signature\"></a>XML Signature</h1><p>XML签名<br>Java XML数字签名API用于生成和校验XML的数字签名。XML签名可以应用于任何数据类，XML或者二进制。签名用XML表示。XML签名可以用来保护你的数据并提供数据完整性，消息认证，签名者认证功能。<br>API支持所有的W3C推荐的XML签名语法。API支持扩展和插件形式。它基于Java Cryptography服务provider架构。该API由6个包组成：</p>\n<ul>\n<li>javax.xml.crypto</li>\n<li>javax.xml.crypto.dsig</li>\n<li>javax.xml.crypto.dsig.keyinfo</li>\n<li>javax.xml.crypto.dsig.spec</li>\n<li>javax.xml.crypto.dom</li>\n<li>javax.xml.crypto.dsig.dom</li>\n</ul>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a><br><a href=\"http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\" target=\"_blank\" rel=\"external\">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href=\"http://m635674608.iteye.com/blog/1844777（强推荐）\" target=\"_blank\" rel=\"external\">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href=\"http://joshuasabrina.iteye.com/blog/1798245（强推荐）\" target=\"_blank\" rel=\"external\">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href=\"http://www.cnblogs.com/NullPointException/p/5054082.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n</ul>\n</blockquote>\n<p>Java平台(Java运行时环境，即JVM + Java API) 在多个层面上提供了security机制，在工作中常用的安全加密一般是采用jdk和spring-security提供的算法。</p>\n<h1 id=\"jdk-中加解密相关类\"><a href=\"#jdk-中加解密相关类\" class=\"headerlink\" title=\"jdk 中加解密相关类\"></a>jdk 中加解密相关类</h1><p>java的自带的加解密的算法，主要是由rt.jar下java.security 和 jce.jar（Java Cryptography Extension）加密扩展包下面的类来实现。<br>安全API中包含的各种类和接口为如下这些：</p>\n<ul>\n<li>java.security中</li>\n<li>java.security.spec</li>\n<li>java.security.interfaces</li>\n<li>javax.crypto</li>\n<li>javax.crypto.spec</li>\n<li>方法javax.crypto.interfaces<br>通过阅java的加解密源码，目的是为了有经验的程序员，希望创建自己的提供程序包提供加密服务的实现。</li>\n</ul>","more":"<h1 id=\"JCE框架\"><a href=\"#JCE框架\" class=\"headerlink\" title=\"JCE框架\"></a>JCE框架</h1><p>jdk自身并没有实现了加解密的主要是jce.jar , jac 主要包括2个软件组件：</p>\n<ul>\n<li>框架，定义并支持加密服务提供商提供实现。该框架包括软件包，比如rt.jar中的java.security中的类，jce.jar 中的javax.crypto 、javax.crypto.spec javax.interfaces</li>\n<li>实际提供了SUNJCE，SunRsaSign, 其中包含实际的加密实现，在sun.security 下有MD5 DSA等加解密的具体实现，在jdk8中发现JCE已经废除使用sun.securit 下的接口了<br>对于JCE的详情，可以参考这篇文章<a href=\"http://m635674608.iteye.com/blog/1844777\">http://m635674608.iteye.com/blog/1844777</a></li>\n</ul>\n<h1 id=\"阅读源码如何入手\"><a href=\"#阅读源码如何入手\" class=\"headerlink\" title=\"阅读源码如何入手\"></a>阅读源码如何入手</h1><p>首先，我要明确自己阅读源码的目的，我这次阅读源码的目的是搞清楚jdk下实现的加解密机制，提供的方法，是我要自定义加解密应该如何实现，虽然不知到自己能不能做到自己实现（尽管有很多加解密的实现了，工作中不提倡轮子，但学习上提倡鲁轮子，so,就硬着头皮上了）。<br>但是，在阅读源码的时候，必须要了解源码的设计背景和理念，不然会不知所措，无从看起，起码对于我这个菜鸟是这样，嘿嘿嘿，自黑一把。<br>为此，我门先要了解JDK源码。<br><img src=\"http://img.blog.csdn.net/20131204171127140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmJpcmRza3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"image\"><br>我们通常所说的JDK 包，一般是指rt.jar 下的包，其他的jar 包一般是提供商提供的或有SUN公司提供的，里面多多少少或有sun以前的代码影子，毕竟是发明者啊！他们是随时可能被代码重构的，并不能保证jdk的跨平台调用等特性。<br>jdk 下的包，一般会分为：Java.<em>、javax.</em>包，org.*包<br>1、作为J2SE的API公开接口的一部分，与操作系统无关可以在所有Java平台上运行；<br>2、不同的jdk版本会保持兼容不会轻易变化，提供API文档及源码(src.zip)。</p>\n<p>sun.<em>包：<br>1、不是API公开接口的一部分，调用sun包的程序并不能确保工作在所有Java平台上，不同的操作系统中的实现可能不相同。<br>2、不同的jdk版本sun包中的类也可能不定期的变化，因此sun.</em>包中的类没有提供API文档及源码。</p>\n<blockquote>\n<p>注意：平台无关性是Java语言最大的优势之一，从技术上讲，并不能防止你的程序调用sun.<em>包中的类。在JDK版本的变迁当中，这些类可能会被删除或转移到其它包路径下，而且它的接口（包括名称、标签等）也很有可能发生变化，在这种情况下，即便你希望程序仅仅运行在SUN的实现平台下，你仍将承受新的版本给你的系统带来破坏的风险。总之，编写依赖于sun.</em>包的Java程序是不安全的，他们将变得无法移植、破坏了程序的平台无法性、也无法被JDK各版本所兼容。</p>\n</blockquote>\n<p>javax.*包:<br>是指基于rt.jar 所做的扩展包，一般是由提供商提供。</p>\n<p>org.*包：<br>是指由开源社区或非盈利组织提供的源码。这一般很少出现在jdk中。</p>\n<h1 id=\"强大的Security-API\"><a href=\"#强大的Security-API\" class=\"headerlink\" title=\"强大的Security API\"></a>强大的Security API</h1><p>在次处，不再罗列出Java core 和JVM提供的一些security相关机制.如private, public, protected, package等安全机制。<br>在这里，重点说说Security API。<br>这套API覆盖了密码相关的功能、PKI (public key infrastructure)、认证(authentication)、安全通信(secure conmmunication)、访问控制(access control)等方方面面。接下来我们将重点介绍这部分的内容。</p>\n<h1 id=\"Basic-Security-Architecture\"><a href=\"#Basic-Security-Architecture\" class=\"headerlink\" title=\"Basic Security Architecture\"></a>Basic Security Architecture</h1><p>Security 基础架构<br>java Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。此外，除了Java提供的安全服务外，用户可以编写自定义的security provider，按需扩展Java的security平台。<br>扩展Java的security平台的库在许多框架中都有自己的实现。如：spring-security模块中org.springframework.security，这里有具体的实现。</p>\n<h1 id=\"Security-Provider\"><a href=\"#Security-Provider\" class=\"headerlink\" title=\"Security Provider\"></a>Security Provider</h1><p>java.security.Provider抽象了Java security provider。它指定了provider的名字，罗列了它实现的安全服务。多个provider可能同时被配置，他们会以优先级排列。当一个安全服务收到请求，这个服务的最高优先级的provider提供服务。<br>应用通过相关的getInstance方法来获得安全服务，比如：调用java.security.MessageDigest的getInstance方法来获得一个message digest 算法(MD5)。<a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html\">例子源于Java官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</div></pre></td></tr></table></figure>\n<p><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html\">jdk中的Provider者算法</a></p>\n<h1 id=\"Cryptography-Arthitecture-JCA\"><a href=\"#Cryptography-Arthitecture-JCA\" class=\"headerlink\" title=\"Cryptography Arthitecture (JCA)\"></a>Cryptography Arthitecture (JCA)</h1><p>密码架构<br>Java的Cryptography架构是一个提供访问和开发密码功能的框架。它提供了许多cryptographic服务：</p>\n<ul>\n<li>Message digest algorithms 【信息摘要算法, 如：MD5】</li>\n<li>Digital signature algorithms 【数字签名算法，DSA】</li>\n<li>Symmetric bulk encryption  【对称块加密， 如：DES】</li>\n<li>Symmetric stream encryption 【对称流加密， 如：RC4】</li>\n<li>Asymmetric encryption 【非对称加密， 如：RSA】</li>\n<li>Password-based encryption (PBE) 【密码加密】</li>\n<li>Elliptic Curve Cryptography (ECC) 【椭圆曲线加密】</li>\n<li>Key agreement algorithms 【key协议算法】</li>\n<li>Key generators 【key生成器】</li>\n<li>Message Authentication Codes (MACs) 【消息认证码】</li>\n<li>(Pseudo-)random number generators 【伪随机数生成器】<br>因为历史原因，Cryptography API位于两个独立的包内：<br>java.security(Signature, MessageDigest)和javax.crypto(Cipher, KeyAgreement)。<br>参考：<a href=\"http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a></li>\n</ul>\n<p>Java内置的Provider提供了许多通用的密码算法，比如：RSA, DSA, ECDSA等签名算法、DES, AES, ARCFOUR等加密算法、MD5, SHA-1, SHA-256等信息摘要算法、还有Diffie-Hellman和ECDH这样的密钥协商算法。<br>此外，还有一些特殊的provider。</p>\n<p>比如SunPKCS11， 它允许Java代码无缝地使用PKCS#11的compliant tokens。<br>在Windows平台上，Java还提供了一些native的Provider去连接本地的 Microsoft CryptoAPI。这个provider的名字叫MSCAPI。它允许Java应用无缝地使用Windows平台的cryptographic service。</p>\n<h1 id=\"Public-Key-Infrastructure-PKI\"><a href=\"#Public-Key-Infrastructure-PKI\" class=\"headerlink\" title=\"Public Key Infrastructure(PKI)\"></a>Public Key Infrastructure(PKI)</h1><p>公钥基础构件<br>PKI是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。<br>Java平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。PKI相关的类可以在java.security和java.security.cert包下获取。</p>\n<p>密钥和证书的仓库<br>Java提供了长期持久化密钥和证书的功能。它通过key store和certificate store来实现。java.security.KeyStore这个类代表了一个key store，一个安全的，用于存储密码和可信证书的仓库。java.security.cert.CertStore类代表了一个certificate store，用于存储不相关的，不受信的证书。同样它可以存储CRLs。<br>Java平台包含标准的PKCS#11和PKCS#12 key store类型，此外还有一个基于文件的key store类型，叫做JKS(Java Key Store)。Java平台内置了一个名叫cacerts的特殊JKS，它为CA证书提供一个默认的密钥库。<br>SunPKCS11(之前在密码架构小节有提过哦)包含了一个PKCS#11的key store实现。这意味着安全硬件(比如：smartcard)的密钥和证书可以被Java应用所使用。<br>此外，Java平台提供了LDAP的certificate store类型用于访问存放在LDAP中的证书。还有一个certificate type用于访问存放在java.util.Collection中的证书。</p>\n<p>PKI Tools<br>Java提供了两个内置的工具帮助用户使用密钥，证书和Key store：keytool和jarsigner。<br>keytool用于创建和管理key store。它可以</p>\n<ul>\n<li>创建公钥私钥对</li>\n<li>显示，导入、导出X.509 v1, v2, v3的证书</li>\n<li>创建自签名证书</li>\n<li>基于证书请求创建证书</li>\n<li>导入证书回复(certificate reply)【在外部CA颁发证书之后，会受到一个回复，该回复通常是一个PKCS7编码的证书】</li>\n<li>指定公钥证书为可信<br>jarsigner用于给JAR文件签名或者验证已经签名的JAR包。 </li>\n</ul>\n<h1 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h1><p>认证<br>Authentication是确认用户身份的过程。在Java运行时环境的上下文中，指认证执行Java程序用户的过程。在这种情况下，这个过程依赖于在Cryptography小节描述到的一些服务。</p>\n<p>Java平台提供API，用户可以通过插件式的登录模块为应用提供用户认证功能。应用调用LoginContext类(在javax.security.auth.login包内)，它依赖于配置。该配置指定了哪个登录模块(所有登录模块必须实现javax.security.auth.spi.LoginModule接口)为应用提供实际的认证功能。<br>应用只使用标准的LoginContext API， 所以能保持对于底层插件模块的独立性。新的模块可以被无缝地添加到应用中，不需要修改任何的应用代码。如下图：<br><img src=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/3.jpg\" alt=\"image\"></p>\n<p>Java平台提供了一些内置的登录模块，所有模块都可以再com.sun.security.auth.module包下找到：<br>Krb5LoginModule 【Kerberos认证】<br>JndiLoginModule 【使用LDAP/NIS的用户名/密码认证】<br>KeyStoreLoginModule 【基于Key store的认证】</p>\n<h1 id=\"Secure-Communication\"><a href=\"#Secure-Communication\" class=\"headerlink\" title=\"Secure Communication\"></a>Secure Communication</h1><p>安全通信<br>数据走网络，总会通过一些不需要接收该信息的用户。当数据包含一些私人信息时(比如密码，信用卡号等），我们必须采取措施使这些信息不落入未经授权者之手。我们也需要确保数据在传输过程中不被他人篡改。<br>Cryptography(请见Cryptography小节)是安全通讯的基础。Java平台提供了很多API来支持和实现许多标准的安全通讯协议。<br>SSL/TLS<br>对于这部分协议的实现包含了数据加密、数据完整性、服务器认证和客户端认证(可选)功能。用户的应用可以使用<a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">SSL/TLS</a>来为两端提供安全的数据通路。它支持任何应用协议，比如：HTTP。<br>javax.net.ssl.SSLSocket，这个socket类基于普通的stream socket(java.net.Socket)，并封装了SSL/TLS协议功能。此外，你的应用可能需要像New-I/O这样的交替式数据传输功能。javax.net.ssl.SSLEngine类可以帮你生成和解读SSL/TLS数据包。</p>\n<p>Java平台还提供API支持插件式(基于Provider)的key manager和trust manager。Key Manager封装在javax.net.ssl.KeyManager内，它管理用于认证的密钥。trust manager封装在javax.net.ssl.TrustManager类中，由它来决断哪个用户是受信的，这基于它自身管理的Key store中的证书。<br>Java平台包含了一个内置的实现了SSL/TLS协议的Provider，它支持如下协议：</p>\n<ul>\n<li>SSLv3</li>\n<li>TLSv1</li>\n<li>TLSv1.1</li>\n<li>TLSv1.2</li>\n</ul>\n<p>SASL<br><a href=\"http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82\">Simple Authentication and Security Layer</a>， SASL定义了认证数据如何被交换，但是它本身并没有指定认证数据的内容。SASL框架可以适用于任何SASL支持的认证机制。目前有很多 标准的SASL机制用于不同的安全级别和部署场景。</p>\n<p>用户的应用使用Java的SASL API并不需要强制绑定任何特定的SASL机制，应用可以选择使用自己需要的机制。API支持客户端应用和服务端应用。用户可以使用javax.security.sasl.Sasl类创建SaslClient和SaslServer对象。</p>\n<p>SASL机制的实现可以从provider包下找到。每个provider可能提供一个或多个SASL机制。这些provider已经注册到标准的provider架构中，用户可以很方便地使用它们。下面罗列Java平台提供的SASL provider：</p>\n<ul>\n<li>DRAM-MD5，DIGEST-MD5，EXTERNAL，GSSAPI，NTLM，PLAIN client machanisms <a href=\"http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82\">【协议相关的说明】</a></li>\n<li>DRAM-MD5，DIGEST-MD5，GSSAPI，NTLM server machanisms <a href=\"http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82\">【协议相关的说明】</a></li>\n</ul>\n<p>GSS-API and Kerberos<br>GSS-API, Generic Security Service Application Programming Interface。GSS-API提供应用开发者基于大量底层安全机制的统一安全服务入口。目前，Java的GSS-API需要使用Kerberos v5，而Java已经包含了内置的Kerberos实现。注意，之前介绍的Krb5LoginModule可以结合GSS Kerberos使用。此外，Java平台还有内置的SPNEGO(Simple and Protected GSS API Negotiation Mechanism)的实现。<br>在两个应用使用Java GSS-API安全通信之前，它们必须建立一个共同的安全上下文。上下文封装了共享的状态信息， 比如：密钥。这两个应用都需要创建并使用org.ietf.jgss.GSSContext对象去建立和维护这些共享信息。<br>Java GSS API放在org.ietf.jgss包下。Java平台也定义了基础的Kerberos类，比如KerberosPrinciple，KerberosTicket，KerberosKey和KeyTab。这些类都在javax.security.auth.kerberos包下。</p>\n<h1 id=\"Access-Control\"><a href=\"#Access-Control\" class=\"headerlink\" title=\"Access Control\"></a>Access Control</h1><p>访问控制<br>Java平台的访问控制架构保护了对敏感资源(比如本地文件)或者应用代码(类的方法)的访问。所有访问控制的决策由security manager(java.lang.SecurityManger类)仲裁。<br>Java Applets和Java Web应用会自动使用SecurityManager。但是，本地的应用如果通过java命令来执行，默认是不会使用SecurityManager的。如果你想在上述情况下使用，那你的应用必须显示地设置它。在Java程序中，你可以调用java.lang.System#setSecurityManager方法来使用SecurityManager，你也可以通过设置参数的方式达成同样的效果：-Djava.security.manager。</p>\n<p>权限<br>当Java代码被类加载器加载时，类加载器会为代码自动关联下列信息：</p>\n<ul>\n<li>代码从哪里加载的</li>\n<li>谁签名了该代码(如果有的话)</li>\n<li>授权给该代码的默认权限</li>\n</ul>\n<p>无论代码是从一个不受信的网络下载(比如: applet)还是从本地文件系统加载，以上信息都会关联到你的代码。代码的加载路径由一个URL表示，code signer是signer的证书链。默认的权限为java.security.Permission对象。<br>对于网络下载的代码，默认权限会自动授权代码可以访问下载源的主机。对于本地代码，代码默认有对于代码目录和子目录的访问权限。<br>值得注意的是，在类加载时，系统并不会去验证执行代码的用户身份。如果有必要，应该由应用代码来完成认证的工作(见上文认证小节)。 一旦用户通过认证，应用可以动态地关联运行代码的用户和被执行的代码。这个过程由javax.security.auth.Subject类的doAs方法完成。</p>\n<p>策略 (Policy)<br>如上文所述，一个默认权限的有限集在类加载时由类加载器授权给了代码，Admin可以通过安全策略灵活地管理代码权限。<br>Java平台把策略封装在java.security.Policy类中。在任何时间，有且只有一个Policy对象被加载到了Java运行时。这个Policy负责仲裁代码是否可以访问受保护的资源。Policy如何仲裁则依赖于实现。比如，可以使用数据库保存授权信息或者使用一个外部的服务。<br>Java平台提供了默认的策略实现，它从一个或多个ASCII(UTF-8)文件中读取security properties。这些策略文件包含了授权给代码的权限集。这些策略必须符合特定的语法。策略文件可以由简单的文本编辑器或者图形化工具policytool编写。<br>Policy详解，policytool使用方式和例子: 面向Applet, 面向Application</p>\n<p>执行访问控制<br>当应用请求访问受限资源时，默认来说，Java会评判整个调用栈来决定程序是否可以访问该资源。<br>如上文所述，资源受SecurityManager保护。Java平台和应用中的安全敏感代码保护着资源访问：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SecurityManager sm = System.getSecurityManager();  </div><div class=\"line\">if (sm != null) &#123;  </div><div class=\"line\">   sm.checkPermission(perm);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 代码中的perm是Permission对象，比如，要读取/tmp/abc文件，那么Permission对象可以构建如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Permission perm =   </div><div class=\"line\">    new java.io.FilePermission(&quot;/tmp/abc&quot;, &quot;read&quot;);</div></pre></td></tr></table></figure></p>\n<p>SecurityManager的默认实现把决策委派给java.security.AccessController的实现。AccessController会遍历调用栈中的每个代码元素的安全策略信息。这些策略基于Admin配置的permission决定请求是否被授权。如果未被授权则跑出java.lang.SecurityException异常。</p>\n<p>下图描绘了访问控制的执行过程。在这个特定的例子中，调用栈中有两个元素：ClassA和ClassB。ClassA调用了ClassB的一个方法。这个方法会通过FileInputStream去访问/tmp/abc这个文件。FileInputStream的构造器创建了FilePermission：perm。接着，perm被传递给SecurityManager的checkPermission方法。在本例中，只有ClassA和ClassB的权限需要验证，这是因为，所有的系统代码(FileInputStream,SecurityManager,AccessController)自动获取了所有权限。</p>\n<p>从图片中可以看到，ClassA和ClassB加载自不同的路径，并且签名者也不同。它们也可能被授予不同的权限集合。只有这两个类都被授予了访问abc的FilePermission，AccessController才会通过访问abc的请求。<br><img src=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/4.jpg\" alt=\"image\"></p>\n<h1 id=\"XML-Signature\"><a href=\"#XML-Signature\" class=\"headerlink\" title=\"XML Signature\"></a>XML Signature</h1><p>XML签名<br>Java XML数字签名API用于生成和校验XML的数字签名。XML签名可以应用于任何数据类，XML或者二进制。签名用XML表示。XML签名可以用来保护你的数据并提供数据完整性，消息认证，签名者认证功能。<br>API支持所有的W3C推荐的XML签名语法。API支持扩展和插件形式。它基于Java Cryptography服务provider架构。该API由6个包组成：</p>\n<ul>\n<li>javax.xml.crypto</li>\n<li>javax.xml.crypto.dsig</li>\n<li>javax.xml.crypto.dsig.keyinfo</li>\n<li>javax.xml.crypto.dsig.spec</li>\n<li>javax.xml.crypto.dom</li>\n<li>javax.xml.crypto.dsig.dom</li>\n</ul>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html\">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a><br><a href=\"http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）\">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href=\"http://m635674608.iteye.com/blog/1844777（强推荐）\">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href=\"http://joshuasabrina.iteye.com/blog/1798245（强推荐）\">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）\">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）\">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href=\"http://www.cnblogs.com/NullPointException/p/5054082.html\">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html\">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>\n</blockquote>"},{"title":"lang包之 System","_content":"\n>导读：\n- 作者: 灯塔\n- 源码：jdk1.8\n\n在我们初学习编程之处，就我来说，我一开始接触编程的语言是c语言，我相信大多数科班出身的都跟我一样，首先学习的是print(\"Hello World\").\n在我学习java时，我也是如此，毕竟学习过一门语言，再学习其他就很好的掌握方法了。\n在java 学习中， 我们是\n```\nSystem.out.println(\"Hello world!“);\n```\n当年学习的时候，会个Hello world! 对我来说已经是件兴奋不已的事情，却并没有好好的看看**System**中的源码\n\n**System**的类，包含了几个有用的属性，和方法，他们不能被实例化，下面这些方法都是**System**类所提供的。\n如：标准的输入流，标准的输出流，以及错误的输出流，和一些扩展定义的属性和环境变量方法。都是加载文件和库的一种手段，一个实用程序的方法和快速复制数组的一部分。\n\n先过目一下，这个牛叉的代码：\n```\npublic final class System {\n   /** openjdk 能找到这个cpp 文件**/\n   private static native void registerNatives();\n   static {\n      registerNatives();\n   }   \n   /** 防止被实例化**/\n   private System() {}\n   public final static InputStream in = null;\n   public final static PrintStream out = null;\n   public final static PrintStream err = null;\n   /** 允许实现安全策略 **/\n   private static volatile SecurityManager security = null;\n   ......\n   ......\n   public static Console console() {\n         if (cons == null) {\n             synchronized (System.class) {\n                 cons = sun.misc.SharedSecrets.getJavaIOAccess().console();\n             }\n         }\n         return cons;\n   }\n   ......\n   ......\n   public static\n   void setSecurityManager(final SecurityManager s) {\n        try {\n            s.checkPackageAccess(\"java.lang\");\n        } catch (Exception e) {\n        }\n        setSecurityManager0(s);\n    }\n    private static synchronized\n    void setSecurityManager0(final SecurityManager s) {\n        SecurityManager sm = getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new RuntimePermission\n                                     (\"setSecurityManager\"));\n        }\n        if ((s != null) && (s.getClass().getClassLoader() != null)) {      \n            AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                public Object run() {\n                    s.getClass().getProtectionDomain().implies\n                        (SecurityConstants.ALL_PERMISSION);\n                    return null;\n                }\n            });\n        }\n        security = s;\n    }\n\t/** 毫秒 **/\n\tpublic static native long currentTimeMillis();\n\t/** 纳秒 **/\n\tpublic static native long nanoTime();\n}\n```\n\n此外，在System中也提供了数组的复制功能\n```\n    public static native void arraycopy(Object src,  int  srcPos,\n                                        Object dest, int destPos,\n                                        int length);\n```\n- @param      src  : 表示源数组（将要被复制的）\n- @param      srcPos 复制src数组的起点\n- @param      dest   目标数组，被改变的\n- @param      destPos 目标数组的复制起点\n- @param      length 复制目标数组的个数\n例如：我们可以这样使用System.arraycopy(...)\nint[] a = {1,2,3,4,5,6,7};\nint[] b = {9,8,7,6};\nSystem.arraycopy(a, 2, b,0,2)\nb的结果为：[9,2,3,6]\n\n\n此外，**System** 还提供了一个非常重要的特性，那就是**Properties props**\n\n```\nprivate static Properties props;\nprivate static native Properties initProperties(Properties props);\n```\n下面这些属性，已经在JVM中被实现了:\n- java.version ： java 版本号\n- java.vendor ：Java供应商特定的字符串\n- java.vendor.url：Java厂商的网址\n- java.home  ： Java 安装目录\n- java.class.version ： Java类版本号\n- java.class.path  ：Java 类路径\n- os.name  ： 操作系统的名称\n- os.arch ： 操作系统的架构\n- os.version  ： 操作系统的版本号\n- file.separator  ： 文件分割符号\n- path.separator  ： 路径分割符\n- line.separator  ： 行分割符\n- user.name ： 用户名称\n- user.home ： 用户根目录\n- user.dir  用户当前工作目录\n\n我们一般会这样使用，同过System 可以有效的获取我们当前系统的环境的一些信息\n```\nSystem.getProperty(\"os.name\");\n```\n其他的类似.\n\nSystem 中还有这样的代码：\n```\n    public static void gc() {\n        Runtime.getRuntime().gc();\n    }\n```\n在执行System.gc() 的时候，会触发一下这样的JVM的垃圾回收。\n\n总结：给出一套工具类的代码：\n```\n\npublic class SystemUtils {\n    \n    /**\n     * 系统默认字符集UTF-8。\n     */\n    public static final Charset DEFAULT_CHARSET = Charset.forName(\"utf-8\");\n    \n    //内部引用，保证初始化。\n    private static String lp;\n    \n    static {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream(2);\n        PrintWriter writer = new PrintWriter(bos, true);\n        writer.println();\n        lp = new String(bos.toByteArray());\n        writer.close();\n        if(lp == null) {\n            lp = new String(new byte[]{'\\r','\\n'});\n        }\n    }\n    \n    /**\n     * lineSeparator\n     */\n    public static final String LINESEPARATOR = lp;\n    \n    /**\n     * 获取当前JVM名称。\n     * \n     * @return 当前JVM名称。\n     */\n    public static String getJavaVMName() {\n        return System.getProperty(\"java.vm.name\");\n    }\n    \n    \n    /**\n     * 获取当前JVM版本。\n     * \n     * @return  当前JVM版本。\n     */\n    public static String getJavaVMVersion() {\n        return System.getProperty(\"java.vm.version\");\n    }\n    \n    /**\n     * 获取当前JVM厂商。\n     * \n     * @return 当前JVM厂商。\n     */\n    public static String getJavaVMVendor() {\n        return System.getProperty(\"java.vm.vendor\");\n    }\n    \n    /**\n     * 获取当前Java版本。\n     * \n     * @return 当前Java版本。\n     */\n    public static String getJavaVersion() {\n        return System.getProperty(\"java.version\");\n    }\n    \n    /**\n     * 获取当前临时目录。\n     * \n     * @return 系统当前临时目录。\n     */\n    public static String getTempDir() {\n        return System.getProperty(\"java.io.tmpdir\");\n    }\n    \n    /**\n     * 获取当前操作系统的名称。\n     * \n     * @return  \n     *      当前操作系统名称。\n     */\n    public static String getOsName() {\n        return System.getProperty(\"os.name\");\n    }\n    \n    /**\n     * 获取当前操作系统版本。\n     * \n     * @return  \n     *      当前操作系统版本。\n     */\n    public static String getOsVersion() {\n        return System.getProperty(\"os.version\");\n    }\n    \n    /**\n     * 获取当前系统用户名称。\n     * \n     * @return  \n     *      当前系统用户名称。\n     */\n    public static String getUserName() {\n        return System.getProperty(\"user.name\");\n    }\n    \n    /**\n     * 获取当前JavaHome。\n     * \n     * @return  当前JavaHome, 如果没有则返回null。\n     */\n    public static String getJavaHome() {\n        return System.getProperty(\"java.home\");\n    }\n    \n    /**\n     * 获取CPU数据模型（32位还是64位，即寻址空间大小）。\n     * \n     * @return \n     *      CPU数据模型（32位还是64位）。\n     */\n    public static String getArchDataMode() {\n        return System.getProperty(\"sun.arch.data.model\");\n    }\n    \n    /**\n     * 获取当前语言环境。\n     * \n     * @return 当前语言环境，如：zh。\n     */\n    public static String getUserLanguage() {\n        return System.getProperty(\"user.language\");\n    }\n    \n    /**\n     * 获取文件分隔符。\n     * \n     * @return 文件分隔符。\n     */\n    public static String getFileSeparator() {\n        return System.getProperty(\"file.separator\");\n    }\n    \n    /**\n     * 获取处理器数量（CPU核心数量）。\n     * \n     * @return 处理器数量。\n     */\n    public static int getProcessorCount() {\n        return Runtime.getRuntime().availableProcessors();\n    }\n    \n    /**\n     * 获取当前JVM空闲内存。\n     * \n     * @return 当前JVM空闲内存，单位（字节）。\n     */\n    public static long getFreeMemory() {\n        return Runtime.getRuntime().freeMemory();\n    }\n    \n    /**\n     * 获取当前JVM最大内存\n     * \n     * @return 当前JVM最大内存，单位（字节）。\n     */\n    public static long getMaxMemory() {\n        return  Runtime.getRuntime().maxMemory();\n    }\n    \n    /**\n     * <p>获取当前JVM总内存\n     * <p>总内存可以不等于最大内存，取决于JVM的设置（参见-Xms -Xmx等参数），当\n     * 最小内存不等于最大内存时，内存空间可扩展。\n     * \n     * @return \n     */\n    public static long getTotalMemory() {\n        return Runtime.getRuntime().totalMemory();\n    }\n    \n    /**\n     * 打印当前所有线程栈追踪信息。\n     */\n    public static void printAllStackTrack() {\n        Map<Thread, StackTraceElement[]> stMap = Thread.getAllStackTraces();\n        for(Thread thread : stMap.keySet()) {\n            StackTraceElement[] elements = stMap.get(thread);\n            System.out.println(thread);\n            for (StackTraceElement element : elements) {\n                System.out.println(\"    \"+element);\n            }\n        }\n    }\n    \n    /**\n     * 获取当前JVM运行时间（从启动到当前的时间）。\n     * \n     * @return \n     *      当前JVM启动时间，单位（毫秒）。\n     */     \n    public static long getJavaVMUptime() {\n        // throw new UnsupportedOperationException();  \n        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n        if(runtimeMXBean != null){\n                return runtimeMXBean.getUptime();\n        }\n        //can't happen\n        return -1;        \n    }\n    \n    /**\n     * 获取当前JVM启动时间。\n     * \n     * @return \n     *      当前JVM启动时间，单位（毫秒）。\n     */\n    public static long getJavaVMStartTime() {\n        // throw new UnsupportedOperationException();  \n        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n        if(runtimeMXBean != null){\n                return runtimeMXBean.getStartTime();\n        }\n        //can't happen\n        return -1;       \n    }   \n    \n    private SystemUtils(){}\n}\n\n```\n\n\n","source":"_posts/java.lang/01.md","raw":"---\ntitle: lang包之 System\ncategories:\n- 源码阅读\n- lang包\ntags:\n- jdk源码系列\n- java\n---\n\n>导读：\n- 作者: 灯塔\n- 源码：jdk1.8\n\n在我们初学习编程之处，就我来说，我一开始接触编程的语言是c语言，我相信大多数科班出身的都跟我一样，首先学习的是print(\"Hello World\").\n在我学习java时，我也是如此，毕竟学习过一门语言，再学习其他就很好的掌握方法了。\n在java 学习中， 我们是\n```\nSystem.out.println(\"Hello world!“);\n```\n当年学习的时候，会个Hello world! 对我来说已经是件兴奋不已的事情，却并没有好好的看看**System**中的源码\n\n**System**的类，包含了几个有用的属性，和方法，他们不能被实例化，下面这些方法都是**System**类所提供的。\n如：标准的输入流，标准的输出流，以及错误的输出流，和一些扩展定义的属性和环境变量方法。都是加载文件和库的一种手段，一个实用程序的方法和快速复制数组的一部分。\n\n先过目一下，这个牛叉的代码：\n```\npublic final class System {\n   /** openjdk 能找到这个cpp 文件**/\n   private static native void registerNatives();\n   static {\n      registerNatives();\n   }   \n   /** 防止被实例化**/\n   private System() {}\n   public final static InputStream in = null;\n   public final static PrintStream out = null;\n   public final static PrintStream err = null;\n   /** 允许实现安全策略 **/\n   private static volatile SecurityManager security = null;\n   ......\n   ......\n   public static Console console() {\n         if (cons == null) {\n             synchronized (System.class) {\n                 cons = sun.misc.SharedSecrets.getJavaIOAccess().console();\n             }\n         }\n         return cons;\n   }\n   ......\n   ......\n   public static\n   void setSecurityManager(final SecurityManager s) {\n        try {\n            s.checkPackageAccess(\"java.lang\");\n        } catch (Exception e) {\n        }\n        setSecurityManager0(s);\n    }\n    private static synchronized\n    void setSecurityManager0(final SecurityManager s) {\n        SecurityManager sm = getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new RuntimePermission\n                                     (\"setSecurityManager\"));\n        }\n        if ((s != null) && (s.getClass().getClassLoader() != null)) {      \n            AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                public Object run() {\n                    s.getClass().getProtectionDomain().implies\n                        (SecurityConstants.ALL_PERMISSION);\n                    return null;\n                }\n            });\n        }\n        security = s;\n    }\n\t/** 毫秒 **/\n\tpublic static native long currentTimeMillis();\n\t/** 纳秒 **/\n\tpublic static native long nanoTime();\n}\n```\n\n此外，在System中也提供了数组的复制功能\n```\n    public static native void arraycopy(Object src,  int  srcPos,\n                                        Object dest, int destPos,\n                                        int length);\n```\n- @param      src  : 表示源数组（将要被复制的）\n- @param      srcPos 复制src数组的起点\n- @param      dest   目标数组，被改变的\n- @param      destPos 目标数组的复制起点\n- @param      length 复制目标数组的个数\n例如：我们可以这样使用System.arraycopy(...)\nint[] a = {1,2,3,4,5,6,7};\nint[] b = {9,8,7,6};\nSystem.arraycopy(a, 2, b,0,2)\nb的结果为：[9,2,3,6]\n\n\n此外，**System** 还提供了一个非常重要的特性，那就是**Properties props**\n\n```\nprivate static Properties props;\nprivate static native Properties initProperties(Properties props);\n```\n下面这些属性，已经在JVM中被实现了:\n- java.version ： java 版本号\n- java.vendor ：Java供应商特定的字符串\n- java.vendor.url：Java厂商的网址\n- java.home  ： Java 安装目录\n- java.class.version ： Java类版本号\n- java.class.path  ：Java 类路径\n- os.name  ： 操作系统的名称\n- os.arch ： 操作系统的架构\n- os.version  ： 操作系统的版本号\n- file.separator  ： 文件分割符号\n- path.separator  ： 路径分割符\n- line.separator  ： 行分割符\n- user.name ： 用户名称\n- user.home ： 用户根目录\n- user.dir  用户当前工作目录\n\n我们一般会这样使用，同过System 可以有效的获取我们当前系统的环境的一些信息\n```\nSystem.getProperty(\"os.name\");\n```\n其他的类似.\n\nSystem 中还有这样的代码：\n```\n    public static void gc() {\n        Runtime.getRuntime().gc();\n    }\n```\n在执行System.gc() 的时候，会触发一下这样的JVM的垃圾回收。\n\n总结：给出一套工具类的代码：\n```\n\npublic class SystemUtils {\n    \n    /**\n     * 系统默认字符集UTF-8。\n     */\n    public static final Charset DEFAULT_CHARSET = Charset.forName(\"utf-8\");\n    \n    //内部引用，保证初始化。\n    private static String lp;\n    \n    static {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream(2);\n        PrintWriter writer = new PrintWriter(bos, true);\n        writer.println();\n        lp = new String(bos.toByteArray());\n        writer.close();\n        if(lp == null) {\n            lp = new String(new byte[]{'\\r','\\n'});\n        }\n    }\n    \n    /**\n     * lineSeparator\n     */\n    public static final String LINESEPARATOR = lp;\n    \n    /**\n     * 获取当前JVM名称。\n     * \n     * @return 当前JVM名称。\n     */\n    public static String getJavaVMName() {\n        return System.getProperty(\"java.vm.name\");\n    }\n    \n    \n    /**\n     * 获取当前JVM版本。\n     * \n     * @return  当前JVM版本。\n     */\n    public static String getJavaVMVersion() {\n        return System.getProperty(\"java.vm.version\");\n    }\n    \n    /**\n     * 获取当前JVM厂商。\n     * \n     * @return 当前JVM厂商。\n     */\n    public static String getJavaVMVendor() {\n        return System.getProperty(\"java.vm.vendor\");\n    }\n    \n    /**\n     * 获取当前Java版本。\n     * \n     * @return 当前Java版本。\n     */\n    public static String getJavaVersion() {\n        return System.getProperty(\"java.version\");\n    }\n    \n    /**\n     * 获取当前临时目录。\n     * \n     * @return 系统当前临时目录。\n     */\n    public static String getTempDir() {\n        return System.getProperty(\"java.io.tmpdir\");\n    }\n    \n    /**\n     * 获取当前操作系统的名称。\n     * \n     * @return  \n     *      当前操作系统名称。\n     */\n    public static String getOsName() {\n        return System.getProperty(\"os.name\");\n    }\n    \n    /**\n     * 获取当前操作系统版本。\n     * \n     * @return  \n     *      当前操作系统版本。\n     */\n    public static String getOsVersion() {\n        return System.getProperty(\"os.version\");\n    }\n    \n    /**\n     * 获取当前系统用户名称。\n     * \n     * @return  \n     *      当前系统用户名称。\n     */\n    public static String getUserName() {\n        return System.getProperty(\"user.name\");\n    }\n    \n    /**\n     * 获取当前JavaHome。\n     * \n     * @return  当前JavaHome, 如果没有则返回null。\n     */\n    public static String getJavaHome() {\n        return System.getProperty(\"java.home\");\n    }\n    \n    /**\n     * 获取CPU数据模型（32位还是64位，即寻址空间大小）。\n     * \n     * @return \n     *      CPU数据模型（32位还是64位）。\n     */\n    public static String getArchDataMode() {\n        return System.getProperty(\"sun.arch.data.model\");\n    }\n    \n    /**\n     * 获取当前语言环境。\n     * \n     * @return 当前语言环境，如：zh。\n     */\n    public static String getUserLanguage() {\n        return System.getProperty(\"user.language\");\n    }\n    \n    /**\n     * 获取文件分隔符。\n     * \n     * @return 文件分隔符。\n     */\n    public static String getFileSeparator() {\n        return System.getProperty(\"file.separator\");\n    }\n    \n    /**\n     * 获取处理器数量（CPU核心数量）。\n     * \n     * @return 处理器数量。\n     */\n    public static int getProcessorCount() {\n        return Runtime.getRuntime().availableProcessors();\n    }\n    \n    /**\n     * 获取当前JVM空闲内存。\n     * \n     * @return 当前JVM空闲内存，单位（字节）。\n     */\n    public static long getFreeMemory() {\n        return Runtime.getRuntime().freeMemory();\n    }\n    \n    /**\n     * 获取当前JVM最大内存\n     * \n     * @return 当前JVM最大内存，单位（字节）。\n     */\n    public static long getMaxMemory() {\n        return  Runtime.getRuntime().maxMemory();\n    }\n    \n    /**\n     * <p>获取当前JVM总内存\n     * <p>总内存可以不等于最大内存，取决于JVM的设置（参见-Xms -Xmx等参数），当\n     * 最小内存不等于最大内存时，内存空间可扩展。\n     * \n     * @return \n     */\n    public static long getTotalMemory() {\n        return Runtime.getRuntime().totalMemory();\n    }\n    \n    /**\n     * 打印当前所有线程栈追踪信息。\n     */\n    public static void printAllStackTrack() {\n        Map<Thread, StackTraceElement[]> stMap = Thread.getAllStackTraces();\n        for(Thread thread : stMap.keySet()) {\n            StackTraceElement[] elements = stMap.get(thread);\n            System.out.println(thread);\n            for (StackTraceElement element : elements) {\n                System.out.println(\"    \"+element);\n            }\n        }\n    }\n    \n    /**\n     * 获取当前JVM运行时间（从启动到当前的时间）。\n     * \n     * @return \n     *      当前JVM启动时间，单位（毫秒）。\n     */     \n    public static long getJavaVMUptime() {\n        // throw new UnsupportedOperationException();  \n        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n        if(runtimeMXBean != null){\n                return runtimeMXBean.getUptime();\n        }\n        //can't happen\n        return -1;        \n    }\n    \n    /**\n     * 获取当前JVM启动时间。\n     * \n     * @return \n     *      当前JVM启动时间，单位（毫秒）。\n     */\n    public static long getJavaVMStartTime() {\n        // throw new UnsupportedOperationException();  \n        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n        if(runtimeMXBean != null){\n                return runtimeMXBean.getStartTime();\n        }\n        //can't happen\n        return -1;       \n    }   \n    \n    private SystemUtils(){}\n}\n\n```\n\n\n","slug":"java.lang/01","published":1,"date":"2016-11-27T11:48:04.754Z","updated":"2016-11-27T14:18:41.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp81r001wc88qczekr9q3","content":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>作者: 灯塔</li>\n<li>源码：jdk1.8</li>\n</ul>\n</blockquote>\n<p>在我们初学习编程之处，就我来说，我一开始接触编程的语言是c语言，我相信大多数科班出身的都跟我一样，首先学习的是print(“Hello World”).<br>在我学习java时，我也是如此，毕竟学习过一门语言，再学习其他就很好的掌握方法了。<br>在java 学习中， 我们是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(&quot;Hello world!“);</div></pre></td></tr></table></figure></p>\n<p>当年学习的时候，会个Hello world! 对我来说已经是件兴奋不已的事情，却并没有好好的看看<strong>System</strong>中的源码</p>\n<p><strong>System</strong>的类，包含了几个有用的属性，和方法，他们不能被实例化，下面这些方法都是<strong>System</strong>类所提供的。<br>如：标准的输入流，标准的输出流，以及错误的输出流，和一些扩展定义的属性和环境变量方法。都是加载文件和库的一种手段，一个实用程序的方法和快速复制数组的一部分。</p>\n<p>先过目一下，这个牛叉的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class System &#123;</div><div class=\"line\">   /** openjdk 能找到这个cpp 文件**/</div><div class=\"line\">   private static native void registerNatives();</div><div class=\"line\">   static &#123;</div><div class=\"line\">      registerNatives();</div><div class=\"line\">   &#125;   </div><div class=\"line\">   /** 防止被实例化**/</div><div class=\"line\">   private System() &#123;&#125;</div><div class=\"line\">   public final static InputStream in = null;</div><div class=\"line\">   public final static PrintStream out = null;</div><div class=\"line\">   public final static PrintStream err = null;</div><div class=\"line\">   /** 允许实现安全策略 **/</div><div class=\"line\">   private static volatile SecurityManager security = null;</div><div class=\"line\">   ......</div><div class=\"line\">   ......</div><div class=\"line\">   public static Console console() &#123;</div><div class=\"line\">         if (cons == null) &#123;</div><div class=\"line\">             synchronized (System.class) &#123;</div><div class=\"line\">                 cons = sun.misc.SharedSecrets.getJavaIOAccess().console();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">         return cons;</div><div class=\"line\">   &#125;</div><div class=\"line\">   ......</div><div class=\"line\">   ......</div><div class=\"line\">   public static</div><div class=\"line\">   void setSecurityManager(final SecurityManager s) &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            s.checkPackageAccess(&quot;java.lang&quot;);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setSecurityManager0(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">    private static synchronized</div><div class=\"line\">    void setSecurityManager0(final SecurityManager s) &#123;</div><div class=\"line\">        SecurityManager sm = getSecurityManager();</div><div class=\"line\">        if (sm != null) &#123;</div><div class=\"line\">            sm.checkPermission(new RuntimePermission</div><div class=\"line\">                                     (&quot;setSecurityManager&quot;));</div><div class=\"line\">        &#125;</div><div class=\"line\">        if ((s != null) &amp;&amp; (s.getClass().getClassLoader() != null)) &#123;      </div><div class=\"line\">            AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</div><div class=\"line\">                public Object run() &#123;</div><div class=\"line\">                    s.getClass().getProtectionDomain().implies</div><div class=\"line\">                        (SecurityConstants.ALL_PERMISSION);</div><div class=\"line\">                    return null;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        security = s;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t/** 毫秒 **/</div><div class=\"line\">\tpublic static native long currentTimeMillis();</div><div class=\"line\">\t/** 纳秒 **/</div><div class=\"line\">\tpublic static native long nanoTime();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此外，在System中也提供了数组的复制功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static native void arraycopy(Object src,  int  srcPos,</div><div class=\"line\">                                    Object dest, int destPos,</div><div class=\"line\">                                    int length);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>@param      src  : 表示源数组（将要被复制的）</li>\n<li>@param      srcPos 复制src数组的起点</li>\n<li>@param      dest   目标数组，被改变的</li>\n<li>@param      destPos 目标数组的复制起点</li>\n<li>@param      length 复制目标数组的个数<br>例如：我们可以这样使用System.arraycopy(…)<br>int[] a = {1,2,3,4,5,6,7};<br>int[] b = {9,8,7,6};<br>System.arraycopy(a, 2, b,0,2)<br>b的结果为：[9,2,3,6]</li>\n</ul>\n<p>此外，<strong>System</strong> 还提供了一个非常重要的特性，那就是<strong>Properties props</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Properties props;</div><div class=\"line\">private static native Properties initProperties(Properties props);</div></pre></td></tr></table></figure>\n<p>下面这些属性，已经在JVM中被实现了:</p>\n<ul>\n<li>java.version ： java 版本号</li>\n<li>java.vendor ：Java供应商特定的字符串</li>\n<li>java.vendor.url：Java厂商的网址</li>\n<li>java.home  ： Java 安装目录</li>\n<li>java.class.version ： Java类版本号</li>\n<li>java.class.path  ：Java 类路径</li>\n<li>os.name  ： 操作系统的名称</li>\n<li>os.arch ： 操作系统的架构</li>\n<li>os.version  ： 操作系统的版本号</li>\n<li>file.separator  ： 文件分割符号</li>\n<li>path.separator  ： 路径分割符</li>\n<li>line.separator  ： 行分割符</li>\n<li>user.name ： 用户名称</li>\n<li>user.home ： 用户根目录</li>\n<li>user.dir  用户当前工作目录</li>\n</ul>\n<p>我们一般会这样使用，同过System 可以有效的获取我们当前系统的环境的一些信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.getProperty(&quot;os.name&quot;);</div></pre></td></tr></table></figure></p>\n<p>其他的类似.</p>\n<p>System 中还有这样的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void gc() &#123;</div><div class=\"line\">    Runtime.getRuntime().gc();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在执行System.gc() 的时候，会触发一下这样的JVM的垃圾回收。</p>\n<p>总结：给出一套工具类的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class SystemUtils &#123;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 系统默认字符集UTF-8。</div><div class=\"line\">     */</div><div class=\"line\">    public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;utf-8&quot;);</div><div class=\"line\">    </div><div class=\"line\">    //内部引用，保证初始化。</div><div class=\"line\">    private static String lp;</div><div class=\"line\">    </div><div class=\"line\">    static &#123;</div><div class=\"line\">        ByteArrayOutputStream bos = new ByteArrayOutputStream(2);</div><div class=\"line\">        PrintWriter writer = new PrintWriter(bos, true);</div><div class=\"line\">        writer.println();</div><div class=\"line\">        lp = new String(bos.toByteArray());</div><div class=\"line\">        writer.close();</div><div class=\"line\">        if(lp == null) &#123;</div><div class=\"line\">            lp = new String(new byte[]&#123;&apos;\\r&apos;,&apos;\\n&apos;&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * lineSeparator</div><div class=\"line\">     */</div><div class=\"line\">    public static final String LINESEPARATOR = lp;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM名称。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM名称。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVMName() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.vm.name&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM版本。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  当前JVM版本。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVMVersion() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.vm.version&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM厂商。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM厂商。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVMVendor() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.vm.vendor&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前Java版本。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前Java版本。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVersion() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.version&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前临时目录。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 系统当前临时目录。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getTempDir() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.io.tmpdir&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前操作系统的名称。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  </div><div class=\"line\">     *      当前操作系统名称。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getOsName() &#123;</div><div class=\"line\">        return System.getProperty(&quot;os.name&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前操作系统版本。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  </div><div class=\"line\">     *      当前操作系统版本。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getOsVersion() &#123;</div><div class=\"line\">        return System.getProperty(&quot;os.version&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前系统用户名称。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  </div><div class=\"line\">     *      当前系统用户名称。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getUserName() &#123;</div><div class=\"line\">        return System.getProperty(&quot;user.name&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JavaHome。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  当前JavaHome, 如果没有则返回null。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaHome() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.home&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取CPU数据模型（32位还是64位，即寻址空间大小）。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     *      CPU数据模型（32位还是64位）。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getArchDataMode() &#123;</div><div class=\"line\">        return System.getProperty(&quot;sun.arch.data.model&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前语言环境。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前语言环境，如：zh。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getUserLanguage() &#123;</div><div class=\"line\">        return System.getProperty(&quot;user.language&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取文件分隔符。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 文件分隔符。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFileSeparator() &#123;</div><div class=\"line\">        return System.getProperty(&quot;file.separator&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取处理器数量（CPU核心数量）。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 处理器数量。</div><div class=\"line\">     */</div><div class=\"line\">    public static int getProcessorCount() &#123;</div><div class=\"line\">        return Runtime.getRuntime().availableProcessors();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM空闲内存。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM空闲内存，单位（字节）。</div><div class=\"line\">     */</div><div class=\"line\">    public static long getFreeMemory() &#123;</div><div class=\"line\">        return Runtime.getRuntime().freeMemory();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM最大内存</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM最大内存，单位（字节）。</div><div class=\"line\">     */</div><div class=\"line\">    public static long getMaxMemory() &#123;</div><div class=\"line\">        return  Runtime.getRuntime().maxMemory();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * &lt;p&gt;获取当前JVM总内存</div><div class=\"line\">     * &lt;p&gt;总内存可以不等于最大内存，取决于JVM的设置（参见-Xms -Xmx等参数），当</div><div class=\"line\">     * 最小内存不等于最大内存时，内存空间可扩展。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     */</div><div class=\"line\">    public static long getTotalMemory() &#123;</div><div class=\"line\">        return Runtime.getRuntime().totalMemory();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 打印当前所有线程栈追踪信息。</div><div class=\"line\">     */</div><div class=\"line\">    public static void printAllStackTrack() &#123;</div><div class=\"line\">        Map&lt;Thread, StackTraceElement[]&gt; stMap = Thread.getAllStackTraces();</div><div class=\"line\">        for(Thread thread : stMap.keySet()) &#123;</div><div class=\"line\">            StackTraceElement[] elements = stMap.get(thread);</div><div class=\"line\">            System.out.println(thread);</div><div class=\"line\">            for (StackTraceElement element : elements) &#123;</div><div class=\"line\">                System.out.println(&quot;    &quot;+element);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM运行时间（从启动到当前的时间）。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     *      当前JVM启动时间，单位（毫秒）。</div><div class=\"line\">     */     </div><div class=\"line\">    public static long getJavaVMUptime() &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();  </div><div class=\"line\">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</div><div class=\"line\">        if(runtimeMXBean != null)&#123;</div><div class=\"line\">                return runtimeMXBean.getUptime();</div><div class=\"line\">        &#125;</div><div class=\"line\">        //can&apos;t happen</div><div class=\"line\">        return -1;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM启动时间。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     *      当前JVM启动时间，单位（毫秒）。</div><div class=\"line\">     */</div><div class=\"line\">    public static long getJavaVMStartTime() &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();  </div><div class=\"line\">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</div><div class=\"line\">        if(runtimeMXBean != null)&#123;</div><div class=\"line\">                return runtimeMXBean.getStartTime();</div><div class=\"line\">        &#125;</div><div class=\"line\">        //can&apos;t happen</div><div class=\"line\">        return -1;       </div><div class=\"line\">    &#125;   </div><div class=\"line\">    </div><div class=\"line\">    private SystemUtils()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>导读：</p>\n<ul>\n<li>作者: 灯塔</li>\n<li>源码：jdk1.8</li>\n</ul>\n</blockquote>\n<p>在我们初学习编程之处，就我来说，我一开始接触编程的语言是c语言，我相信大多数科班出身的都跟我一样，首先学习的是print(“Hello World”).<br>在我学习java时，我也是如此，毕竟学习过一门语言，再学习其他就很好的掌握方法了。<br>在java 学习中， 我们是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(&quot;Hello world!“);</div></pre></td></tr></table></figure></p>\n<p>当年学习的时候，会个Hello world! 对我来说已经是件兴奋不已的事情，却并没有好好的看看<strong>System</strong>中的源码</p>\n<p><strong>System</strong>的类，包含了几个有用的属性，和方法，他们不能被实例化，下面这些方法都是<strong>System</strong>类所提供的。<br>如：标准的输入流，标准的输出流，以及错误的输出流，和一些扩展定义的属性和环境变量方法。都是加载文件和库的一种手段，一个实用程序的方法和快速复制数组的一部分。</p>\n<p>先过目一下，这个牛叉的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class System &#123;</div><div class=\"line\">   /** openjdk 能找到这个cpp 文件**/</div><div class=\"line\">   private static native void registerNatives();</div><div class=\"line\">   static &#123;</div><div class=\"line\">      registerNatives();</div><div class=\"line\">   &#125;   </div><div class=\"line\">   /** 防止被实例化**/</div><div class=\"line\">   private System() &#123;&#125;</div><div class=\"line\">   public final static InputStream in = null;</div><div class=\"line\">   public final static PrintStream out = null;</div><div class=\"line\">   public final static PrintStream err = null;</div><div class=\"line\">   /** 允许实现安全策略 **/</div><div class=\"line\">   private static volatile SecurityManager security = null;</div><div class=\"line\">   ......</div><div class=\"line\">   ......</div><div class=\"line\">   public static Console console() &#123;</div><div class=\"line\">         if (cons == null) &#123;</div><div class=\"line\">             synchronized (System.class) &#123;</div><div class=\"line\">                 cons = sun.misc.SharedSecrets.getJavaIOAccess().console();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">         return cons;</div><div class=\"line\">   &#125;</div><div class=\"line\">   ......</div><div class=\"line\">   ......</div><div class=\"line\">   public static</div><div class=\"line\">   void setSecurityManager(final SecurityManager s) &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            s.checkPackageAccess(&quot;java.lang&quot;);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setSecurityManager0(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">    private static synchronized</div><div class=\"line\">    void setSecurityManager0(final SecurityManager s) &#123;</div><div class=\"line\">        SecurityManager sm = getSecurityManager();</div><div class=\"line\">        if (sm != null) &#123;</div><div class=\"line\">            sm.checkPermission(new RuntimePermission</div><div class=\"line\">                                     (&quot;setSecurityManager&quot;));</div><div class=\"line\">        &#125;</div><div class=\"line\">        if ((s != null) &amp;&amp; (s.getClass().getClassLoader() != null)) &#123;      </div><div class=\"line\">            AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</div><div class=\"line\">                public Object run() &#123;</div><div class=\"line\">                    s.getClass().getProtectionDomain().implies</div><div class=\"line\">                        (SecurityConstants.ALL_PERMISSION);</div><div class=\"line\">                    return null;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        security = s;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t/** 毫秒 **/</div><div class=\"line\">\tpublic static native long currentTimeMillis();</div><div class=\"line\">\t/** 纳秒 **/</div><div class=\"line\">\tpublic static native long nanoTime();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此外，在System中也提供了数组的复制功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static native void arraycopy(Object src,  int  srcPos,</div><div class=\"line\">                                    Object dest, int destPos,</div><div class=\"line\">                                    int length);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>@param      src  : 表示源数组（将要被复制的）</li>\n<li>@param      srcPos 复制src数组的起点</li>\n<li>@param      dest   目标数组，被改变的</li>\n<li>@param      destPos 目标数组的复制起点</li>\n<li>@param      length 复制目标数组的个数<br>例如：我们可以这样使用System.arraycopy(…)<br>int[] a = {1,2,3,4,5,6,7};<br>int[] b = {9,8,7,6};<br>System.arraycopy(a, 2, b,0,2)<br>b的结果为：[9,2,3,6]</li>\n</ul>\n<p>此外，<strong>System</strong> 还提供了一个非常重要的特性，那就是<strong>Properties props</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Properties props;</div><div class=\"line\">private static native Properties initProperties(Properties props);</div></pre></td></tr></table></figure>\n<p>下面这些属性，已经在JVM中被实现了:</p>\n<ul>\n<li>java.version ： java 版本号</li>\n<li>java.vendor ：Java供应商特定的字符串</li>\n<li>java.vendor.url：Java厂商的网址</li>\n<li>java.home  ： Java 安装目录</li>\n<li>java.class.version ： Java类版本号</li>\n<li>java.class.path  ：Java 类路径</li>\n<li>os.name  ： 操作系统的名称</li>\n<li>os.arch ： 操作系统的架构</li>\n<li>os.version  ： 操作系统的版本号</li>\n<li>file.separator  ： 文件分割符号</li>\n<li>path.separator  ： 路径分割符</li>\n<li>line.separator  ： 行分割符</li>\n<li>user.name ： 用户名称</li>\n<li>user.home ： 用户根目录</li>\n<li>user.dir  用户当前工作目录</li>\n</ul>\n<p>我们一般会这样使用，同过System 可以有效的获取我们当前系统的环境的一些信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.getProperty(&quot;os.name&quot;);</div></pre></td></tr></table></figure></p>\n<p>其他的类似.</p>\n<p>System 中还有这样的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void gc() &#123;</div><div class=\"line\">    Runtime.getRuntime().gc();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在执行System.gc() 的时候，会触发一下这样的JVM的垃圾回收。</p>\n<p>总结：给出一套工具类的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class SystemUtils &#123;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 系统默认字符集UTF-8。</div><div class=\"line\">     */</div><div class=\"line\">    public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;utf-8&quot;);</div><div class=\"line\">    </div><div class=\"line\">    //内部引用，保证初始化。</div><div class=\"line\">    private static String lp;</div><div class=\"line\">    </div><div class=\"line\">    static &#123;</div><div class=\"line\">        ByteArrayOutputStream bos = new ByteArrayOutputStream(2);</div><div class=\"line\">        PrintWriter writer = new PrintWriter(bos, true);</div><div class=\"line\">        writer.println();</div><div class=\"line\">        lp = new String(bos.toByteArray());</div><div class=\"line\">        writer.close();</div><div class=\"line\">        if(lp == null) &#123;</div><div class=\"line\">            lp = new String(new byte[]&#123;&apos;\\r&apos;,&apos;\\n&apos;&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * lineSeparator</div><div class=\"line\">     */</div><div class=\"line\">    public static final String LINESEPARATOR = lp;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM名称。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM名称。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVMName() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.vm.name&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM版本。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  当前JVM版本。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVMVersion() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.vm.version&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM厂商。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM厂商。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVMVendor() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.vm.vendor&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前Java版本。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前Java版本。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaVersion() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.version&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前临时目录。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 系统当前临时目录。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getTempDir() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.io.tmpdir&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前操作系统的名称。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  </div><div class=\"line\">     *      当前操作系统名称。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getOsName() &#123;</div><div class=\"line\">        return System.getProperty(&quot;os.name&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前操作系统版本。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  </div><div class=\"line\">     *      当前操作系统版本。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getOsVersion() &#123;</div><div class=\"line\">        return System.getProperty(&quot;os.version&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前系统用户名称。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  </div><div class=\"line\">     *      当前系统用户名称。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getUserName() &#123;</div><div class=\"line\">        return System.getProperty(&quot;user.name&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JavaHome。</div><div class=\"line\">     * </div><div class=\"line\">     * @return  当前JavaHome, 如果没有则返回null。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getJavaHome() &#123;</div><div class=\"line\">        return System.getProperty(&quot;java.home&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取CPU数据模型（32位还是64位，即寻址空间大小）。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     *      CPU数据模型（32位还是64位）。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getArchDataMode() &#123;</div><div class=\"line\">        return System.getProperty(&quot;sun.arch.data.model&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前语言环境。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前语言环境，如：zh。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getUserLanguage() &#123;</div><div class=\"line\">        return System.getProperty(&quot;user.language&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取文件分隔符。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 文件分隔符。</div><div class=\"line\">     */</div><div class=\"line\">    public static String getFileSeparator() &#123;</div><div class=\"line\">        return System.getProperty(&quot;file.separator&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取处理器数量（CPU核心数量）。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 处理器数量。</div><div class=\"line\">     */</div><div class=\"line\">    public static int getProcessorCount() &#123;</div><div class=\"line\">        return Runtime.getRuntime().availableProcessors();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM空闲内存。</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM空闲内存，单位（字节）。</div><div class=\"line\">     */</div><div class=\"line\">    public static long getFreeMemory() &#123;</div><div class=\"line\">        return Runtime.getRuntime().freeMemory();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM最大内存</div><div class=\"line\">     * </div><div class=\"line\">     * @return 当前JVM最大内存，单位（字节）。</div><div class=\"line\">     */</div><div class=\"line\">    public static long getMaxMemory() &#123;</div><div class=\"line\">        return  Runtime.getRuntime().maxMemory();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * &lt;p&gt;获取当前JVM总内存</div><div class=\"line\">     * &lt;p&gt;总内存可以不等于最大内存，取决于JVM的设置（参见-Xms -Xmx等参数），当</div><div class=\"line\">     * 最小内存不等于最大内存时，内存空间可扩展。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     */</div><div class=\"line\">    public static long getTotalMemory() &#123;</div><div class=\"line\">        return Runtime.getRuntime().totalMemory();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 打印当前所有线程栈追踪信息。</div><div class=\"line\">     */</div><div class=\"line\">    public static void printAllStackTrack() &#123;</div><div class=\"line\">        Map&lt;Thread, StackTraceElement[]&gt; stMap = Thread.getAllStackTraces();</div><div class=\"line\">        for(Thread thread : stMap.keySet()) &#123;</div><div class=\"line\">            StackTraceElement[] elements = stMap.get(thread);</div><div class=\"line\">            System.out.println(thread);</div><div class=\"line\">            for (StackTraceElement element : elements) &#123;</div><div class=\"line\">                System.out.println(&quot;    &quot;+element);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM运行时间（从启动到当前的时间）。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     *      当前JVM启动时间，单位（毫秒）。</div><div class=\"line\">     */     </div><div class=\"line\">    public static long getJavaVMUptime() &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();  </div><div class=\"line\">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</div><div class=\"line\">        if(runtimeMXBean != null)&#123;</div><div class=\"line\">                return runtimeMXBean.getUptime();</div><div class=\"line\">        &#125;</div><div class=\"line\">        //can&apos;t happen</div><div class=\"line\">        return -1;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    /**</div><div class=\"line\">     * 获取当前JVM启动时间。</div><div class=\"line\">     * </div><div class=\"line\">     * @return </div><div class=\"line\">     *      当前JVM启动时间，单位（毫秒）。</div><div class=\"line\">     */</div><div class=\"line\">    public static long getJavaVMStartTime() &#123;</div><div class=\"line\">        // throw new UnsupportedOperationException();  </div><div class=\"line\">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</div><div class=\"line\">        if(runtimeMXBean != null)&#123;</div><div class=\"line\">                return runtimeMXBean.getStartTime();</div><div class=\"line\">        &#125;</div><div class=\"line\">        //can&apos;t happen</div><div class=\"line\">        return -1;       </div><div class=\"line\">    &#125;   </div><div class=\"line\">    </div><div class=\"line\">    private SystemUtils()&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"工作快一年的回望","_content":"\n不知不觉，我离开校门参不多快1年了，在出校门后遇到的林林总总，磕磕碰碰，繁琐心事。在蹉跎的工作中，一个毛头小子，初涉社会，不懂世故。\n想想都是一把心酸泪。不开心的事，就不提了，在这里我说说我大学四年的总结吧，也好给自己一个交代，没白学。\n","source":"_posts/other/01.md","raw":"---\ntitle: 工作快一年的回望\ncategories:\n- 心尘随笔\ntags:\n- 心情\n- 随笔\n- 琐事\n---\n\n不知不觉，我离开校门参不多快1年了，在出校门后遇到的林林总总，磕磕碰碰，繁琐心事。在蹉跎的工作中，一个毛头小子，初涉社会，不懂世故。\n想想都是一把心酸泪。不开心的事，就不提了，在这里我说说我大学四年的总结吧，也好给自己一个交代，没白学。\n","slug":"other/01","published":1,"date":"2016-11-08T16:24:41.919Z","updated":"2016-11-08T16:34:57.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp81t001xc88q8pgfbgq4","content":"<p>不知不觉，我离开校门参不多快1年了，在出校门后遇到的林林总总，磕磕碰碰，繁琐心事。在蹉跎的工作中，一个毛头小子，初涉社会，不懂世故。<br>想想都是一把心酸泪。不开心的事，就不提了，在这里我说说我大学四年的总结吧，也好给自己一个交代，没白学。</p>\n","excerpt":"","more":"<p>不知不觉，我离开校门参不多快1年了，在出校门后遇到的林林总总，磕磕碰碰，繁琐心事。在蹉跎的工作中，一个毛头小子，初涉社会，不懂世故。<br>想想都是一把心酸泪。不开心的事，就不提了，在这里我说说我大学四年的总结吧，也好给自己一个交代，没白学。</p>\n"},{"title":"Tomcat多实例部署及其原理","_content":">导读：\n昨天在跟群友做技术交流的时候,了解到，有很多大公司都是采用了高可用的，分布式的，实例沉余1+台。但是在小公司的同学也很多，他们反映并不是所有公司都有那样的资源来供你调度。往往公司只会给你一台机器，因为有些应用挂了公司也不会有损失的，我们往往一台机器就可以搞定。\n但是，我们也要为我们做出来的应用负责，毕竟东西做出来是为了给人用的，如果做出来的东西经常挂了，谈何使用，在前期，如果公司资源紧张的情况下，可以不可以做高可用，多机器的沉余部署。但是至少是在但机上有2个进程在跑。so,在这里我们就说说这个，如何做单机多实例的部署。\n在这里谈谈，在只有单机的资源下，如何把单机的资源压榨出来，用好单机。\n\n---------------------------------------------------\n\n# 1、Tomcat部署的场景分析\n通常，我们对tomcat单机部署需求可以分为几种：\n- 单实例单应用 (一个tomcat 一个web应用)\n- 单实例多应用 (一个tomcat多个应用)\n- 多实例单应用 (多个tomcat都部署一个应用)\n- 多实例多应用 (多个tomcat部署多个不同的应用)\n\n**第一种场景**：这是我们开发中经常用到的，如果不要求周期性地维护tomcat版本，一般的做法是把打好的war包丢到webapps目录下，然后执行startup.sh脚本，并且可以在浏览器里访问就行了。\n**第二种场景**：是把多个应用程序的war包放在同一个tomcat的webapps目录，这样一来，关闭和启动tomca，或tomcat挂掉会影响所有项目。\n**第三种场景**: 各个tomcat都运行同一个应用程序，对应地需要修改不同的监听端口，这种方式通常会和apache httpd或者nginx整合使用，做一些负载均衡的处理。\n**第四种场景**: 相当于第一种场景的复数形式，除了修改不同的监听端口，没有本质区别。\n\n一般来说，多实例部署tomcat，可以充分利用系统资源，不过这种方式，也有几个方面需要考虑：\n多实例tomcat的更新维护，例如对tomcat进行升级等操作，我们需要考虑如何能“优雅”地对所有实例进行升级\n尽量不要影响应用程序，在更新tomcat时，一不小心就把conf目录等全部覆盖，所以尽量要把配置文件和安装目录隔离\n对于单应用来说，如果将war包分别置于各个tomcat的webapps目录，那么在发布新版本的war时，可能会出现某个实例更新失败，导致用户在访问时可能会访问到不同版本的web app，因此，**比较好的方式就是所有tomcat实例都统一指向同一个应用程序**，这样做，就可以多个tomcat用一份应用源码，简单部署，单机高可用也能实现（要配合nginx）.\n本文重点阐述多实例应用的部署方案，但是为了解决上述几个问题，我们需要先来了解一下tomcat的一些基本情况。\n\n<!-- more -->\n\n# 2、我们的目标\n[![tomcat架构](http://www.itnose.net/img/20161025/172338.png \"title\")](http://www.itnose.net/img/20161025/172338.png)\n\n-------------------------------\n\n# 3、tomcat架构\n## 整体架构图\n[![tomcat架构](http://www.itnose.net/img/20160411/10674534.gif \"title\")](http://www.itnose.net/img/20160411/10674534.gif)\n\n这里有一台服务器，3台tomcat服务，以及一台tomcat的解构图。\n\n## 分离目录\n| 目录          | 作用                                                                                  |\n|:------------- |:--------------------------------------------------------------------------------------|\n| bin    | 主要存放脚本文件，例如比较常用的windows和linux系统中启动和关闭脚本                           |\n| conf   | 主要存放配置文件，其中最重要的两个配置文件是server.xml和web.xml                              |\n| lib    | 主要存放tomcat运行所依赖的包                                                                 |\n| logs   | \t主要存放运行时产生的日志文件，例如catalina.{date}.log等                                     |\n| temp   | 存放tomcat运行时产生的临时文件，例如开启了hibernate缓存的应用程序，会在该目录下生成一些文件  |\n| webapps| 部署web应用程序的默认目录                                                                    |\n| work   | 主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件）                        |\n\n再介绍两个tomcat中比较重要的概念（通常也是两个系统变量）——**CATALINA_HOME**和**CATALINA_BASE**：\n\n**CATALINA_HOME**：即指向Tomcat安装路径的系统变量\n**CATALINA_BASE**：即指向活跃配置路径的系统变量通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。\nTomcat官方文档指出，CATALINA_HOME路径的路径下只需要包含bin和lib目录，这也就是支持tomcat软件运行的目录，而CATALINA_BASE设置的路径可以包括上述所有目录，不过其中bin和lib目录并不是必需的，缺省时会使用CATALINA_HOME中的bin和conf。如此，我们就可以使用一个tomcat安装目录部署多个tomcat实例，这样的好处在于方便升级，就可以在不影响tomcat实例的前提下，替换掉CATALINA_HOME指定的tomcat安装目录。\n\n[![tomcat架构](http://www.itnose.net/img/20161025/172337.png \"title\")](http://www.itnose.net/img/20161025/172337.png)\n\n tomcat serve.xml 配置结构\nContainer容器子容器间关系图\n[![tomcat架构](http://www.itnose.net/img/20160411/10674535.png \"title\")](http://www.itnose.net/img/20160411/10674535.png)\n\n 交互图\n[![tomcat架构](http://www.itnose.net/img/20160411/10674536.png \"title\")](http://www.itnose.net/img/20160411/10674536.png)\n\n 对比下Tomcat serve.xml 的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n\n```\n\n--------------------------------\n\n# 4、实战\n端口配置\n##  修改server.xml\n在server.xml中配置了四个监听端口，分别是：\n**Server Port**：该端口用于监听关闭tomcat的shutdown命令，**默认为8005**.\n**Connector Port**：该端口用于监听HTTP的请求，**默认为8080**.\n**AJP Port**：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，**默认为8009**\n**Redirect Port**：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口，**默认为8443**\n\n虚拟主机配置\n再来说Host配置，Host就是所谓的虚拟主机，对应包含了一个或者多个web应用程序，默认的Host配置如下\n```\n<Host name=\"localhost\"  appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\">\n```\n其中：\n**name**： 虚拟主机的名称，一台主机表示了完全限定的域名或IP地址，**默认为localhost**，同时也是唯一的host，进入tomcat的所有http请求都会映射到该主机上\n**appBase**：web应用程序目录的路径，可以是CATALINA_HOME的相对路径，也可以写成绝对路径，**默认情况下为$CATALINA_HOME/webappsunpackWARs**： 表示是否自动解压war包\n**autoDeploy**：所谓的热部署，即在tomcat正在运行的情况下，如果有新的war加入，则会立即执行部署操作\n另外再介绍一个Host中的属性—deployOnStartup：表示tomcat启动时是否自动部署appBase目录下所有的Web应用程序，默认为true。这个属性和autoDeploy会产生两次部署的“副作用”：一次是tomcat启动时就开始部署，第二次就是autoDeploy引起的热部署。因此最好将autoDeploy置为false\n在部署**多实例单应用**的时候，默认的$CATALINA/webapps会因为tomcat安装目录升级产生不必要的麻烦，我们考虑将appBase的目录统一到另外的路径下。\n\nContext的配置\n最后再说明一下Context的配置，它出现在Host配置内，一个Context的配置就代表了一个web应用程序，如果配置多应用程序，就需要在Host下配置多个Context，一个简单的Context配置如下\n```\n<Context path=\"/some\" docBase=\"someapp.war\" >\n```\n**path**：表示访问入口，例如，path=”/abc”，则访问localhost:8080/abc时，就可以访问该Context对应的应用程序。如果path=””，则直接用localhost:8080就可以访问\n**docBase**：表示应用程序的解包目录或者war文件路径，是Host的appBase配置目录的相对路径，也可以是直接写成绝对路径，**但是不要将appBase的值，作为docBase配置路径的前缀，例如appBase=”somedir”，docBase=”somedir-someapp.war”，这样的配置会导致部署错误**\n通过配置Host的appBase和Context的docBase两个属性，可以将应用程序的文件和tomcat相关的目录进行分离，这样webapps目录也就没有作用了。\n\n## 跟我来实施该方案\n- 现在假设我们有一台已经配置好Java环境的服务器：（我用的是阿里云）\n- 我已经有一个已经完成的shop.war 应用程序\n\n步骤1：\n下载并解压tomcat\n[![tomcat架构](/img/2016/11/tomcat01.jpg \"title\")](/img/2016/11/tomcat01.jpg)\n\n步骤2：\n对Tomcat目录作以下调整：\n在tomcat安装目录下创建a.ttlsa.com、b.ttlsa.com，并且将conf、logs、webapp、temp、work目录拷贝到这两个目录，然后tomcat安装目录只需要留下bin、a.ttlsa.com、b.ttlsa.com、lib这4个目录即可。配置后的目录结构如下：\n[![tomcat架构](/img/2016/11/tomcat02.jpg \"title\")](/img/2016/11/tomcat02.jpg)\n\n如果要度tomcat 进行升级，我们只是需要对tomcat的lib 和 bin 目录进行升级即可。\n\n步骤3：\n配置站点server.xml\n   **配置a.ttlsa.com **\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 8005 改为8005 -->\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  \n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  \n  <Service name=\"Catalina\">\n    <Connector port=\"8081\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n\t\t\t   \n   <!-- <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /> -->\n\t\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\t  <!--\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n\t  -->\n\n\t  <Host name=\"localhost\" appBase=\"F:\\data\\www\\a.ttlsa.com\"\n\t\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t\t  </Context>\n\t   </Host>\n\t  \n    </Engine>\n  </Service>\n</Server>\n\n```\n   \n配置b.ttlsa.com \n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 8005 改为8006 -->\n<Server port=\"8002\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  \n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  \n  <Service name=\"Catalina\">\n    <Connector port=\"8082\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n\t\t\t   \n   <!-- <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /> -->\n\t\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\t  <!-- \n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n\t  -->\n\t \n\t  <Host name=\"localhost\" appBase=\"F:\\data\\www\\a.ttlsa.com\"\n\t\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t\t  </Context>\n\t   </Host>\n\t  \n    </Engine>\n  </Service>\n</Server>\n```\n\n**创建多实例启动脚本**\n```\n # description: 启动tomcat多实例.#\n . /etc/init.d/functions\n RETVAL=$?\n # tomcat实例目录\n export CATALINA_BASE=\"$PWD\"\n # tomcat安装目录\n export CATALINA_HOME=\"/usr/local/tomcat-7.0.50\"\n # 可选\n export JVM_OPTIONS=\"-Xms128m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=512m\"\n case \"$1\" in\n start)\n if [ -f $CATALINA_HOME/bin/startup.sh ];then\n echo $\"Start Tomcat\"\n $CATALINA_HOME/bin/startup.sh\n fi\n ;;\n stop)\n if [ -f $CATALINA_HOME/bin/shutdown.sh ];then\n echo $\"Stop Tomcat\"\n $CATALINA_HOME/bin/shutdown.sh\n fi\n ;;\n *)\n echo $\"Usage: $0 {start|stop}\"\n exit 1\n ;;\n esac\n exit $RETVAL\n```\n这段shell 脚本比较简单，主要是设置环境变量，接受命令参数 RETVAL=$? ，来执行不同的命令。 RETVAL=start/stop 等\nexport CATALINA_BASE=\"$PWD\" 表示设置当前路径为  CATALINA_BASE 的环境变量，一般情况下CATALINA_BASE 和 CATALINA_HOME 是默认一样的。\n \n\n**启动脚本赋权限**\n```\n# chmod a+x tomcat.sh\n```\n\n# 5、启动测试\n启动/关闭a.ttlsa.com\n```\n启动\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh start\n 关闭\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh stop\n```\n\n 启动/关闭b.ttlsa.com\n```\n启动\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh start\n 关闭\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh stop\n```\n备注：一定需要cd到tomcat.sh的当前目录下执行才可以\n\n在win7 下，需要创建在a.ttlsa.com 和b.ttlsa.com下面创建 startup.bat 来启动\n\n```\n@echo off\nset JAVA_HOME=D:\\Program Files\\Java\\jdk1.8.0_112\nset PATH=%JAVA_HOME%\\bin;%PATH%\nset CATALINA_BASE=%CD%\ncd E:\\tomcat-8.5.6\\bin\ncatalina.bat start\n```\n\n这段是在win7 下云的bat脚本，于shell脚本同理，set CATALINA_BASE=%CD% 也是设置环境变量，CD 可以获取当前的路径。\n\nshell 脚本入门参考：http://sishuok.com/forum/blogPost/list/5655.html\n\n\n# 6、结果\n单个Tomcat应用多个tomcat实例的配置到此，就结束了。\n此外，我们在这里的基础上进行系统的扩展，比如如果我的Tomcat应用挂掉了，我的整个应用都将不可用了，我们应该如何处理？\n我们可以把Tomcat复制多份，在单机的情况下，开多一个Tomcat进程，在配合Nginx 来配置，就能实现Tomcat的自动切换，这些内容，有空再写。\n\n如果需要操作多个实例显得比较麻烦，大家可以自行写统一的脚本。\n\n[![tomcat架构](/img/2016/11/tomcat03.jpg \"title\")](/img/2016/11/tomcat03.jpg)\n[![tomcat架构](/img/2016/11/tomcat04.jpg \"title\")](/img/2016/11/tomcat04.jpg)\n\nLinux 下的实现基本一致。\n\n这样的好处是，显而易见的，这样能开启Tomcat的多个进程，即多台tomcat，挂了也不太怕，还有其他tomcat应用支撑，代码实例我们发版本的时候，只需要发布一份，实例代码易于维护。\n但是，我们网站的域名和端口一般是同一采用80端口，统一的域名，而现在我们开启tomcat只能一个使用80端口，显然是不合适的·，为此我们会引入负载均衡的nginx来配置。\nnginx 采用80 端口，tomcat分别采用8080， 8081， 8082 这样就能让我们的程序稳定的运行。\n这样，我们就能进最大的限度来压榨单机的性能，保证应用程序的稳定的运行。\n而然，单机不然有单机的瓶颈，毕竟单机中的cpu 已经各种硬件的限制，会大大影响实例程序的跑动，在这时，就不再是单机能抗的动的了，我们需要分析程序的瓶颈在那？数据库，那就把数据库单独分出去，单独一台机器，是文件图片服务器，就把他分出去。如果是应用程序太大，就要考虑把应用实例进行拆解为不同哦那个的组件，单独部署，这就是分布式部署。\n当然，这都是后话，只有程序复杂到一定的程度，并体量很大的话，才会做这种架构的演变，成本和技术投入的难度也会相应的变大。\n本章，只局限于如何玩好单机的基础上来讨论，对于分布式的那块，笔者能力有限，尚且还不能完全驾驭，不做分享。\n\n\n# 7、nginx+tomcat热备\n在上面的配置的基础上，我们在进一步进行扩展，进行实例的均衡和热备。\n可以在一个服务器挂了的情况下连到另外一个，那怎么弄呢？\n其实很简单，在upstream中的local_tomcat中配置多一个server。\n在上面，我的a.ttlsa.com  和 b.ttlsa.com 都是访问  F:\\data\\www\\a.ttlsa.com 下的源码的index.jsp 页面, \n为了能观察，nginx 的keepAlive 的效果，我做一下修改：\na.ttlsa.com ---> F:\\data\\www\\a.ttlsa.com  index.jsp 中文字是 1\nb.ttlsa.com ---> F:\\data\\www\\b.ttlsa.com  index.jsp 中文字是 2\n\n\n```\n\tupstream local_tomcat {  \n\t\tserver localhost:8081 weight=1;  \n\t\tserver localhost:8082 weight=5;  \n\t} \n\n    server {\n        listen       80;\n        server_name  localhost:8081;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}\t\t\n\t\tlocation / {  \n\t\t\tproxy_pass http://local_tomcat;  \n\t\t} \n```\n\n[![tomcat架构](/img/2016/11/tomcat05.gif \"title\")](/img/2016/11/tomcat05.gif)\n \n在通常的情况下，我们一般是指向一份源码就足够了，并且设置权值，减轻应用的压力。同时也不会出现单点的情况。\n \n补充：nginx.con 配置\n\n```\n\t#user  nobody;\n\tworker_processes  1;\n\tevents {\n\t\tworker_connections  1024;\n\t}\n\thttp {\n\t\tinclude       mime.types;\n\t\tdefault_type  application/octet-stream;\n\n\t\tsendfile        on;\n\t\t#tcp_nopush     on;\n\n\t\t#keepalive_timeout  0;\n\t\tkeepalive_timeout  65;\n\n\t\t#gzip  on;\n\n\t\tupstream local_tomcat {  \n\t\t\tserver localhost:8081 weight=1;  \n\t\t\tserver localhost:8082 weight=5;  \n\t\t} \n\t\t\n\t\tserver {\n\t\t\tlisten       80;\n\t\t\tserver_name  localhost;\n\n\t\t\t#charset koi8-r;\n\n\t\t\t#access_log  logs/host.access.log  main;\n\n\t\t\t#location / {\n\t\t\t#    root   html;\n\t\t\t#    index  index.html index.htm;\n\t\t\t#}\t\t\n\t\t\tlocation / {  \n\t\t\t\tproxy_pass http://local_tomcat;  \n\t\t\t}  \n\t\t\t\n\t\t\terror_page   500 502 503 504  /50x.html;\n\t\t\tlocation = /50x.html {\n\t\t\t\troot   html;\n\t\t\t}\n\t\t}\n\n\t}\n\n```\n\n \n综上：我们做到了多台tomcat 但是我们也能做到tomcat的简单升级，并且实现实例的负载均衡，已经应用的主备，在也不用担心应用挂掉而睡不了觉了。\n缺点：nginx依然存在单点的问题。\n\n本次的实验资源供下载：http://download.csdn.net/detail/a82793510/9687715\n\n\n\n# 经验之谈\n\n如果是在资源有限的情况下，已经选择了单机，证明不是有钱荏，我一般会把上面的权去掉，在这样我们就可以在一台tomcat应用服务器挂掉的情况下，才会访问备机Tomcat应用服务器。\n如果只是应用的情况下，这样已经足够了。用基于IP分发的策略已经能解决绝大部分需求。 \n\n\n\n# 资源进一步极端化\n\n现在，我们在这台单机上已经部署了一个应用app1, 假设现在我司实在是资源太紧缺了，我们又要在这台机子上，部署另外一个应用app2。\n那么现在我们就要对Nginx 和 Tomcat 进行改动。\n改动一般分为2种方法：2级域名改动 或 2级目录改动。\n先来在上面的基础上说说二级目录改动：\n按照我们上面的，我们的目标的架构：我们已经部署了一个应用程序：some.war ，现在我要采用二级目录方式部署另外的一个应用程序：app.war。\n那么我会在上面的基础上做如下的修改：localhost 可以修改为自己的域名。\n\n\n```\n\t<Host name=\"localhost/some\" appBase=\"F:\\data\\www\\a.ttlsa.com\"\n\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t  </Context>\n\t</Host>\n\t<Host name=\"localhost/app\" appBase=\"F:\\data\\www\\b.ttlsa.com\"\n\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t  </Context>\n\t</Host>\t   \n\n```\n\n\n另外的一台的service.xml 也同样如此配置。\nnginx中的localhost 可以修改为自己的域名 如 mp.hello.io \n\n```\n   server {\n        listen       80;\n        server_name  localhost; // 可以修改为自己的域名\n         \n    }\n```\n\n二级域名的改动，\n前提：我们有一个顶级域名：如 hello.io 这样的一个顶级域名：\n那么，我们现在可以这样做：\n现在万网中配置一下我们的二级域名，如som.hello.io和app.hello.io 都要在万网中指向我们的服务器Ip 地址。\n在增加二级域名的情况下，我们可以新增2个是实例。\n把Nginx修改为这样的配置：\n\n\n```\n#user  nobody;\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    upstream local_tomcat01 {  \n        server localhost:8081;  \n        server localhost:8082;  \n    } \n\t upstream local_tomcat02 {  \n        server localhost:8083;  \n        server localhost:8084;  \n    } \n\t    server {\n        listen       80;\n        server_name  some.hello.io;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}        \n        location / {  \n            proxy_pass http://local_tomcat02;  \n        }  \n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\t\n\tserver {\n        listen       80;\n        server_name  app.hello.io;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}        \n        location / {  \n            proxy_pass http://local_tomcat02;  \n        }  \n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```\n\n此外，修改一下，Tomcat 的端口就可以了，同时80 81， 指向一个实例，83 84 指向另外一个实例（appBase中指定）。这样就可以做到程序的主备操作。\n\n备注：service_name 的名称可以是ip 地址。\nnginx在配置upstream时，有两个参数： \nip_hash（同一IP一直使用同一台server服务） \nweight（server的使用权重，数值越大，nginx分发的请求越多） \n\n通过配合这两个参数，能粗糙地解决session共享的问题。 \n对于一些不是太依赖session的应用，或者只有用户登录时保存，那么我认为可以用Cookies代替。 \n即使真的要Session共享，我认为手动写代码保存到Memcached比为Tomcat加插件好，这样能获得更好的可控性。 \n而且我不用Tomcat，用Redis，这个msm就用不上啦，不过我会按照我的思想实现session共享，呵呵，个人愚见！\n\n[![tomcat架构](/img/2016/11/tomcat06.png \"title\")](/img/2016/11/tomcat06.png)\n\n最后我们的架构是这样的。在这样的解构下，我们无论是修改为 二级目录 亦或是二级域名，我们运维都只是要做很小的改动就能切换。配置和源码分离的结构，对我们以后的扩展为分布式应用，还是依然是单机的传统结构都是进可以攻退以守。\n留有余地，唯一不足就是nginx的单点问题，不过就单机体系来说已经够用了。\n\n# 集群\n\n上面不架构已经是属于在单机上做了一个简单的集群了，要实现Tomcat。\n要多台机器，只要修改上面Nginx的分发的Ip 就可，但是会话共享是一个很大的问题，但是，用基于IP分发的策略已经能解决绝大部分需求。 \n这里已经脱离了我们单机应用的主题，以后有机会探讨。\n\n\n------------------------------------------------\n\n>参考文章：\nhttp://www.cnblogs.com/tq03/p/3507658.html\nhttp://www.itnose.net/detail/6658488.html\nhttp://www.ttlsa.com/tomcat/config-multi-tomcat-instance/\nhttp://www.cnblogs.com/_popc/p/4167516.html\nhttp://www.itnose.net/detail/6485584.html\nhttp://www.itnose.net/detail/6521677.html\nhttp://www.itnose.net/detail/6448554.html\nhttp://www.aikaiyuan.com/7907.html\nhttp://blog.csdn.net/cclovett/article/details/26377269 (nginx)\nhttp://www.roncoo.com/article/detail/125185\n\n--------------------------------------------------------------------------------------------\n\n[![tomcat架构](/css/images/mm_facetoface_collect.png \"title\")](/css/images/mm_facetoface_collect.png)\n\n\n\n\n","source":"_posts/yunwei/1.md","raw":"---\ntitle: Tomcat多实例部署及其原理\ncategories:\n- 大型网站技术架构\ntags:\n- 运维\n- tomcat\n---\n>导读：\n昨天在跟群友做技术交流的时候,了解到，有很多大公司都是采用了高可用的，分布式的，实例沉余1+台。但是在小公司的同学也很多，他们反映并不是所有公司都有那样的资源来供你调度。往往公司只会给你一台机器，因为有些应用挂了公司也不会有损失的，我们往往一台机器就可以搞定。\n但是，我们也要为我们做出来的应用负责，毕竟东西做出来是为了给人用的，如果做出来的东西经常挂了，谈何使用，在前期，如果公司资源紧张的情况下，可以不可以做高可用，多机器的沉余部署。但是至少是在但机上有2个进程在跑。so,在这里我们就说说这个，如何做单机多实例的部署。\n在这里谈谈，在只有单机的资源下，如何把单机的资源压榨出来，用好单机。\n\n---------------------------------------------------\n\n# 1、Tomcat部署的场景分析\n通常，我们对tomcat单机部署需求可以分为几种：\n- 单实例单应用 (一个tomcat 一个web应用)\n- 单实例多应用 (一个tomcat多个应用)\n- 多实例单应用 (多个tomcat都部署一个应用)\n- 多实例多应用 (多个tomcat部署多个不同的应用)\n\n**第一种场景**：这是我们开发中经常用到的，如果不要求周期性地维护tomcat版本，一般的做法是把打好的war包丢到webapps目录下，然后执行startup.sh脚本，并且可以在浏览器里访问就行了。\n**第二种场景**：是把多个应用程序的war包放在同一个tomcat的webapps目录，这样一来，关闭和启动tomca，或tomcat挂掉会影响所有项目。\n**第三种场景**: 各个tomcat都运行同一个应用程序，对应地需要修改不同的监听端口，这种方式通常会和apache httpd或者nginx整合使用，做一些负载均衡的处理。\n**第四种场景**: 相当于第一种场景的复数形式，除了修改不同的监听端口，没有本质区别。\n\n一般来说，多实例部署tomcat，可以充分利用系统资源，不过这种方式，也有几个方面需要考虑：\n多实例tomcat的更新维护，例如对tomcat进行升级等操作，我们需要考虑如何能“优雅”地对所有实例进行升级\n尽量不要影响应用程序，在更新tomcat时，一不小心就把conf目录等全部覆盖，所以尽量要把配置文件和安装目录隔离\n对于单应用来说，如果将war包分别置于各个tomcat的webapps目录，那么在发布新版本的war时，可能会出现某个实例更新失败，导致用户在访问时可能会访问到不同版本的web app，因此，**比较好的方式就是所有tomcat实例都统一指向同一个应用程序**，这样做，就可以多个tomcat用一份应用源码，简单部署，单机高可用也能实现（要配合nginx）.\n本文重点阐述多实例应用的部署方案，但是为了解决上述几个问题，我们需要先来了解一下tomcat的一些基本情况。\n\n<!-- more -->\n\n# 2、我们的目标\n[![tomcat架构](http://www.itnose.net/img/20161025/172338.png \"title\")](http://www.itnose.net/img/20161025/172338.png)\n\n-------------------------------\n\n# 3、tomcat架构\n## 整体架构图\n[![tomcat架构](http://www.itnose.net/img/20160411/10674534.gif \"title\")](http://www.itnose.net/img/20160411/10674534.gif)\n\n这里有一台服务器，3台tomcat服务，以及一台tomcat的解构图。\n\n## 分离目录\n| 目录          | 作用                                                                                  |\n|:------------- |:--------------------------------------------------------------------------------------|\n| bin    | 主要存放脚本文件，例如比较常用的windows和linux系统中启动和关闭脚本                           |\n| conf   | 主要存放配置文件，其中最重要的两个配置文件是server.xml和web.xml                              |\n| lib    | 主要存放tomcat运行所依赖的包                                                                 |\n| logs   | \t主要存放运行时产生的日志文件，例如catalina.{date}.log等                                     |\n| temp   | 存放tomcat运行时产生的临时文件，例如开启了hibernate缓存的应用程序，会在该目录下生成一些文件  |\n| webapps| 部署web应用程序的默认目录                                                                    |\n| work   | 主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件）                        |\n\n再介绍两个tomcat中比较重要的概念（通常也是两个系统变量）——**CATALINA_HOME**和**CATALINA_BASE**：\n\n**CATALINA_HOME**：即指向Tomcat安装路径的系统变量\n**CATALINA_BASE**：即指向活跃配置路径的系统变量通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。\nTomcat官方文档指出，CATALINA_HOME路径的路径下只需要包含bin和lib目录，这也就是支持tomcat软件运行的目录，而CATALINA_BASE设置的路径可以包括上述所有目录，不过其中bin和lib目录并不是必需的，缺省时会使用CATALINA_HOME中的bin和conf。如此，我们就可以使用一个tomcat安装目录部署多个tomcat实例，这样的好处在于方便升级，就可以在不影响tomcat实例的前提下，替换掉CATALINA_HOME指定的tomcat安装目录。\n\n[![tomcat架构](http://www.itnose.net/img/20161025/172337.png \"title\")](http://www.itnose.net/img/20161025/172337.png)\n\n tomcat serve.xml 配置结构\nContainer容器子容器间关系图\n[![tomcat架构](http://www.itnose.net/img/20160411/10674535.png \"title\")](http://www.itnose.net/img/20160411/10674535.png)\n\n 交互图\n[![tomcat架构](http://www.itnose.net/img/20160411/10674536.png \"title\")](http://www.itnose.net/img/20160411/10674536.png)\n\n 对比下Tomcat serve.xml 的配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n\n```\n\n--------------------------------\n\n# 4、实战\n端口配置\n##  修改server.xml\n在server.xml中配置了四个监听端口，分别是：\n**Server Port**：该端口用于监听关闭tomcat的shutdown命令，**默认为8005**.\n**Connector Port**：该端口用于监听HTTP的请求，**默认为8080**.\n**AJP Port**：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，**默认为8009**\n**Redirect Port**：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口，**默认为8443**\n\n虚拟主机配置\n再来说Host配置，Host就是所谓的虚拟主机，对应包含了一个或者多个web应用程序，默认的Host配置如下\n```\n<Host name=\"localhost\"  appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\">\n```\n其中：\n**name**： 虚拟主机的名称，一台主机表示了完全限定的域名或IP地址，**默认为localhost**，同时也是唯一的host，进入tomcat的所有http请求都会映射到该主机上\n**appBase**：web应用程序目录的路径，可以是CATALINA_HOME的相对路径，也可以写成绝对路径，**默认情况下为$CATALINA_HOME/webappsunpackWARs**： 表示是否自动解压war包\n**autoDeploy**：所谓的热部署，即在tomcat正在运行的情况下，如果有新的war加入，则会立即执行部署操作\n另外再介绍一个Host中的属性—deployOnStartup：表示tomcat启动时是否自动部署appBase目录下所有的Web应用程序，默认为true。这个属性和autoDeploy会产生两次部署的“副作用”：一次是tomcat启动时就开始部署，第二次就是autoDeploy引起的热部署。因此最好将autoDeploy置为false\n在部署**多实例单应用**的时候，默认的$CATALINA/webapps会因为tomcat安装目录升级产生不必要的麻烦，我们考虑将appBase的目录统一到另外的路径下。\n\nContext的配置\n最后再说明一下Context的配置，它出现在Host配置内，一个Context的配置就代表了一个web应用程序，如果配置多应用程序，就需要在Host下配置多个Context，一个简单的Context配置如下\n```\n<Context path=\"/some\" docBase=\"someapp.war\" >\n```\n**path**：表示访问入口，例如，path=”/abc”，则访问localhost:8080/abc时，就可以访问该Context对应的应用程序。如果path=””，则直接用localhost:8080就可以访问\n**docBase**：表示应用程序的解包目录或者war文件路径，是Host的appBase配置目录的相对路径，也可以是直接写成绝对路径，**但是不要将appBase的值，作为docBase配置路径的前缀，例如appBase=”somedir”，docBase=”somedir-someapp.war”，这样的配置会导致部署错误**\n通过配置Host的appBase和Context的docBase两个属性，可以将应用程序的文件和tomcat相关的目录进行分离，这样webapps目录也就没有作用了。\n\n## 跟我来实施该方案\n- 现在假设我们有一台已经配置好Java环境的服务器：（我用的是阿里云）\n- 我已经有一个已经完成的shop.war 应用程序\n\n步骤1：\n下载并解压tomcat\n[![tomcat架构](/img/2016/11/tomcat01.jpg \"title\")](/img/2016/11/tomcat01.jpg)\n\n步骤2：\n对Tomcat目录作以下调整：\n在tomcat安装目录下创建a.ttlsa.com、b.ttlsa.com，并且将conf、logs、webapp、temp、work目录拷贝到这两个目录，然后tomcat安装目录只需要留下bin、a.ttlsa.com、b.ttlsa.com、lib这4个目录即可。配置后的目录结构如下：\n[![tomcat架构](/img/2016/11/tomcat02.jpg \"title\")](/img/2016/11/tomcat02.jpg)\n\n如果要度tomcat 进行升级，我们只是需要对tomcat的lib 和 bin 目录进行升级即可。\n\n步骤3：\n配置站点server.xml\n   **配置a.ttlsa.com **\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 8005 改为8005 -->\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  \n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  \n  <Service name=\"Catalina\">\n    <Connector port=\"8081\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n\t\t\t   \n   <!-- <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /> -->\n\t\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\t  <!--\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n\t  -->\n\n\t  <Host name=\"localhost\" appBase=\"F:\\data\\www\\a.ttlsa.com\"\n\t\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t\t  </Context>\n\t   </Host>\n\t  \n    </Engine>\n  </Service>\n</Server>\n\n```\n   \n配置b.ttlsa.com \n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 8005 改为8006 -->\n<Server port=\"8002\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  \n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  \n  <Service name=\"Catalina\">\n    <Connector port=\"8082\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n\t\t\t   \n   <!-- <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" /> -->\n\t\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n\t  <!-- \n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n\t  -->\n\t \n\t  <Host name=\"localhost\" appBase=\"F:\\data\\www\\a.ttlsa.com\"\n\t\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t\t  </Context>\n\t   </Host>\n\t  \n    </Engine>\n  </Service>\n</Server>\n```\n\n**创建多实例启动脚本**\n```\n # description: 启动tomcat多实例.#\n . /etc/init.d/functions\n RETVAL=$?\n # tomcat实例目录\n export CATALINA_BASE=\"$PWD\"\n # tomcat安装目录\n export CATALINA_HOME=\"/usr/local/tomcat-7.0.50\"\n # 可选\n export JVM_OPTIONS=\"-Xms128m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=512m\"\n case \"$1\" in\n start)\n if [ -f $CATALINA_HOME/bin/startup.sh ];then\n echo $\"Start Tomcat\"\n $CATALINA_HOME/bin/startup.sh\n fi\n ;;\n stop)\n if [ -f $CATALINA_HOME/bin/shutdown.sh ];then\n echo $\"Stop Tomcat\"\n $CATALINA_HOME/bin/shutdown.sh\n fi\n ;;\n *)\n echo $\"Usage: $0 {start|stop}\"\n exit 1\n ;;\n esac\n exit $RETVAL\n```\n这段shell 脚本比较简单，主要是设置环境变量，接受命令参数 RETVAL=$? ，来执行不同的命令。 RETVAL=start/stop 等\nexport CATALINA_BASE=\"$PWD\" 表示设置当前路径为  CATALINA_BASE 的环境变量，一般情况下CATALINA_BASE 和 CATALINA_HOME 是默认一样的。\n \n\n**启动脚本赋权限**\n```\n# chmod a+x tomcat.sh\n```\n\n# 5、启动测试\n启动/关闭a.ttlsa.com\n```\n启动\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh start\n 关闭\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh stop\n```\n\n 启动/关闭b.ttlsa.com\n```\n启动\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh start\n 关闭\n # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/\n # ./tomcat.sh stop\n```\n备注：一定需要cd到tomcat.sh的当前目录下执行才可以\n\n在win7 下，需要创建在a.ttlsa.com 和b.ttlsa.com下面创建 startup.bat 来启动\n\n```\n@echo off\nset JAVA_HOME=D:\\Program Files\\Java\\jdk1.8.0_112\nset PATH=%JAVA_HOME%\\bin;%PATH%\nset CATALINA_BASE=%CD%\ncd E:\\tomcat-8.5.6\\bin\ncatalina.bat start\n```\n\n这段是在win7 下云的bat脚本，于shell脚本同理，set CATALINA_BASE=%CD% 也是设置环境变量，CD 可以获取当前的路径。\n\nshell 脚本入门参考：http://sishuok.com/forum/blogPost/list/5655.html\n\n\n# 6、结果\n单个Tomcat应用多个tomcat实例的配置到此，就结束了。\n此外，我们在这里的基础上进行系统的扩展，比如如果我的Tomcat应用挂掉了，我的整个应用都将不可用了，我们应该如何处理？\n我们可以把Tomcat复制多份，在单机的情况下，开多一个Tomcat进程，在配合Nginx 来配置，就能实现Tomcat的自动切换，这些内容，有空再写。\n\n如果需要操作多个实例显得比较麻烦，大家可以自行写统一的脚本。\n\n[![tomcat架构](/img/2016/11/tomcat03.jpg \"title\")](/img/2016/11/tomcat03.jpg)\n[![tomcat架构](/img/2016/11/tomcat04.jpg \"title\")](/img/2016/11/tomcat04.jpg)\n\nLinux 下的实现基本一致。\n\n这样的好处是，显而易见的，这样能开启Tomcat的多个进程，即多台tomcat，挂了也不太怕，还有其他tomcat应用支撑，代码实例我们发版本的时候，只需要发布一份，实例代码易于维护。\n但是，我们网站的域名和端口一般是同一采用80端口，统一的域名，而现在我们开启tomcat只能一个使用80端口，显然是不合适的·，为此我们会引入负载均衡的nginx来配置。\nnginx 采用80 端口，tomcat分别采用8080， 8081， 8082 这样就能让我们的程序稳定的运行。\n这样，我们就能进最大的限度来压榨单机的性能，保证应用程序的稳定的运行。\n而然，单机不然有单机的瓶颈，毕竟单机中的cpu 已经各种硬件的限制，会大大影响实例程序的跑动，在这时，就不再是单机能抗的动的了，我们需要分析程序的瓶颈在那？数据库，那就把数据库单独分出去，单独一台机器，是文件图片服务器，就把他分出去。如果是应用程序太大，就要考虑把应用实例进行拆解为不同哦那个的组件，单独部署，这就是分布式部署。\n当然，这都是后话，只有程序复杂到一定的程度，并体量很大的话，才会做这种架构的演变，成本和技术投入的难度也会相应的变大。\n本章，只局限于如何玩好单机的基础上来讨论，对于分布式的那块，笔者能力有限，尚且还不能完全驾驭，不做分享。\n\n\n# 7、nginx+tomcat热备\n在上面的配置的基础上，我们在进一步进行扩展，进行实例的均衡和热备。\n可以在一个服务器挂了的情况下连到另外一个，那怎么弄呢？\n其实很简单，在upstream中的local_tomcat中配置多一个server。\n在上面，我的a.ttlsa.com  和 b.ttlsa.com 都是访问  F:\\data\\www\\a.ttlsa.com 下的源码的index.jsp 页面, \n为了能观察，nginx 的keepAlive 的效果，我做一下修改：\na.ttlsa.com ---> F:\\data\\www\\a.ttlsa.com  index.jsp 中文字是 1\nb.ttlsa.com ---> F:\\data\\www\\b.ttlsa.com  index.jsp 中文字是 2\n\n\n```\n\tupstream local_tomcat {  \n\t\tserver localhost:8081 weight=1;  \n\t\tserver localhost:8082 weight=5;  \n\t} \n\n    server {\n        listen       80;\n        server_name  localhost:8081;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}\t\t\n\t\tlocation / {  \n\t\t\tproxy_pass http://local_tomcat;  \n\t\t} \n```\n\n[![tomcat架构](/img/2016/11/tomcat05.gif \"title\")](/img/2016/11/tomcat05.gif)\n \n在通常的情况下，我们一般是指向一份源码就足够了，并且设置权值，减轻应用的压力。同时也不会出现单点的情况。\n \n补充：nginx.con 配置\n\n```\n\t#user  nobody;\n\tworker_processes  1;\n\tevents {\n\t\tworker_connections  1024;\n\t}\n\thttp {\n\t\tinclude       mime.types;\n\t\tdefault_type  application/octet-stream;\n\n\t\tsendfile        on;\n\t\t#tcp_nopush     on;\n\n\t\t#keepalive_timeout  0;\n\t\tkeepalive_timeout  65;\n\n\t\t#gzip  on;\n\n\t\tupstream local_tomcat {  \n\t\t\tserver localhost:8081 weight=1;  \n\t\t\tserver localhost:8082 weight=5;  \n\t\t} \n\t\t\n\t\tserver {\n\t\t\tlisten       80;\n\t\t\tserver_name  localhost;\n\n\t\t\t#charset koi8-r;\n\n\t\t\t#access_log  logs/host.access.log  main;\n\n\t\t\t#location / {\n\t\t\t#    root   html;\n\t\t\t#    index  index.html index.htm;\n\t\t\t#}\t\t\n\t\t\tlocation / {  \n\t\t\t\tproxy_pass http://local_tomcat;  \n\t\t\t}  \n\t\t\t\n\t\t\terror_page   500 502 503 504  /50x.html;\n\t\t\tlocation = /50x.html {\n\t\t\t\troot   html;\n\t\t\t}\n\t\t}\n\n\t}\n\n```\n\n \n综上：我们做到了多台tomcat 但是我们也能做到tomcat的简单升级，并且实现实例的负载均衡，已经应用的主备，在也不用担心应用挂掉而睡不了觉了。\n缺点：nginx依然存在单点的问题。\n\n本次的实验资源供下载：http://download.csdn.net/detail/a82793510/9687715\n\n\n\n# 经验之谈\n\n如果是在资源有限的情况下，已经选择了单机，证明不是有钱荏，我一般会把上面的权去掉，在这样我们就可以在一台tomcat应用服务器挂掉的情况下，才会访问备机Tomcat应用服务器。\n如果只是应用的情况下，这样已经足够了。用基于IP分发的策略已经能解决绝大部分需求。 \n\n\n\n# 资源进一步极端化\n\n现在，我们在这台单机上已经部署了一个应用app1, 假设现在我司实在是资源太紧缺了，我们又要在这台机子上，部署另外一个应用app2。\n那么现在我们就要对Nginx 和 Tomcat 进行改动。\n改动一般分为2种方法：2级域名改动 或 2级目录改动。\n先来在上面的基础上说说二级目录改动：\n按照我们上面的，我们的目标的架构：我们已经部署了一个应用程序：some.war ，现在我要采用二级目录方式部署另外的一个应用程序：app.war。\n那么我会在上面的基础上做如下的修改：localhost 可以修改为自己的域名。\n\n\n```\n\t<Host name=\"localhost/some\" appBase=\"F:\\data\\www\\a.ttlsa.com\"\n\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t  </Context>\n\t</Host>\n\t<Host name=\"localhost/app\" appBase=\"F:\\data\\www\\b.ttlsa.com\"\n\t\t  unpackWARs=\"true\" autoDeploy=\"true\"\n\t\t  xmlValidation=\"false\" xmlNamespaceAware=\"false\">\n\t\t  <Context path=\"\" docBase=\"\"  reloadable=\"true\">\n\t\t\t<valve className=\"org.apache.catalina.valves.RemoteAddrValve\" />\n\t\t  </Context>\n\t</Host>\t   \n\n```\n\n\n另外的一台的service.xml 也同样如此配置。\nnginx中的localhost 可以修改为自己的域名 如 mp.hello.io \n\n```\n   server {\n        listen       80;\n        server_name  localhost; // 可以修改为自己的域名\n         \n    }\n```\n\n二级域名的改动，\n前提：我们有一个顶级域名：如 hello.io 这样的一个顶级域名：\n那么，我们现在可以这样做：\n现在万网中配置一下我们的二级域名，如som.hello.io和app.hello.io 都要在万网中指向我们的服务器Ip 地址。\n在增加二级域名的情况下，我们可以新增2个是实例。\n把Nginx修改为这样的配置：\n\n\n```\n#user  nobody;\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    upstream local_tomcat01 {  \n        server localhost:8081;  \n        server localhost:8082;  \n    } \n\t upstream local_tomcat02 {  \n        server localhost:8083;  \n        server localhost:8084;  \n    } \n\t    server {\n        listen       80;\n        server_name  some.hello.io;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}        \n        location / {  \n            proxy_pass http://local_tomcat02;  \n        }  \n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\t\n\tserver {\n        listen       80;\n        server_name  app.hello.io;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        #location / {\n        #    root   html;\n        #    index  index.html index.htm;\n        #}        \n        location / {  \n            proxy_pass http://local_tomcat02;  \n        }  \n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n```\n\n此外，修改一下，Tomcat 的端口就可以了，同时80 81， 指向一个实例，83 84 指向另外一个实例（appBase中指定）。这样就可以做到程序的主备操作。\n\n备注：service_name 的名称可以是ip 地址。\nnginx在配置upstream时，有两个参数： \nip_hash（同一IP一直使用同一台server服务） \nweight（server的使用权重，数值越大，nginx分发的请求越多） \n\n通过配合这两个参数，能粗糙地解决session共享的问题。 \n对于一些不是太依赖session的应用，或者只有用户登录时保存，那么我认为可以用Cookies代替。 \n即使真的要Session共享，我认为手动写代码保存到Memcached比为Tomcat加插件好，这样能获得更好的可控性。 \n而且我不用Tomcat，用Redis，这个msm就用不上啦，不过我会按照我的思想实现session共享，呵呵，个人愚见！\n\n[![tomcat架构](/img/2016/11/tomcat06.png \"title\")](/img/2016/11/tomcat06.png)\n\n最后我们的架构是这样的。在这样的解构下，我们无论是修改为 二级目录 亦或是二级域名，我们运维都只是要做很小的改动就能切换。配置和源码分离的结构，对我们以后的扩展为分布式应用，还是依然是单机的传统结构都是进可以攻退以守。\n留有余地，唯一不足就是nginx的单点问题，不过就单机体系来说已经够用了。\n\n# 集群\n\n上面不架构已经是属于在单机上做了一个简单的集群了，要实现Tomcat。\n要多台机器，只要修改上面Nginx的分发的Ip 就可，但是会话共享是一个很大的问题，但是，用基于IP分发的策略已经能解决绝大部分需求。 \n这里已经脱离了我们单机应用的主题，以后有机会探讨。\n\n\n------------------------------------------------\n\n>参考文章：\nhttp://www.cnblogs.com/tq03/p/3507658.html\nhttp://www.itnose.net/detail/6658488.html\nhttp://www.ttlsa.com/tomcat/config-multi-tomcat-instance/\nhttp://www.cnblogs.com/_popc/p/4167516.html\nhttp://www.itnose.net/detail/6485584.html\nhttp://www.itnose.net/detail/6521677.html\nhttp://www.itnose.net/detail/6448554.html\nhttp://www.aikaiyuan.com/7907.html\nhttp://blog.csdn.net/cclovett/article/details/26377269 (nginx)\nhttp://www.roncoo.com/article/detail/125185\n\n--------------------------------------------------------------------------------------------\n\n[![tomcat架构](/css/images/mm_facetoface_collect.png \"title\")](/css/images/mm_facetoface_collect.png)\n\n\n\n\n","slug":"yunwei/1","published":1,"date":"2016-11-19T03:36:14.505Z","updated":"2016-11-23T14:42:43.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp825001zc88q36taq3fa","content":"<blockquote>\n<p>导读：<br>昨天在跟群友做技术交流的时候,了解到，有很多大公司都是采用了高可用的，分布式的，实例沉余1+台。但是在小公司的同学也很多，他们反映并不是所有公司都有那样的资源来供你调度。往往公司只会给你一台机器，因为有些应用挂了公司也不会有损失的，我们往往一台机器就可以搞定。<br>但是，我们也要为我们做出来的应用负责，毕竟东西做出来是为了给人用的，如果做出来的东西经常挂了，谈何使用，在前期，如果公司资源紧张的情况下，可以不可以做高可用，多机器的沉余部署。但是至少是在但机上有2个进程在跑。so,在这里我们就说说这个，如何做单机多实例的部署。<br>在这里谈谈，在只有单机的资源下，如何把单机的资源压榨出来，用好单机。</p>\n</blockquote>\n<hr>\n<h1 id=\"1、Tomcat部署的场景分析\"><a href=\"#1、Tomcat部署的场景分析\" class=\"headerlink\" title=\"1、Tomcat部署的场景分析\"></a>1、Tomcat部署的场景分析</h1><p>通常，我们对tomcat单机部署需求可以分为几种：</p>\n<ul>\n<li>单实例单应用 (一个tomcat 一个web应用)</li>\n<li>单实例多应用 (一个tomcat多个应用)</li>\n<li>多实例单应用 (多个tomcat都部署一个应用)</li>\n<li>多实例多应用 (多个tomcat部署多个不同的应用)</li>\n</ul>\n<p><strong>第一种场景</strong>：这是我们开发中经常用到的，如果不要求周期性地维护tomcat版本，一般的做法是把打好的war包丢到webapps目录下，然后执行startup.sh脚本，并且可以在浏览器里访问就行了。<br><strong>第二种场景</strong>：是把多个应用程序的war包放在同一个tomcat的webapps目录，这样一来，关闭和启动tomca，或tomcat挂掉会影响所有项目。<br><strong>第三种场景</strong>: 各个tomcat都运行同一个应用程序，对应地需要修改不同的监听端口，这种方式通常会和apache httpd或者nginx整合使用，做一些负载均衡的处理。<br><strong>第四种场景</strong>: 相当于第一种场景的复数形式，除了修改不同的监听端口，没有本质区别。</p>\n<p>一般来说，多实例部署tomcat，可以充分利用系统资源，不过这种方式，也有几个方面需要考虑：<br>多实例tomcat的更新维护，例如对tomcat进行升级等操作，我们需要考虑如何能“优雅”地对所有实例进行升级<br>尽量不要影响应用程序，在更新tomcat时，一不小心就把conf目录等全部覆盖，所以尽量要把配置文件和安装目录隔离<br>对于单应用来说，如果将war包分别置于各个tomcat的webapps目录，那么在发布新版本的war时，可能会出现某个实例更新失败，导致用户在访问时可能会访问到不同版本的web app，因此，<strong>比较好的方式就是所有tomcat实例都统一指向同一个应用程序</strong>，这样做，就可以多个tomcat用一份应用源码，简单部署，单机高可用也能实现（要配合nginx）.<br>本文重点阐述多实例应用的部署方案，但是为了解决上述几个问题，我们需要先来了解一下tomcat的一些基本情况。</p>\n<a id=\"more\"></a>\n<h1 id=\"2、我们的目标\"><a href=\"#2、我们的目标\" class=\"headerlink\" title=\"2、我们的目标\"></a>2、我们的目标</h1><p><a href=\"http://www.itnose.net/img/20161025/172338.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.itnose.net/img/20161025/172338.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<hr>\n<h1 id=\"3、tomcat架构\"><a href=\"#3、tomcat架构\" class=\"headerlink\" title=\"3、tomcat架构\"></a>3、tomcat架构</h1><h2 id=\"整体架构图\"><a href=\"#整体架构图\" class=\"headerlink\" title=\"整体架构图\"></a>整体架构图</h2><p><a href=\"http://www.itnose.net/img/20160411/10674534.gif\" target=\"_blank\" rel=\"external\"><img src=\"http://www.itnose.net/img/20160411/10674534.gif\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>这里有一台服务器，3台tomcat服务，以及一台tomcat的解构图。</p>\n<h2 id=\"分离目录\"><a href=\"#分离目录\" class=\"headerlink\" title=\"分离目录\"></a>分离目录</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">目录</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">bin</td>\n<td style=\"text-align:left\">主要存放脚本文件，例如比较常用的windows和linux系统中启动和关闭脚本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">主要存放配置文件，其中最重要的两个配置文件是server.xml和web.xml</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lib</td>\n<td style=\"text-align:left\">主要存放tomcat运行所依赖的包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logs</td>\n<td style=\"text-align:left\">主要存放运行时产生的日志文件，例如catalina.{date}.log等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">temp</td>\n<td style=\"text-align:left\">存放tomcat运行时产生的临时文件，例如开启了hibernate缓存的应用程序，会在该目录下生成一些文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">webapps</td>\n<td style=\"text-align:left\">部署web应用程序的默认目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">work</td>\n<td style=\"text-align:left\">主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件）</td>\n</tr>\n</tbody>\n</table>\n<p>再介绍两个tomcat中比较重要的概念（通常也是两个系统变量）——<strong>CATALINA_HOME</strong>和<strong>CATALINA_BASE</strong>：</p>\n<p><strong>CATALINA_HOME</strong>：即指向Tomcat安装路径的系统变量<br><strong>CATALINA_BASE</strong>：即指向活跃配置路径的系统变量通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。<br>Tomcat官方文档指出，CATALINA_HOME路径的路径下只需要包含bin和lib目录，这也就是支持tomcat软件运行的目录，而CATALINA_BASE设置的路径可以包括上述所有目录，不过其中bin和lib目录并不是必需的，缺省时会使用CATALINA_HOME中的bin和conf。如此，我们就可以使用一个tomcat安装目录部署多个tomcat实例，这样的好处在于方便升级，就可以在不影响tomcat实例的前提下，替换掉CATALINA_HOME指定的tomcat安装目录。</p>\n<p><a href=\"http://www.itnose.net/img/20161025/172337.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.itnose.net/img/20161025/172337.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p> tomcat serve.xml 配置结构<br>Container容器子容器间关系图<br><a href=\"http://www.itnose.net/img/20160411/10674535.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.itnose.net/img/20160411/10674535.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p> 交互图<br><a href=\"http://www.itnose.net/img/20160411/10674536.png\" target=\"_blank\" rel=\"external\"><img src=\"http://www.itnose.net/img/20160411/10674536.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p> 对比下Tomcat serve.xml 的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;GlobalNamingResources&gt;</div><div class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class=\"line\">              description=&quot;User database that can be updated and saved&quot;</div><div class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class=\"line\">  &lt;/GlobalNamingResources&gt;</div><div class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class=\"line\">      &lt;/Realm&gt;</div><div class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class=\"line\">      &lt;/Host&gt;</div><div class=\"line\">    &lt;/Engine&gt;</div><div class=\"line\">  &lt;/Service&gt;</div><div class=\"line\">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"4、实战\"><a href=\"#4、实战\" class=\"headerlink\" title=\"4、实战\"></a>4、实战</h1><p>端口配置</p>\n<h2 id=\"修改server-xml\"><a href=\"#修改server-xml\" class=\"headerlink\" title=\"修改server.xml\"></a>修改server.xml</h2><p>在server.xml中配置了四个监听端口，分别是：<br><strong>Server Port</strong>：该端口用于监听关闭tomcat的shutdown命令，<strong>默认为8005</strong>.<br><strong>Connector Port</strong>：该端口用于监听HTTP的请求，<strong>默认为8080</strong>.<br><strong>AJP Port</strong>：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，<strong>默认为8009</strong><br><strong>Redirect Port</strong>：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口，<strong>默认为8443</strong></p>\n<p>虚拟主机配置<br>再来说Host配置，Host就是所谓的虚拟主机，对应包含了一个或者多个web应用程序，默认的Host配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>其中：<br><strong>name</strong>： 虚拟主机的名称，一台主机表示了完全限定的域名或IP地址，<strong>默认为localhost</strong>，同时也是唯一的host，进入tomcat的所有http请求都会映射到该主机上<br><strong>appBase</strong>：web应用程序目录的路径，可以是CATALINA_HOME的相对路径，也可以写成绝对路径，<strong>默认情况下为$CATALINA_HOME/webappsunpackWARs</strong>： 表示是否自动解压war包<br><strong>autoDeploy</strong>：所谓的热部署，即在tomcat正在运行的情况下，如果有新的war加入，则会立即执行部署操作<br>另外再介绍一个Host中的属性—deployOnStartup：表示tomcat启动时是否自动部署appBase目录下所有的Web应用程序，默认为true。这个属性和autoDeploy会产生两次部署的“副作用”：一次是tomcat启动时就开始部署，第二次就是autoDeploy引起的热部署。因此最好将autoDeploy置为false<br>在部署<strong>多实例单应用</strong>的时候，默认的$CATALINA/webapps会因为tomcat安装目录升级产生不必要的麻烦，我们考虑将appBase的目录统一到另外的路径下。</p>\n<p>Context的配置<br>最后再说明一下Context的配置，它出现在Host配置内，一个Context的配置就代表了一个web应用程序，如果配置多应用程序，就需要在Host下配置多个Context，一个简单的Context配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Context path=&quot;/some&quot; docBase=&quot;someapp.war&quot; &gt;</div></pre></td></tr></table></figure></p>\n<p><strong>path</strong>：表示访问入口，例如，path=”/abc”，则访问localhost:8080/abc时，就可以访问该Context对应的应用程序。如果path=””，则直接用localhost:8080就可以访问<br><strong>docBase</strong>：表示应用程序的解包目录或者war文件路径，是Host的appBase配置目录的相对路径，也可以是直接写成绝对路径，<strong>但是不要将appBase的值，作为docBase配置路径的前缀，例如appBase=”somedir”，docBase=”somedir-someapp.war”，这样的配置会导致部署错误</strong><br>通过配置Host的appBase和Context的docBase两个属性，可以将应用程序的文件和tomcat相关的目录进行分离，这样webapps目录也就没有作用了。</p>\n<h2 id=\"跟我来实施该方案\"><a href=\"#跟我来实施该方案\" class=\"headerlink\" title=\"跟我来实施该方案\"></a>跟我来实施该方案</h2><ul>\n<li>现在假设我们有一台已经配置好Java环境的服务器：（我用的是阿里云）</li>\n<li>我已经有一个已经完成的shop.war 应用程序</li>\n</ul>\n<p>步骤1：<br>下载并解压tomcat<br><a href=\"/img/2016/11/tomcat01.jpg\"><img src=\"/img/2016/11/tomcat01.jpg\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>步骤2：<br>对Tomcat目录作以下调整：<br>在tomcat安装目录下创建a.ttlsa.com、b.ttlsa.com，并且将conf、logs、webapp、temp、work目录拷贝到这两个目录，然后tomcat安装目录只需要留下bin、a.ttlsa.com、b.ttlsa.com、lib这4个目录即可。配置后的目录结构如下：<br><a href=\"/img/2016/11/tomcat02.jpg\"><img src=\"/img/2016/11/tomcat02.jpg\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>如果要度tomcat 进行升级，我们只是需要对tomcat的lib 和 bin 目录进行升级即可。</p>\n<p>步骤3：<br>配置站点server.xml<br>   <strong>配置a.ttlsa.com </strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!-- 8005 改为8005 --&gt;</div><div class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;GlobalNamingResources&gt;</div><div class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class=\"line\">              description=&quot;User database that can be updated and saved&quot;</div><div class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class=\"line\">  &lt;/GlobalNamingResources&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">\t\t\t   </div><div class=\"line\">   &lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</div><div class=\"line\">\t</div><div class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class=\"line\">      &lt;/Realm&gt;</div><div class=\"line\">\t  &lt;!--</div><div class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/Host&gt;</div><div class=\"line\">\t  --&gt;</div><div class=\"line\"></div><div class=\"line\">\t  &lt;Host name=&quot;localhost&quot; appBase=&quot;F:\\data\\www\\a.ttlsa.com&quot;</div><div class=\"line\">\t\t\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t\t\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t\t\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t\t\t  &lt;/Context&gt;</div><div class=\"line\">\t   &lt;/Host&gt;</div><div class=\"line\">\t  </div><div class=\"line\">    &lt;/Engine&gt;</div><div class=\"line\">  &lt;/Service&gt;</div><div class=\"line\">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>\n<p>配置b.ttlsa.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!-- 8005 改为8006 --&gt;</div><div class=\"line\">&lt;Server port=&quot;8002&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;GlobalNamingResources&gt;</div><div class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class=\"line\">              description=&quot;User database that can be updated and saved&quot;</div><div class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class=\"line\">  &lt;/GlobalNamingResources&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8082&quot; protocol=&quot;HTTP/1.1&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">\t\t\t   </div><div class=\"line\">   &lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</div><div class=\"line\">\t</div><div class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class=\"line\">      &lt;/Realm&gt;</div><div class=\"line\">\t  &lt;!-- </div><div class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/Host&gt;</div><div class=\"line\">\t  --&gt;</div><div class=\"line\">\t </div><div class=\"line\">\t  &lt;Host name=&quot;localhost&quot; appBase=&quot;F:\\data\\www\\a.ttlsa.com&quot;</div><div class=\"line\">\t\t\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t\t\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t\t\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t\t\t  &lt;/Context&gt;</div><div class=\"line\">\t   &lt;/Host&gt;</div><div class=\"line\">\t  </div><div class=\"line\">    &lt;/Engine&gt;</div><div class=\"line\">  &lt;/Service&gt;</div><div class=\"line\">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>创建多实例启动脚本</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"># description: 启动tomcat多实例.#</div><div class=\"line\">. /etc/init.d/functions</div><div class=\"line\">RETVAL=$?</div><div class=\"line\"># tomcat实例目录</div><div class=\"line\">export CATALINA_BASE=&quot;$PWD&quot;</div><div class=\"line\"># tomcat安装目录</div><div class=\"line\">export CATALINA_HOME=&quot;/usr/local/tomcat-7.0.50&quot;</div><div class=\"line\"># 可选</div><div class=\"line\">export JVM_OPTIONS=&quot;-Xms128m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=512m&quot;</div><div class=\"line\">case &quot;$1&quot; in</div><div class=\"line\">start)</div><div class=\"line\">if [ -f $CATALINA_HOME/bin/startup.sh ];then</div><div class=\"line\">echo $&quot;Start Tomcat&quot;</div><div class=\"line\">$CATALINA_HOME/bin/startup.sh</div><div class=\"line\">fi</div><div class=\"line\">;;</div><div class=\"line\">stop)</div><div class=\"line\">if [ -f $CATALINA_HOME/bin/shutdown.sh ];then</div><div class=\"line\">echo $&quot;Stop Tomcat&quot;</div><div class=\"line\">$CATALINA_HOME/bin/shutdown.sh</div><div class=\"line\">fi</div><div class=\"line\">;;</div><div class=\"line\">*)</div><div class=\"line\">echo $&quot;Usage: $0 &#123;start|stop&#125;&quot;</div><div class=\"line\">exit 1</div><div class=\"line\">;;</div><div class=\"line\">esac</div><div class=\"line\">exit $RETVAL</div></pre></td></tr></table></figure></p>\n<p>这段shell 脚本比较简单，主要是设置环境变量，接受命令参数 RETVAL=$? ，来执行不同的命令。 RETVAL=start/stop 等<br>export CATALINA_BASE=”$PWD” 表示设置当前路径为  CATALINA_BASE 的环境变量，一般情况下CATALINA_BASE 和 CATALINA_HOME 是默认一样的。</p>\n<p><strong>启动脚本赋权限</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># chmod a+x tomcat.sh</div></pre></td></tr></table></figure></p>\n<h1 id=\"5、启动测试\"><a href=\"#5、启动测试\" class=\"headerlink\" title=\"5、启动测试\"></a>5、启动测试</h1><p>启动/关闭a.ttlsa.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh start</div><div class=\"line\"> 关闭</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh stop</div></pre></td></tr></table></figure></p>\n<p> 启动/关闭b.ttlsa.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh start</div><div class=\"line\"> 关闭</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh stop</div></pre></td></tr></table></figure></p>\n<p>备注：一定需要cd到tomcat.sh的当前目录下执行才可以</p>\n<p>在win7 下，需要创建在a.ttlsa.com 和b.ttlsa.com下面创建 startup.bat 来启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@echo off</div><div class=\"line\">set JAVA_HOME=D:\\Program Files\\Java\\jdk1.8.0_112</div><div class=\"line\">set PATH=%JAVA_HOME%\\bin;%PATH%</div><div class=\"line\">set CATALINA_BASE=%CD%</div><div class=\"line\">cd E:\\tomcat-8.5.6\\bin</div><div class=\"line\">catalina.bat start</div></pre></td></tr></table></figure>\n<p>这段是在win7 下云的bat脚本，于shell脚本同理，set CATALINA_BASE=%CD% 也是设置环境变量，CD 可以获取当前的路径。</p>\n<p>shell 脚本入门参考：<a href=\"http://sishuok.com/forum/blogPost/list/5655.html\" target=\"_blank\" rel=\"external\">http://sishuok.com/forum/blogPost/list/5655.html</a></p>\n<h1 id=\"6、结果\"><a href=\"#6、结果\" class=\"headerlink\" title=\"6、结果\"></a>6、结果</h1><p>单个Tomcat应用多个tomcat实例的配置到此，就结束了。<br>此外，我们在这里的基础上进行系统的扩展，比如如果我的Tomcat应用挂掉了，我的整个应用都将不可用了，我们应该如何处理？<br>我们可以把Tomcat复制多份，在单机的情况下，开多一个Tomcat进程，在配合Nginx 来配置，就能实现Tomcat的自动切换，这些内容，有空再写。</p>\n<p>如果需要操作多个实例显得比较麻烦，大家可以自行写统一的脚本。</p>\n<p><a href=\"/img/2016/11/tomcat03.jpg\"><img src=\"/img/2016/11/tomcat03.jpg\" alt=\"tomcat架构\" title=\"title\"></a><br><a href=\"/img/2016/11/tomcat04.jpg\"><img src=\"/img/2016/11/tomcat04.jpg\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>Linux 下的实现基本一致。</p>\n<p>这样的好处是，显而易见的，这样能开启Tomcat的多个进程，即多台tomcat，挂了也不太怕，还有其他tomcat应用支撑，代码实例我们发版本的时候，只需要发布一份，实例代码易于维护。<br>但是，我们网站的域名和端口一般是同一采用80端口，统一的域名，而现在我们开启tomcat只能一个使用80端口，显然是不合适的·，为此我们会引入负载均衡的nginx来配置。<br>nginx 采用80 端口，tomcat分别采用8080， 8081， 8082 这样就能让我们的程序稳定的运行。<br>这样，我们就能进最大的限度来压榨单机的性能，保证应用程序的稳定的运行。<br>而然，单机不然有单机的瓶颈，毕竟单机中的cpu 已经各种硬件的限制，会大大影响实例程序的跑动，在这时，就不再是单机能抗的动的了，我们需要分析程序的瓶颈在那？数据库，那就把数据库单独分出去，单独一台机器，是文件图片服务器，就把他分出去。如果是应用程序太大，就要考虑把应用实例进行拆解为不同哦那个的组件，单独部署，这就是分布式部署。<br>当然，这都是后话，只有程序复杂到一定的程度，并体量很大的话，才会做这种架构的演变，成本和技术投入的难度也会相应的变大。<br>本章，只局限于如何玩好单机的基础上来讨论，对于分布式的那块，笔者能力有限，尚且还不能完全驾驭，不做分享。</p>\n<h1 id=\"7、nginx-tomcat热备\"><a href=\"#7、nginx-tomcat热备\" class=\"headerlink\" title=\"7、nginx+tomcat热备\"></a>7、nginx+tomcat热备</h1><p>在上面的配置的基础上，我们在进一步进行扩展，进行实例的均衡和热备。<br>可以在一个服务器挂了的情况下连到另外一个，那怎么弄呢？<br>其实很简单，在upstream中的local_tomcat中配置多一个server。<br>在上面，我的a.ttlsa.com  和 b.ttlsa.com 都是访问  F:\\data\\www\\a.ttlsa.com 下的源码的index.jsp 页面,<br>为了能观察，nginx 的keepAlive 的效果，我做一下修改：<br>a.ttlsa.com —&gt; F:\\data\\www\\a.ttlsa.com  index.jsp 中文字是 1<br>b.ttlsa.com —&gt; F:\\data\\www\\b.ttlsa.com  index.jsp 中文字是 2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream local_tomcat &#123;  </div><div class=\"line\">\tserver localhost:8081 weight=1;  </div><div class=\"line\">\tserver localhost:8082 weight=5;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">   server &#123;</div><div class=\"line\">       listen       80;</div><div class=\"line\">       server_name  localhost:8081;</div><div class=\"line\"></div><div class=\"line\">       #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">       #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">       #location / &#123;</div><div class=\"line\">       #    root   html;</div><div class=\"line\">       #    index  index.html index.htm;</div><div class=\"line\">       #&#125;\t\t</div><div class=\"line\">\tlocation / &#123;  </div><div class=\"line\">\t\tproxy_pass http://local_tomcat;  </div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/img/2016/11/tomcat05.gif\"><img src=\"/img/2016/11/tomcat05.gif\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>在通常的情况下，我们一般是指向一份源码就足够了，并且设置权值，减轻应用的压力。同时也不会出现单点的情况。</p>\n<p>补充：nginx.con 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#user  nobody;</div><div class=\"line\">worker_processes  1;</div><div class=\"line\">events &#123;</div><div class=\"line\">\tworker_connections  1024;</div><div class=\"line\">&#125;</div><div class=\"line\">http &#123;</div><div class=\"line\">\tinclude       mime.types;</div><div class=\"line\">\tdefault_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">\tsendfile        on;</div><div class=\"line\">\t#tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">\t#keepalive_timeout  0;</div><div class=\"line\">\tkeepalive_timeout  65;</div><div class=\"line\"></div><div class=\"line\">\t#gzip  on;</div><div class=\"line\"></div><div class=\"line\">\tupstream local_tomcat &#123;  </div><div class=\"line\">\t\tserver localhost:8081 weight=1;  </div><div class=\"line\">\t\tserver localhost:8082 weight=5;  </div><div class=\"line\">\t&#125; </div><div class=\"line\">\t</div><div class=\"line\">\tserver &#123;</div><div class=\"line\">\t\tlisten       80;</div><div class=\"line\">\t\tserver_name  localhost;</div><div class=\"line\"></div><div class=\"line\">\t\t#charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">\t\t#access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">\t\t#location / &#123;</div><div class=\"line\">\t\t#    root   html;</div><div class=\"line\">\t\t#    index  index.html index.htm;</div><div class=\"line\">\t\t#&#125;\t\t</div><div class=\"line\">\t\tlocation / &#123;  </div><div class=\"line\">\t\t\tproxy_pass http://local_tomcat;  </div><div class=\"line\">\t\t&#125;  </div><div class=\"line\">\t\t</div><div class=\"line\">\t\terror_page   500 502 503 504  /50x.html;</div><div class=\"line\">\t\tlocation = /50x.html &#123;</div><div class=\"line\">\t\t\troot   html;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>综上：我们做到了多台tomcat 但是我们也能做到tomcat的简单升级，并且实现实例的负载均衡，已经应用的主备，在也不用担心应用挂掉而睡不了觉了。<br>缺点：nginx依然存在单点的问题。</p>\n<p>本次的实验资源供下载：<a href=\"http://download.csdn.net/detail/a82793510/9687715\" target=\"_blank\" rel=\"external\">http://download.csdn.net/detail/a82793510/9687715</a></p>\n<h1 id=\"经验之谈\"><a href=\"#经验之谈\" class=\"headerlink\" title=\"经验之谈\"></a>经验之谈</h1><p>如果是在资源有限的情况下，已经选择了单机，证明不是有钱荏，我一般会把上面的权去掉，在这样我们就可以在一台tomcat应用服务器挂掉的情况下，才会访问备机Tomcat应用服务器。<br>如果只是应用的情况下，这样已经足够了。用基于IP分发的策略已经能解决绝大部分需求。 </p>\n<h1 id=\"资源进一步极端化\"><a href=\"#资源进一步极端化\" class=\"headerlink\" title=\"资源进一步极端化\"></a>资源进一步极端化</h1><p>现在，我们在这台单机上已经部署了一个应用app1, 假设现在我司实在是资源太紧缺了，我们又要在这台机子上，部署另外一个应用app2。<br>那么现在我们就要对Nginx 和 Tomcat 进行改动。<br>改动一般分为2种方法：2级域名改动 或 2级目录改动。<br>先来在上面的基础上说说二级目录改动：<br>按照我们上面的，我们的目标的架构：我们已经部署了一个应用程序：some.war ，现在我要采用二级目录方式部署另外的一个应用程序：app.war。<br>那么我会在上面的基础上做如下的修改：localhost 可以修改为自己的域名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Host name=&quot;localhost/some&quot; appBase=&quot;F:\\data\\www\\a.ttlsa.com&quot;</div><div class=\"line\">\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t  &lt;/Context&gt;</div><div class=\"line\">&lt;/Host&gt;</div><div class=\"line\">&lt;Host name=&quot;localhost/app&quot; appBase=&quot;F:\\data\\www\\b.ttlsa.com&quot;</div><div class=\"line\">\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t  &lt;/Context&gt;</div><div class=\"line\">&lt;/Host&gt;</div></pre></td></tr></table></figure>\n<p>另外的一台的service.xml 也同样如此配置。<br>nginx中的localhost 可以修改为自己的域名 如 mp.hello.io </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">     listen       80;</div><div class=\"line\">     server_name  localhost; // 可以修改为自己的域名</div><div class=\"line\">      </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>二级域名的改动，<br>前提：我们有一个顶级域名：如 hello.io 这样的一个顶级域名：<br>那么，我们现在可以这样做：<br>现在万网中配置一下我们的二级域名，如som.hello.io和app.hello.io 都要在万网中指向我们的服务器Ip 地址。<br>在增加二级域名的情况下，我们可以新增2个是实例。<br>把Nginx修改为这样的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">#user  nobody;</div><div class=\"line\">worker_processes  1;</div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections  1024;</div><div class=\"line\">&#125;</div><div class=\"line\">http &#123;</div><div class=\"line\">    include       mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    sendfile        on;</div><div class=\"line\">    #tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">    #keepalive_timeout  0;</div><div class=\"line\">    keepalive_timeout  65;</div><div class=\"line\"></div><div class=\"line\">    #gzip  on;</div><div class=\"line\"></div><div class=\"line\">    upstream local_tomcat01 &#123;  </div><div class=\"line\">        server localhost:8081;  </div><div class=\"line\">        server localhost:8082;  </div><div class=\"line\">    &#125; </div><div class=\"line\">\t upstream local_tomcat02 &#123;  </div><div class=\"line\">        server localhost:8083;  </div><div class=\"line\">        server localhost:8084;  </div><div class=\"line\">    &#125; </div><div class=\"line\">\t    server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  some.hello.io;</div><div class=\"line\"></div><div class=\"line\">        #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">        #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">        #location / &#123;</div><div class=\"line\">        #    root   html;</div><div class=\"line\">        #    index  index.html index.htm;</div><div class=\"line\">        #&#125;        </div><div class=\"line\">        location / &#123;  </div><div class=\"line\">            proxy_pass http://local_tomcat02;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        error_page   500 502 503 504  /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">            root   html;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\tserver &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  app.hello.io;</div><div class=\"line\"></div><div class=\"line\">        #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">        #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">        #location / &#123;</div><div class=\"line\">        #    root   html;</div><div class=\"line\">        #    index  index.html index.htm;</div><div class=\"line\">        #&#125;        </div><div class=\"line\">        location / &#123;  </div><div class=\"line\">            proxy_pass http://local_tomcat02;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        error_page   500 502 503 504  /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">            root   html;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>此外，修改一下，Tomcat 的端口就可以了，同时80 81， 指向一个实例，83 84 指向另外一个实例（appBase中指定）。这样就可以做到程序的主备操作。</p>\n<p>备注：service_name 的名称可以是ip 地址。<br>nginx在配置upstream时，有两个参数：<br>ip_hash（同一IP一直使用同一台server服务）<br>weight（server的使用权重，数值越大，nginx分发的请求越多） </p>\n<p>通过配合这两个参数，能粗糙地解决session共享的问题。<br>对于一些不是太依赖session的应用，或者只有用户登录时保存，那么我认为可以用Cookies代替。<br>即使真的要Session共享，我认为手动写代码保存到Memcached比为Tomcat加插件好，这样能获得更好的可控性。<br>而且我不用Tomcat，用Redis，这个msm就用不上啦，不过我会按照我的思想实现session共享，呵呵，个人愚见！</p>\n<p><a href=\"/img/2016/11/tomcat06.png\"><img src=\"/img/2016/11/tomcat06.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>最后我们的架构是这样的。在这样的解构下，我们无论是修改为 二级目录 亦或是二级域名，我们运维都只是要做很小的改动就能切换。配置和源码分离的结构，对我们以后的扩展为分布式应用，还是依然是单机的传统结构都是进可以攻退以守。<br>留有余地，唯一不足就是nginx的单点问题，不过就单机体系来说已经够用了。</p>\n<h1 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h1><p>上面不架构已经是属于在单机上做了一个简单的集群了，要实现Tomcat。<br>要多台机器，只要修改上面Nginx的分发的Ip 就可，但是会话共享是一个很大的问题，但是，用基于IP分发的策略已经能解决绝大部分需求。<br>这里已经脱离了我们单机应用的主题，以后有机会探讨。</p>\n<hr>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.cnblogs.com/tq03/p/3507658.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tq03/p/3507658.html</a><br><a href=\"http://www.itnose.net/detail/6658488.html\" target=\"_blank\" rel=\"external\">http://www.itnose.net/detail/6658488.html</a><br><a href=\"http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/\" target=\"_blank\" rel=\"external\">http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/</a><br><a href=\"http://www.cnblogs.com/_popc/p/4167516.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/_popc/p/4167516.html</a><br><a href=\"http://www.itnose.net/detail/6485584.html\" target=\"_blank\" rel=\"external\">http://www.itnose.net/detail/6485584.html</a><br><a href=\"http://www.itnose.net/detail/6521677.html\" target=\"_blank\" rel=\"external\">http://www.itnose.net/detail/6521677.html</a><br><a href=\"http://www.itnose.net/detail/6448554.html\" target=\"_blank\" rel=\"external\">http://www.itnose.net/detail/6448554.html</a><br><a href=\"http://www.aikaiyuan.com/7907.html\" target=\"_blank\" rel=\"external\">http://www.aikaiyuan.com/7907.html</a><br><a href=\"http://blog.csdn.net/cclovett/article/details/26377269\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/cclovett/article/details/26377269</a> (nginx)<br><a href=\"http://www.roncoo.com/article/detail/125185\" target=\"_blank\" rel=\"external\">http://www.roncoo.com/article/detail/125185</a></p>\n</blockquote>\n<hr>\n<p><a href=\"/css/images/mm_facetoface_collect.png\"><img src=\"/css/images/mm_facetoface_collect.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n","excerpt":"<blockquote>\n<p>导读：<br>昨天在跟群友做技术交流的时候,了解到，有很多大公司都是采用了高可用的，分布式的，实例沉余1+台。但是在小公司的同学也很多，他们反映并不是所有公司都有那样的资源来供你调度。往往公司只会给你一台机器，因为有些应用挂了公司也不会有损失的，我们往往一台机器就可以搞定。<br>但是，我们也要为我们做出来的应用负责，毕竟东西做出来是为了给人用的，如果做出来的东西经常挂了，谈何使用，在前期，如果公司资源紧张的情况下，可以不可以做高可用，多机器的沉余部署。但是至少是在但机上有2个进程在跑。so,在这里我们就说说这个，如何做单机多实例的部署。<br>在这里谈谈，在只有单机的资源下，如何把单机的资源压榨出来，用好单机。</p>\n</blockquote>\n<hr>\n<h1 id=\"1、Tomcat部署的场景分析\"><a href=\"#1、Tomcat部署的场景分析\" class=\"headerlink\" title=\"1、Tomcat部署的场景分析\"></a>1、Tomcat部署的场景分析</h1><p>通常，我们对tomcat单机部署需求可以分为几种：</p>\n<ul>\n<li>单实例单应用 (一个tomcat 一个web应用)</li>\n<li>单实例多应用 (一个tomcat多个应用)</li>\n<li>多实例单应用 (多个tomcat都部署一个应用)</li>\n<li>多实例多应用 (多个tomcat部署多个不同的应用)</li>\n</ul>\n<p><strong>第一种场景</strong>：这是我们开发中经常用到的，如果不要求周期性地维护tomcat版本，一般的做法是把打好的war包丢到webapps目录下，然后执行startup.sh脚本，并且可以在浏览器里访问就行了。<br><strong>第二种场景</strong>：是把多个应用程序的war包放在同一个tomcat的webapps目录，这样一来，关闭和启动tomca，或tomcat挂掉会影响所有项目。<br><strong>第三种场景</strong>: 各个tomcat都运行同一个应用程序，对应地需要修改不同的监听端口，这种方式通常会和apache httpd或者nginx整合使用，做一些负载均衡的处理。<br><strong>第四种场景</strong>: 相当于第一种场景的复数形式，除了修改不同的监听端口，没有本质区别。</p>\n<p>一般来说，多实例部署tomcat，可以充分利用系统资源，不过这种方式，也有几个方面需要考虑：<br>多实例tomcat的更新维护，例如对tomcat进行升级等操作，我们需要考虑如何能“优雅”地对所有实例进行升级<br>尽量不要影响应用程序，在更新tomcat时，一不小心就把conf目录等全部覆盖，所以尽量要把配置文件和安装目录隔离<br>对于单应用来说，如果将war包分别置于各个tomcat的webapps目录，那么在发布新版本的war时，可能会出现某个实例更新失败，导致用户在访问时可能会访问到不同版本的web app，因此，<strong>比较好的方式就是所有tomcat实例都统一指向同一个应用程序</strong>，这样做，就可以多个tomcat用一份应用源码，简单部署，单机高可用也能实现（要配合nginx）.<br>本文重点阐述多实例应用的部署方案，但是为了解决上述几个问题，我们需要先来了解一下tomcat的一些基本情况。</p>","more":"<h1 id=\"2、我们的目标\"><a href=\"#2、我们的目标\" class=\"headerlink\" title=\"2、我们的目标\"></a>2、我们的目标</h1><p><a href=\"http://www.itnose.net/img/20161025/172338.png\"><img src=\"http://www.itnose.net/img/20161025/172338.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<hr>\n<h1 id=\"3、tomcat架构\"><a href=\"#3、tomcat架构\" class=\"headerlink\" title=\"3、tomcat架构\"></a>3、tomcat架构</h1><h2 id=\"整体架构图\"><a href=\"#整体架构图\" class=\"headerlink\" title=\"整体架构图\"></a>整体架构图</h2><p><a href=\"http://www.itnose.net/img/20160411/10674534.gif\"><img src=\"http://www.itnose.net/img/20160411/10674534.gif\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>这里有一台服务器，3台tomcat服务，以及一台tomcat的解构图。</p>\n<h2 id=\"分离目录\"><a href=\"#分离目录\" class=\"headerlink\" title=\"分离目录\"></a>分离目录</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">目录</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">bin</td>\n<td style=\"text-align:left\">主要存放脚本文件，例如比较常用的windows和linux系统中启动和关闭脚本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">conf</td>\n<td style=\"text-align:left\">主要存放配置文件，其中最重要的两个配置文件是server.xml和web.xml</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lib</td>\n<td style=\"text-align:left\">主要存放tomcat运行所依赖的包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">logs</td>\n<td style=\"text-align:left\">主要存放运行时产生的日志文件，例如catalina.{date}.log等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">temp</td>\n<td style=\"text-align:left\">存放tomcat运行时产生的临时文件，例如开启了hibernate缓存的应用程序，会在该目录下生成一些文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">webapps</td>\n<td style=\"text-align:left\">部署web应用程序的默认目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">work</td>\n<td style=\"text-align:left\">主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件）</td>\n</tr>\n</tbody>\n</table>\n<p>再介绍两个tomcat中比较重要的概念（通常也是两个系统变量）——<strong>CATALINA_HOME</strong>和<strong>CATALINA_BASE</strong>：</p>\n<p><strong>CATALINA_HOME</strong>：即指向Tomcat安装路径的系统变量<br><strong>CATALINA_BASE</strong>：即指向活跃配置路径的系统变量通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。<br>Tomcat官方文档指出，CATALINA_HOME路径的路径下只需要包含bin和lib目录，这也就是支持tomcat软件运行的目录，而CATALINA_BASE设置的路径可以包括上述所有目录，不过其中bin和lib目录并不是必需的，缺省时会使用CATALINA_HOME中的bin和conf。如此，我们就可以使用一个tomcat安装目录部署多个tomcat实例，这样的好处在于方便升级，就可以在不影响tomcat实例的前提下，替换掉CATALINA_HOME指定的tomcat安装目录。</p>\n<p><a href=\"http://www.itnose.net/img/20161025/172337.png\"><img src=\"http://www.itnose.net/img/20161025/172337.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p> tomcat serve.xml 配置结构<br>Container容器子容器间关系图<br><a href=\"http://www.itnose.net/img/20160411/10674535.png\"><img src=\"http://www.itnose.net/img/20160411/10674535.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p> 交互图<br><a href=\"http://www.itnose.net/img/20160411/10674536.png\"><img src=\"http://www.itnose.net/img/20160411/10674536.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p> 对比下Tomcat serve.xml 的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;GlobalNamingResources&gt;</div><div class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class=\"line\">              description=&quot;User database that can be updated and saved&quot;</div><div class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class=\"line\">  &lt;/GlobalNamingResources&gt;</div><div class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class=\"line\">      &lt;/Realm&gt;</div><div class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class=\"line\">      &lt;/Host&gt;</div><div class=\"line\">    &lt;/Engine&gt;</div><div class=\"line\">  &lt;/Service&gt;</div><div class=\"line\">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"4、实战\"><a href=\"#4、实战\" class=\"headerlink\" title=\"4、实战\"></a>4、实战</h1><p>端口配置</p>\n<h2 id=\"修改server-xml\"><a href=\"#修改server-xml\" class=\"headerlink\" title=\"修改server.xml\"></a>修改server.xml</h2><p>在server.xml中配置了四个监听端口，分别是：<br><strong>Server Port</strong>：该端口用于监听关闭tomcat的shutdown命令，<strong>默认为8005</strong>.<br><strong>Connector Port</strong>：该端口用于监听HTTP的请求，<strong>默认为8080</strong>.<br><strong>AJP Port</strong>：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，<strong>默认为8009</strong><br><strong>Redirect Port</strong>：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口，<strong>默认为8443</strong></p>\n<p>虚拟主机配置<br>再来说Host配置，Host就是所谓的虚拟主机，对应包含了一个或者多个web应用程序，默认的Host配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>其中：<br><strong>name</strong>： 虚拟主机的名称，一台主机表示了完全限定的域名或IP地址，<strong>默认为localhost</strong>，同时也是唯一的host，进入tomcat的所有http请求都会映射到该主机上<br><strong>appBase</strong>：web应用程序目录的路径，可以是CATALINA_HOME的相对路径，也可以写成绝对路径，<strong>默认情况下为$CATALINA_HOME/webappsunpackWARs</strong>： 表示是否自动解压war包<br><strong>autoDeploy</strong>：所谓的热部署，即在tomcat正在运行的情况下，如果有新的war加入，则会立即执行部署操作<br>另外再介绍一个Host中的属性—deployOnStartup：表示tomcat启动时是否自动部署appBase目录下所有的Web应用程序，默认为true。这个属性和autoDeploy会产生两次部署的“副作用”：一次是tomcat启动时就开始部署，第二次就是autoDeploy引起的热部署。因此最好将autoDeploy置为false<br>在部署<strong>多实例单应用</strong>的时候，默认的$CATALINA/webapps会因为tomcat安装目录升级产生不必要的麻烦，我们考虑将appBase的目录统一到另外的路径下。</p>\n<p>Context的配置<br>最后再说明一下Context的配置，它出现在Host配置内，一个Context的配置就代表了一个web应用程序，如果配置多应用程序，就需要在Host下配置多个Context，一个简单的Context配置如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Context path=&quot;/some&quot; docBase=&quot;someapp.war&quot; &gt;</div></pre></td></tr></table></figure></p>\n<p><strong>path</strong>：表示访问入口，例如，path=”/abc”，则访问localhost:8080/abc时，就可以访问该Context对应的应用程序。如果path=””，则直接用localhost:8080就可以访问<br><strong>docBase</strong>：表示应用程序的解包目录或者war文件路径，是Host的appBase配置目录的相对路径，也可以是直接写成绝对路径，<strong>但是不要将appBase的值，作为docBase配置路径的前缀，例如appBase=”somedir”，docBase=”somedir-someapp.war”，这样的配置会导致部署错误</strong><br>通过配置Host的appBase和Context的docBase两个属性，可以将应用程序的文件和tomcat相关的目录进行分离，这样webapps目录也就没有作用了。</p>\n<h2 id=\"跟我来实施该方案\"><a href=\"#跟我来实施该方案\" class=\"headerlink\" title=\"跟我来实施该方案\"></a>跟我来实施该方案</h2><ul>\n<li>现在假设我们有一台已经配置好Java环境的服务器：（我用的是阿里云）</li>\n<li>我已经有一个已经完成的shop.war 应用程序</li>\n</ul>\n<p>步骤1：<br>下载并解压tomcat<br><a href=\"/img/2016/11/tomcat01.jpg\"><img src=\"/img/2016/11/tomcat01.jpg\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>步骤2：<br>对Tomcat目录作以下调整：<br>在tomcat安装目录下创建a.ttlsa.com、b.ttlsa.com，并且将conf、logs、webapp、temp、work目录拷贝到这两个目录，然后tomcat安装目录只需要留下bin、a.ttlsa.com、b.ttlsa.com、lib这4个目录即可。配置后的目录结构如下：<br><a href=\"/img/2016/11/tomcat02.jpg\"><img src=\"/img/2016/11/tomcat02.jpg\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>如果要度tomcat 进行升级，我们只是需要对tomcat的lib 和 bin 目录进行升级即可。</p>\n<p>步骤3：<br>配置站点server.xml<br>   <strong>配置a.ttlsa.com </strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!-- 8005 改为8005 --&gt;</div><div class=\"line\">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;GlobalNamingResources&gt;</div><div class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class=\"line\">              description=&quot;User database that can be updated and saved&quot;</div><div class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class=\"line\">  &lt;/GlobalNamingResources&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">\t\t\t   </div><div class=\"line\">   &lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</div><div class=\"line\">\t</div><div class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class=\"line\">      &lt;/Realm&gt;</div><div class=\"line\">\t  &lt;!--</div><div class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/Host&gt;</div><div class=\"line\">\t  --&gt;</div><div class=\"line\"></div><div class=\"line\">\t  &lt;Host name=&quot;localhost&quot; appBase=&quot;F:\\data\\www\\a.ttlsa.com&quot;</div><div class=\"line\">\t\t\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t\t\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t\t\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t\t\t  &lt;/Context&gt;</div><div class=\"line\">\t   &lt;/Host&gt;</div><div class=\"line\">\t  </div><div class=\"line\">    &lt;/Engine&gt;</div><div class=\"line\">  &lt;/Service&gt;</div><div class=\"line\">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>\n<p>配置b.ttlsa.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;!-- 8005 改为8006 --&gt;</div><div class=\"line\">&lt;Server port=&quot;8002&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class=\"line\">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;GlobalNamingResources&gt;</div><div class=\"line\">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class=\"line\">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class=\"line\">              description=&quot;User database that can be updated and saved&quot;</div><div class=\"line\">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class=\"line\">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class=\"line\">  &lt;/GlobalNamingResources&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class=\"line\">    &lt;Connector port=&quot;8082&quot; protocol=&quot;HTTP/1.1&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; /&gt;</div><div class=\"line\">\t\t\t   </div><div class=\"line\">   &lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</div><div class=\"line\">\t</div><div class=\"line\">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class=\"line\">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class=\"line\">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class=\"line\">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class=\"line\">      &lt;/Realm&gt;</div><div class=\"line\">\t  &lt;!-- </div><div class=\"line\">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">      &lt;/Host&gt;</div><div class=\"line\">\t  --&gt;</div><div class=\"line\">\t </div><div class=\"line\">\t  &lt;Host name=&quot;localhost&quot; appBase=&quot;F:\\data\\www\\a.ttlsa.com&quot;</div><div class=\"line\">\t\t\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t\t\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t\t\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t\t\t  &lt;/Context&gt;</div><div class=\"line\">\t   &lt;/Host&gt;</div><div class=\"line\">\t  </div><div class=\"line\">    &lt;/Engine&gt;</div><div class=\"line\">  &lt;/Service&gt;</div><div class=\"line\">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>创建多实例启动脚本</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"># description: 启动tomcat多实例.#</div><div class=\"line\">. /etc/init.d/functions</div><div class=\"line\">RETVAL=$?</div><div class=\"line\"># tomcat实例目录</div><div class=\"line\">export CATALINA_BASE=&quot;$PWD&quot;</div><div class=\"line\"># tomcat安装目录</div><div class=\"line\">export CATALINA_HOME=&quot;/usr/local/tomcat-7.0.50&quot;</div><div class=\"line\"># 可选</div><div class=\"line\">export JVM_OPTIONS=&quot;-Xms128m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=512m&quot;</div><div class=\"line\">case &quot;$1&quot; in</div><div class=\"line\">start)</div><div class=\"line\">if [ -f $CATALINA_HOME/bin/startup.sh ];then</div><div class=\"line\">echo $&quot;Start Tomcat&quot;</div><div class=\"line\">$CATALINA_HOME/bin/startup.sh</div><div class=\"line\">fi</div><div class=\"line\">;;</div><div class=\"line\">stop)</div><div class=\"line\">if [ -f $CATALINA_HOME/bin/shutdown.sh ];then</div><div class=\"line\">echo $&quot;Stop Tomcat&quot;</div><div class=\"line\">$CATALINA_HOME/bin/shutdown.sh</div><div class=\"line\">fi</div><div class=\"line\">;;</div><div class=\"line\">*)</div><div class=\"line\">echo $&quot;Usage: $0 &#123;start|stop&#125;&quot;</div><div class=\"line\">exit 1</div><div class=\"line\">;;</div><div class=\"line\">esac</div><div class=\"line\">exit $RETVAL</div></pre></td></tr></table></figure></p>\n<p>这段shell 脚本比较简单，主要是设置环境变量，接受命令参数 RETVAL=$? ，来执行不同的命令。 RETVAL=start/stop 等<br>export CATALINA_BASE=”$PWD” 表示设置当前路径为  CATALINA_BASE 的环境变量，一般情况下CATALINA_BASE 和 CATALINA_HOME 是默认一样的。</p>\n<p><strong>启动脚本赋权限</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># chmod a+x tomcat.sh</div></pre></td></tr></table></figure></p>\n<h1 id=\"5、启动测试\"><a href=\"#5、启动测试\" class=\"headerlink\" title=\"5、启动测试\"></a>5、启动测试</h1><p>启动/关闭a.ttlsa.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh start</div><div class=\"line\"> 关闭</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh stop</div></pre></td></tr></table></figure></p>\n<p> 启动/关闭b.ttlsa.com<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">启动</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh start</div><div class=\"line\"> 关闭</div><div class=\"line\"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class=\"line\"> # ./tomcat.sh stop</div></pre></td></tr></table></figure></p>\n<p>备注：一定需要cd到tomcat.sh的当前目录下执行才可以</p>\n<p>在win7 下，需要创建在a.ttlsa.com 和b.ttlsa.com下面创建 startup.bat 来启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@echo off</div><div class=\"line\">set JAVA_HOME=D:\\Program Files\\Java\\jdk1.8.0_112</div><div class=\"line\">set PATH=%JAVA_HOME%\\bin;%PATH%</div><div class=\"line\">set CATALINA_BASE=%CD%</div><div class=\"line\">cd E:\\tomcat-8.5.6\\bin</div><div class=\"line\">catalina.bat start</div></pre></td></tr></table></figure>\n<p>这段是在win7 下云的bat脚本，于shell脚本同理，set CATALINA_BASE=%CD% 也是设置环境变量，CD 可以获取当前的路径。</p>\n<p>shell 脚本入门参考：<a href=\"http://sishuok.com/forum/blogPost/list/5655.html\">http://sishuok.com/forum/blogPost/list/5655.html</a></p>\n<h1 id=\"6、结果\"><a href=\"#6、结果\" class=\"headerlink\" title=\"6、结果\"></a>6、结果</h1><p>单个Tomcat应用多个tomcat实例的配置到此，就结束了。<br>此外，我们在这里的基础上进行系统的扩展，比如如果我的Tomcat应用挂掉了，我的整个应用都将不可用了，我们应该如何处理？<br>我们可以把Tomcat复制多份，在单机的情况下，开多一个Tomcat进程，在配合Nginx 来配置，就能实现Tomcat的自动切换，这些内容，有空再写。</p>\n<p>如果需要操作多个实例显得比较麻烦，大家可以自行写统一的脚本。</p>\n<p><a href=\"/img/2016/11/tomcat03.jpg\"><img src=\"/img/2016/11/tomcat03.jpg\" alt=\"tomcat架构\" title=\"title\"></a><br><a href=\"/img/2016/11/tomcat04.jpg\"><img src=\"/img/2016/11/tomcat04.jpg\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>Linux 下的实现基本一致。</p>\n<p>这样的好处是，显而易见的，这样能开启Tomcat的多个进程，即多台tomcat，挂了也不太怕，还有其他tomcat应用支撑，代码实例我们发版本的时候，只需要发布一份，实例代码易于维护。<br>但是，我们网站的域名和端口一般是同一采用80端口，统一的域名，而现在我们开启tomcat只能一个使用80端口，显然是不合适的·，为此我们会引入负载均衡的nginx来配置。<br>nginx 采用80 端口，tomcat分别采用8080， 8081， 8082 这样就能让我们的程序稳定的运行。<br>这样，我们就能进最大的限度来压榨单机的性能，保证应用程序的稳定的运行。<br>而然，单机不然有单机的瓶颈，毕竟单机中的cpu 已经各种硬件的限制，会大大影响实例程序的跑动，在这时，就不再是单机能抗的动的了，我们需要分析程序的瓶颈在那？数据库，那就把数据库单独分出去，单独一台机器，是文件图片服务器，就把他分出去。如果是应用程序太大，就要考虑把应用实例进行拆解为不同哦那个的组件，单独部署，这就是分布式部署。<br>当然，这都是后话，只有程序复杂到一定的程度，并体量很大的话，才会做这种架构的演变，成本和技术投入的难度也会相应的变大。<br>本章，只局限于如何玩好单机的基础上来讨论，对于分布式的那块，笔者能力有限，尚且还不能完全驾驭，不做分享。</p>\n<h1 id=\"7、nginx-tomcat热备\"><a href=\"#7、nginx-tomcat热备\" class=\"headerlink\" title=\"7、nginx+tomcat热备\"></a>7、nginx+tomcat热备</h1><p>在上面的配置的基础上，我们在进一步进行扩展，进行实例的均衡和热备。<br>可以在一个服务器挂了的情况下连到另外一个，那怎么弄呢？<br>其实很简单，在upstream中的local_tomcat中配置多一个server。<br>在上面，我的a.ttlsa.com  和 b.ttlsa.com 都是访问  F:\\data\\www\\a.ttlsa.com 下的源码的index.jsp 页面,<br>为了能观察，nginx 的keepAlive 的效果，我做一下修改：<br>a.ttlsa.com —&gt; F:\\data\\www\\a.ttlsa.com  index.jsp 中文字是 1<br>b.ttlsa.com —&gt; F:\\data\\www\\b.ttlsa.com  index.jsp 中文字是 2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream local_tomcat &#123;  </div><div class=\"line\">\tserver localhost:8081 weight=1;  </div><div class=\"line\">\tserver localhost:8082 weight=5;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">   server &#123;</div><div class=\"line\">       listen       80;</div><div class=\"line\">       server_name  localhost:8081;</div><div class=\"line\"></div><div class=\"line\">       #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">       #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">       #location / &#123;</div><div class=\"line\">       #    root   html;</div><div class=\"line\">       #    index  index.html index.htm;</div><div class=\"line\">       #&#125;\t\t</div><div class=\"line\">\tlocation / &#123;  </div><div class=\"line\">\t\tproxy_pass http://local_tomcat;  </div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"/img/2016/11/tomcat05.gif\"><img src=\"/img/2016/11/tomcat05.gif\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>在通常的情况下，我们一般是指向一份源码就足够了，并且设置权值，减轻应用的压力。同时也不会出现单点的情况。</p>\n<p>补充：nginx.con 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">#user  nobody;</div><div class=\"line\">worker_processes  1;</div><div class=\"line\">events &#123;</div><div class=\"line\">\tworker_connections  1024;</div><div class=\"line\">&#125;</div><div class=\"line\">http &#123;</div><div class=\"line\">\tinclude       mime.types;</div><div class=\"line\">\tdefault_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">\tsendfile        on;</div><div class=\"line\">\t#tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">\t#keepalive_timeout  0;</div><div class=\"line\">\tkeepalive_timeout  65;</div><div class=\"line\"></div><div class=\"line\">\t#gzip  on;</div><div class=\"line\"></div><div class=\"line\">\tupstream local_tomcat &#123;  </div><div class=\"line\">\t\tserver localhost:8081 weight=1;  </div><div class=\"line\">\t\tserver localhost:8082 weight=5;  </div><div class=\"line\">\t&#125; </div><div class=\"line\">\t</div><div class=\"line\">\tserver &#123;</div><div class=\"line\">\t\tlisten       80;</div><div class=\"line\">\t\tserver_name  localhost;</div><div class=\"line\"></div><div class=\"line\">\t\t#charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">\t\t#access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">\t\t#location / &#123;</div><div class=\"line\">\t\t#    root   html;</div><div class=\"line\">\t\t#    index  index.html index.htm;</div><div class=\"line\">\t\t#&#125;\t\t</div><div class=\"line\">\t\tlocation / &#123;  </div><div class=\"line\">\t\t\tproxy_pass http://local_tomcat;  </div><div class=\"line\">\t\t&#125;  </div><div class=\"line\">\t\t</div><div class=\"line\">\t\terror_page   500 502 503 504  /50x.html;</div><div class=\"line\">\t\tlocation = /50x.html &#123;</div><div class=\"line\">\t\t\troot   html;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>综上：我们做到了多台tomcat 但是我们也能做到tomcat的简单升级，并且实现实例的负载均衡，已经应用的主备，在也不用担心应用挂掉而睡不了觉了。<br>缺点：nginx依然存在单点的问题。</p>\n<p>本次的实验资源供下载：<a href=\"http://download.csdn.net/detail/a82793510/9687715\">http://download.csdn.net/detail/a82793510/9687715</a></p>\n<h1 id=\"经验之谈\"><a href=\"#经验之谈\" class=\"headerlink\" title=\"经验之谈\"></a>经验之谈</h1><p>如果是在资源有限的情况下，已经选择了单机，证明不是有钱荏，我一般会把上面的权去掉，在这样我们就可以在一台tomcat应用服务器挂掉的情况下，才会访问备机Tomcat应用服务器。<br>如果只是应用的情况下，这样已经足够了。用基于IP分发的策略已经能解决绝大部分需求。 </p>\n<h1 id=\"资源进一步极端化\"><a href=\"#资源进一步极端化\" class=\"headerlink\" title=\"资源进一步极端化\"></a>资源进一步极端化</h1><p>现在，我们在这台单机上已经部署了一个应用app1, 假设现在我司实在是资源太紧缺了，我们又要在这台机子上，部署另外一个应用app2。<br>那么现在我们就要对Nginx 和 Tomcat 进行改动。<br>改动一般分为2种方法：2级域名改动 或 2级目录改动。<br>先来在上面的基础上说说二级目录改动：<br>按照我们上面的，我们的目标的架构：我们已经部署了一个应用程序：some.war ，现在我要采用二级目录方式部署另外的一个应用程序：app.war。<br>那么我会在上面的基础上做如下的修改：localhost 可以修改为自己的域名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Host name=&quot;localhost/some&quot; appBase=&quot;F:\\data\\www\\a.ttlsa.com&quot;</div><div class=\"line\">\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t  &lt;/Context&gt;</div><div class=\"line\">&lt;/Host&gt;</div><div class=\"line\">&lt;Host name=&quot;localhost/app&quot; appBase=&quot;F:\\data\\www\\b.ttlsa.com&quot;</div><div class=\"line\">\t  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class=\"line\">\t  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class=\"line\">\t  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class=\"line\">\t\t&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class=\"line\">\t  &lt;/Context&gt;</div><div class=\"line\">&lt;/Host&gt;</div></pre></td></tr></table></figure>\n<p>另外的一台的service.xml 也同样如此配置。<br>nginx中的localhost 可以修改为自己的域名 如 mp.hello.io </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">     listen       80;</div><div class=\"line\">     server_name  localhost; // 可以修改为自己的域名</div><div class=\"line\">      </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>二级域名的改动，<br>前提：我们有一个顶级域名：如 hello.io 这样的一个顶级域名：<br>那么，我们现在可以这样做：<br>现在万网中配置一下我们的二级域名，如som.hello.io和app.hello.io 都要在万网中指向我们的服务器Ip 地址。<br>在增加二级域名的情况下，我们可以新增2个是实例。<br>把Nginx修改为这样的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">#user  nobody;</div><div class=\"line\">worker_processes  1;</div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections  1024;</div><div class=\"line\">&#125;</div><div class=\"line\">http &#123;</div><div class=\"line\">    include       mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    sendfile        on;</div><div class=\"line\">    #tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">    #keepalive_timeout  0;</div><div class=\"line\">    keepalive_timeout  65;</div><div class=\"line\"></div><div class=\"line\">    #gzip  on;</div><div class=\"line\"></div><div class=\"line\">    upstream local_tomcat01 &#123;  </div><div class=\"line\">        server localhost:8081;  </div><div class=\"line\">        server localhost:8082;  </div><div class=\"line\">    &#125; </div><div class=\"line\">\t upstream local_tomcat02 &#123;  </div><div class=\"line\">        server localhost:8083;  </div><div class=\"line\">        server localhost:8084;  </div><div class=\"line\">    &#125; </div><div class=\"line\">\t    server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  some.hello.io;</div><div class=\"line\"></div><div class=\"line\">        #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">        #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">        #location / &#123;</div><div class=\"line\">        #    root   html;</div><div class=\"line\">        #    index  index.html index.htm;</div><div class=\"line\">        #&#125;        </div><div class=\"line\">        location / &#123;  </div><div class=\"line\">            proxy_pass http://local_tomcat02;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        error_page   500 502 503 504  /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">            root   html;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\tserver &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  app.hello.io;</div><div class=\"line\"></div><div class=\"line\">        #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">        #access_log  logs/host.access.log  main;</div><div class=\"line\"></div><div class=\"line\">        #location / &#123;</div><div class=\"line\">        #    root   html;</div><div class=\"line\">        #    index  index.html index.htm;</div><div class=\"line\">        #&#125;        </div><div class=\"line\">        location / &#123;  </div><div class=\"line\">            proxy_pass http://local_tomcat02;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        error_page   500 502 503 504  /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">            root   html;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>此外，修改一下，Tomcat 的端口就可以了，同时80 81， 指向一个实例，83 84 指向另外一个实例（appBase中指定）。这样就可以做到程序的主备操作。</p>\n<p>备注：service_name 的名称可以是ip 地址。<br>nginx在配置upstream时，有两个参数：<br>ip_hash（同一IP一直使用同一台server服务）<br>weight（server的使用权重，数值越大，nginx分发的请求越多） </p>\n<p>通过配合这两个参数，能粗糙地解决session共享的问题。<br>对于一些不是太依赖session的应用，或者只有用户登录时保存，那么我认为可以用Cookies代替。<br>即使真的要Session共享，我认为手动写代码保存到Memcached比为Tomcat加插件好，这样能获得更好的可控性。<br>而且我不用Tomcat，用Redis，这个msm就用不上啦，不过我会按照我的思想实现session共享，呵呵，个人愚见！</p>\n<p><a href=\"/img/2016/11/tomcat06.png\"><img src=\"/img/2016/11/tomcat06.png\" alt=\"tomcat架构\" title=\"title\"></a></p>\n<p>最后我们的架构是这样的。在这样的解构下，我们无论是修改为 二级目录 亦或是二级域名，我们运维都只是要做很小的改动就能切换。配置和源码分离的结构，对我们以后的扩展为分布式应用，还是依然是单机的传统结构都是进可以攻退以守。<br>留有余地，唯一不足就是nginx的单点问题，不过就单机体系来说已经够用了。</p>\n<h1 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h1><p>上面不架构已经是属于在单机上做了一个简单的集群了，要实现Tomcat。<br>要多台机器，只要修改上面Nginx的分发的Ip 就可，但是会话共享是一个很大的问题，但是，用基于IP分发的策略已经能解决绝大部分需求。<br>这里已经脱离了我们单机应用的主题，以后有机会探讨。</p>\n<hr>\n<blockquote>\n<p>参考文章：<br><a href=\"http://www.cnblogs.com/tq03/p/3507658.html\">http://www.cnblogs.com/tq03/p/3507658.html</a><br><a href=\"http://www.itnose.net/detail/6658488.html\">http://www.itnose.net/detail/6658488.html</a><br><a href=\"http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/\">http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/</a><br><a href=\"http://www.cnblogs.com/_popc/p/4167516.html\">http://www.cnblogs.com/_popc/p/4167516.html</a><br><a href=\"http://www.itnose.net/detail/6485584.html\">http://www.itnose.net/detail/6485584.html</a><br><a href=\"http://www.itnose.net/detail/6521677.html\">http://www.itnose.net/detail/6521677.html</a><br><a href=\"http://www.itnose.net/detail/6448554.html\">http://www.itnose.net/detail/6448554.html</a><br><a href=\"http://www.aikaiyuan.com/7907.html\">http://www.aikaiyuan.com/7907.html</a><br><a href=\"http://blog.csdn.net/cclovett/article/details/26377269\">http://blog.csdn.net/cclovett/article/details/26377269</a> (nginx)<br><a href=\"http://www.roncoo.com/article/detail/125185\">http://www.roncoo.com/article/detail/125185</a></p>\n</blockquote>\n<hr>\n<p><a href=\"/css/images/mm_facetoface_collect.png\"><img src=\"/css/images/mm_facetoface_collect.png\" alt=\"tomcat架构\" title=\"title\"></a></p>"},{"title":"机器学习","_content":"\n[webqq-core](https://github.com/im-qq/webqq-core )\n[xiaov](https://github.com/b3log/xiaov )\nhttps://github.com/im-qq/webqq-core\n\n\nhttps://code.google.com/archive/p/iqq/\nhttp://pan.baidu.com/share/home?uk=3071047022\nhttps://hacpai.com/article/1467011936362","source":"_posts/other/rob.md","raw":"---\ntitle: 机器学习\ncategories:\n- 日常技术\ntags:\n- 机器人\n- 机器学习\n---\n\n[webqq-core](https://github.com/im-qq/webqq-core )\n[xiaov](https://github.com/b3log/xiaov )\nhttps://github.com/im-qq/webqq-core\n\n\nhttps://code.google.com/archive/p/iqq/\nhttp://pan.baidu.com/share/home?uk=3071047022\nhttps://hacpai.com/article/1467011936362","slug":"other/rob","published":1,"date":"2016-11-12T13:58:35.006Z","updated":"2016-11-18T17:04:07.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp82a0023c88qa562j0ss","content":"<p><a href=\"https://github.com/im-qq/webqq-core\" target=\"_blank\" rel=\"external\">webqq-core</a><br><a href=\"https://github.com/b3log/xiaov\" target=\"_blank\" rel=\"external\">xiaov</a><br><a href=\"https://github.com/im-qq/webqq-core\" target=\"_blank\" rel=\"external\">https://github.com/im-qq/webqq-core</a></p>\n<p><a href=\"https://code.google.com/archive/p/iqq/\" target=\"_blank\" rel=\"external\">https://code.google.com/archive/p/iqq/</a><br><a href=\"http://pan.baidu.com/share/home?uk=3071047022\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/share/home?uk=3071047022</a><br><a href=\"https://hacpai.com/article/1467011936362\" target=\"_blank\" rel=\"external\">https://hacpai.com/article/1467011936362</a></p>\n","excerpt":"","more":"<p><a href=\"https://github.com/im-qq/webqq-core\">webqq-core</a><br><a href=\"https://github.com/b3log/xiaov\">xiaov</a><br><a href=\"https://github.com/im-qq/webqq-core\">https://github.com/im-qq/webqq-core</a></p>\n<p><a href=\"https://code.google.com/archive/p/iqq/\">https://code.google.com/archive/p/iqq/</a><br><a href=\"http://pan.baidu.com/share/home?uk=3071047022\">http://pan.baidu.com/share/home?uk=3071047022</a><br><a href=\"https://hacpai.com/article/1467011936362\">https://hacpai.com/article/1467011936362</a></p>\n"},{"title":"java.security源码解读系列-消息摘要与数字签名","_content":"\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe>\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n- 作者：灯塔\n- 原文： \n\n签名类是用于提供应用程序的功能的数字签名算法。数字签名用于身份验证和完整性保证数字数据。签名算法并不只是局限为DSA sha-1 算法，可以是MD2+RSA DSA+sha-1 这种特殊的结合，还可以加盐等等，签名对象可以用于生成和验证数字签名。\nSignature对象可以用于生成和验证数字签名。\n\n<!-- more -->\n\n我们先来看看Signature 类：\n```\n/**@author Benjamin Renaud**/\npublic abstract class Signature extends SignatureSpi {\n  ....... \n}\n```\n通过类的继承SignatureSpi 我们知道，Signature 是属于SPI（Service Provider Interface）体系下的，也就是说，他类实现中必然提供了一个 getProvider() 方法，支持签名算法的别名实现。\n\n在看源码的时候，发现好多这种代码\n```\nprivate static final Debug debug =\n\t\t\t\t\tDebug.getInstance(\"jca\", \"Signature\");\n\nprivate static final Debug pdebug =\n\t\t\t\t\tDebug.getInstance(\"provider\", \"Provider\");\nprivate static final boolean skipDebug =\n\tDebug.isOn(\"engine=\") && !Debug.isOn(\"signature\");\n```\n很多Debug.XX() 的实现。这好像是 Java Platform Debugger Architecture  下的东西 ，具体可以看这里：http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html\n是securiy 下面的一个工具类：\n\n\nSignature 对象是一个抽象类，意味这他必然要被继承。\n我们再次具体的看看他的源码实现\n``` \n/**@author Benjamin Renaud**/\npublic abstract class Signature extends SignatureSpi {\n   private String algorithm;\n   /**The provider 包内可见**/\n   Provider provider;\n   \n   private final static Map<String,Boolean> signatureInfo;\n\n   static {\n        signatureInfo = new ConcurrentHashMap<String,Boolean>();\n        Boolean TRUE = Boolean.TRUE;\n        // pre-initialize with values for our SignatureSpi implementations\n        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);\n        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);\n        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);\n        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);\n   }\n   \n   public final void initSign(PrivateKey privateKey)\n            throws InvalidKeyException {\n        engineInitSign(privateKey);\n        state = SIGN;\n\n        if (!skipDebug && pdebug != null) {\n            pdebug.println(\"Signature.\" + algorithm +\n                \" signing algorithm from: \" + this.provider.getName());\n        }\n    }\n\t\n\t//这里有一个加密适配器，将来会废除\n    @SuppressWarnings(\"deprecation\")\n    private static class CipherAdapter extends SignatureSpi {\n\n        private final Cipher cipher;\n\n        private ByteArrayOutputStream data;\n\t｝\t\n}\t\n```\n\n\n>参考：\nhttp://www.cnblogs.com/jingmoxukong/p/5700906.html\nhttp://www.cnblogs.com/jingmoxukong/p/5688306.html","source":"_posts/jca/03.md","raw":"---\ntitle: java.security源码解读系列-消息摘要与数字签名\ncategories:\n- 源码阅读\n- security源码导读系列\ntags:\n- jdk源码系列\n- security源码导读系列\n---\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe>\n>导读：\n- 这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。\n- 本文相关的JDK版本是JDK7,jdk8\n- 作者：灯塔\n- 原文： \n\n签名类是用于提供应用程序的功能的数字签名算法。数字签名用于身份验证和完整性保证数字数据。签名算法并不只是局限为DSA sha-1 算法，可以是MD2+RSA DSA+sha-1 这种特殊的结合，还可以加盐等等，签名对象可以用于生成和验证数字签名。\nSignature对象可以用于生成和验证数字签名。\n\n<!-- more -->\n\n我们先来看看Signature 类：\n```\n/**@author Benjamin Renaud**/\npublic abstract class Signature extends SignatureSpi {\n  ....... \n}\n```\n通过类的继承SignatureSpi 我们知道，Signature 是属于SPI（Service Provider Interface）体系下的，也就是说，他类实现中必然提供了一个 getProvider() 方法，支持签名算法的别名实现。\n\n在看源码的时候，发现好多这种代码\n```\nprivate static final Debug debug =\n\t\t\t\t\tDebug.getInstance(\"jca\", \"Signature\");\n\nprivate static final Debug pdebug =\n\t\t\t\t\tDebug.getInstance(\"provider\", \"Provider\");\nprivate static final boolean skipDebug =\n\tDebug.isOn(\"engine=\") && !Debug.isOn(\"signature\");\n```\n很多Debug.XX() 的实现。这好像是 Java Platform Debugger Architecture  下的东西 ，具体可以看这里：http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html\n是securiy 下面的一个工具类：\n\n\nSignature 对象是一个抽象类，意味这他必然要被继承。\n我们再次具体的看看他的源码实现\n``` \n/**@author Benjamin Renaud**/\npublic abstract class Signature extends SignatureSpi {\n   private String algorithm;\n   /**The provider 包内可见**/\n   Provider provider;\n   \n   private final static Map<String,Boolean> signatureInfo;\n\n   static {\n        signatureInfo = new ConcurrentHashMap<String,Boolean>();\n        Boolean TRUE = Boolean.TRUE;\n        // pre-initialize with values for our SignatureSpi implementations\n        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);\n        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);\n        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);\n        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);\n        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);\n   }\n   \n   public final void initSign(PrivateKey privateKey)\n            throws InvalidKeyException {\n        engineInitSign(privateKey);\n        state = SIGN;\n\n        if (!skipDebug && pdebug != null) {\n            pdebug.println(\"Signature.\" + algorithm +\n                \" signing algorithm from: \" + this.provider.getName());\n        }\n    }\n\t\n\t//这里有一个加密适配器，将来会废除\n    @SuppressWarnings(\"deprecation\")\n    private static class CipherAdapter extends SignatureSpi {\n\n        private final Cipher cipher;\n\n        private ByteArrayOutputStream data;\n\t｝\t\n}\t\n```\n\n\n>参考：\nhttp://www.cnblogs.com/jingmoxukong/p/5700906.html\nhttp://www.cnblogs.com/jingmoxukong/p/5688306.html","slug":"jca/03","published":1,"date":"2016-11-20T14:40:53.703Z","updated":"2016-11-20T15:56:36.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp82l002pc88qpmo48uof","content":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe></p>\n<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n<li>作者：灯塔</li>\n<li>原文： </li>\n</ul>\n</blockquote>\n<p>签名类是用于提供应用程序的功能的数字签名算法。数字签名用于身份验证和完整性保证数字数据。签名算法并不只是局限为DSA sha-1 算法，可以是MD2+RSA DSA+sha-1 这种特殊的结合，还可以加盐等等，签名对象可以用于生成和验证数字签名。<br>Signature对象可以用于生成和验证数字签名。</p>\n<a id=\"more\"></a>\n<p>我们先来看看Signature 类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public abstract class Signature extends SignatureSpi &#123;</div><div class=\"line\">  ....... </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过类的继承SignatureSpi 我们知道，Signature 是属于SPI（Service Provider Interface）体系下的，也就是说，他类实现中必然提供了一个 getProvider() 方法，支持签名算法的别名实现。</p>\n<p>在看源码的时候，发现好多这种代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static final Debug debug =</div><div class=\"line\">\t\t\t\t\tDebug.getInstance(&quot;jca&quot;, &quot;Signature&quot;);</div><div class=\"line\"></div><div class=\"line\">private static final Debug pdebug =</div><div class=\"line\">\t\t\t\t\tDebug.getInstance(&quot;provider&quot;, &quot;Provider&quot;);</div><div class=\"line\">private static final boolean skipDebug =</div><div class=\"line\">\tDebug.isOn(&quot;engine=&quot;) &amp;&amp; !Debug.isOn(&quot;signature&quot;);</div></pre></td></tr></table></figure></p>\n<p>很多Debug.XX() 的实现。这好像是 Java Platform Debugger Architecture  下的东西 ，具体可以看这里：<a href=\"http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html\" target=\"_blank\" rel=\"external\">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</a><br>是securiy 下面的一个工具类：</p>\n<p>Signature 对象是一个抽象类，意味这他必然要被继承。<br>我们再次具体的看看他的源码实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public abstract class Signature extends SignatureSpi &#123;</div><div class=\"line\">   private String algorithm;</div><div class=\"line\">   /**The provider 包内可见**/</div><div class=\"line\">   Provider provider;</div><div class=\"line\">   </div><div class=\"line\">   private final static Map&lt;String,Boolean&gt; signatureInfo;</div><div class=\"line\"></div><div class=\"line\">   static &#123;</div><div class=\"line\">        signatureInfo = new ConcurrentHashMap&lt;String,Boolean&gt;();</div><div class=\"line\">        Boolean TRUE = Boolean.TRUE;</div><div class=\"line\">        // pre-initialize with values for our SignatureSpi implementations</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.provider.DSA$RawDSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.provider.DSA$SHA1withDSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$MD2withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$MD5withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA1withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA256withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA384withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA512withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;com.sun.net.ssl.internal.ssl.RSASignature&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.pkcs11.P11Signature&quot;, TRUE);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   public final void initSign(PrivateKey privateKey)</div><div class=\"line\">            throws InvalidKeyException &#123;</div><div class=\"line\">        engineInitSign(privateKey);</div><div class=\"line\">        state = SIGN;</div><div class=\"line\"></div><div class=\"line\">        if (!skipDebug &amp;&amp; pdebug != null) &#123;</div><div class=\"line\">            pdebug.println(&quot;Signature.&quot; + algorithm +</div><div class=\"line\">                &quot; signing algorithm from: &quot; + this.provider.getName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t//这里有一个加密适配器，将来会废除</div><div class=\"line\">    @SuppressWarnings(&quot;deprecation&quot;)</div><div class=\"line\">    private static class CipherAdapter extends SignatureSpi &#123;</div><div class=\"line\"></div><div class=\"line\">        private final Cipher cipher;</div><div class=\"line\"></div><div class=\"line\">        private ByteArrayOutputStream data;</div><div class=\"line\">\t｝\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参考：<br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5700906.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jingmoxukong/p/5700906.html</a><br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5688306.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jingmoxukong/p/5688306.html</a></p>\n</blockquote>\n","excerpt":"<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430\"></iframe></p>\n<blockquote>\n<p>导读：</p>\n<ul>\n<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>\n<li>本文相关的JDK版本是JDK7,jdk8</li>\n<li>作者：灯塔</li>\n<li>原文： </li>\n</ul>\n</blockquote>\n<p>签名类是用于提供应用程序的功能的数字签名算法。数字签名用于身份验证和完整性保证数字数据。签名算法并不只是局限为DSA sha-1 算法，可以是MD2+RSA DSA+sha-1 这种特殊的结合，还可以加盐等等，签名对象可以用于生成和验证数字签名。<br>Signature对象可以用于生成和验证数字签名。</p>","more":"<p>我们先来看看Signature 类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public abstract class Signature extends SignatureSpi &#123;</div><div class=\"line\">  ....... </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过类的继承SignatureSpi 我们知道，Signature 是属于SPI（Service Provider Interface）体系下的，也就是说，他类实现中必然提供了一个 getProvider() 方法，支持签名算法的别名实现。</p>\n<p>在看源码的时候，发现好多这种代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static final Debug debug =</div><div class=\"line\">\t\t\t\t\tDebug.getInstance(&quot;jca&quot;, &quot;Signature&quot;);</div><div class=\"line\"></div><div class=\"line\">private static final Debug pdebug =</div><div class=\"line\">\t\t\t\t\tDebug.getInstance(&quot;provider&quot;, &quot;Provider&quot;);</div><div class=\"line\">private static final boolean skipDebug =</div><div class=\"line\">\tDebug.isOn(&quot;engine=&quot;) &amp;&amp; !Debug.isOn(&quot;signature&quot;);</div></pre></td></tr></table></figure></p>\n<p>很多Debug.XX() 的实现。这好像是 Java Platform Debugger Architecture  下的东西 ，具体可以看这里：<a href=\"http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html\">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</a><br>是securiy 下面的一个工具类：</p>\n<p>Signature 对象是一个抽象类，意味这他必然要被继承。<br>我们再次具体的看看他的源码实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**@author Benjamin Renaud**/</div><div class=\"line\">public abstract class Signature extends SignatureSpi &#123;</div><div class=\"line\">   private String algorithm;</div><div class=\"line\">   /**The provider 包内可见**/</div><div class=\"line\">   Provider provider;</div><div class=\"line\">   </div><div class=\"line\">   private final static Map&lt;String,Boolean&gt; signatureInfo;</div><div class=\"line\"></div><div class=\"line\">   static &#123;</div><div class=\"line\">        signatureInfo = new ConcurrentHashMap&lt;String,Boolean&gt;();</div><div class=\"line\">        Boolean TRUE = Boolean.TRUE;</div><div class=\"line\">        // pre-initialize with values for our SignatureSpi implementations</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.provider.DSA$RawDSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.provider.DSA$SHA1withDSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$MD2withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$MD5withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA1withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA256withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA384withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA512withRSA&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;com.sun.net.ssl.internal.ssl.RSASignature&quot;, TRUE);</div><div class=\"line\">        signatureInfo.put(&quot;sun.security.pkcs11.P11Signature&quot;, TRUE);</div><div class=\"line\">   &#125;</div><div class=\"line\">   </div><div class=\"line\">   public final void initSign(PrivateKey privateKey)</div><div class=\"line\">            throws InvalidKeyException &#123;</div><div class=\"line\">        engineInitSign(privateKey);</div><div class=\"line\">        state = SIGN;</div><div class=\"line\"></div><div class=\"line\">        if (!skipDebug &amp;&amp; pdebug != null) &#123;</div><div class=\"line\">            pdebug.println(&quot;Signature.&quot; + algorithm +</div><div class=\"line\">                &quot; signing algorithm from: &quot; + this.provider.getName());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t//这里有一个加密适配器，将来会废除</div><div class=\"line\">    @SuppressWarnings(&quot;deprecation&quot;)</div><div class=\"line\">    private static class CipherAdapter extends SignatureSpi &#123;</div><div class=\"line\"></div><div class=\"line\">        private final Cipher cipher;</div><div class=\"line\"></div><div class=\"line\">        private ByteArrayOutputStream data;</div><div class=\"line\">\t｝\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参考：<br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5700906.html\">http://www.cnblogs.com/jingmoxukong/p/5700906.html</a><br><a href=\"http://www.cnblogs.com/jingmoxukong/p/5688306.html\">http://www.cnblogs.com/jingmoxukong/p/5688306.html</a></p>\n</blockquote>"},{"title":"CPU虚高故障分析","_content":"\n# 1 故障现象\n\n这天上午，有同事反映公司后台管理系统运行缓慢，运维同事检查发现cpu占用过高，重启服务器后故障消失。\n这天下午，有同事也反映后台系统的某模块系统，运行缓慢，多次重启后故障仍然存在，使用top命令查看服务器的情况，发现cpu占用率接近100%。\n\n# 2 cpu问题定位\n\n## 定位问题进程\n  使用了top指令查看资源占用情况，发现PID为11705的进程消耗了大量的CPU资源，达到了780.4\n\n## 定位问题线程\n   使用 ps -mp 11705 -o THREAD,tid,time  指令把该11705进程的thread,tid,time给列出来，\n   发现11707-11715 这段中的线程占用了大量的cpu时间，各个线程占用了12分钟的时间。\n   \n## 查看问题线程堆栈   \n  挑选 11707 这个线程，查看该线程堆栈情况。\n  步骤：1\n  先将线程id转成16进制，\n  jstack pid|grep 11707 -A 30\n  \n  步骤：2\n  使用jstack 打印线程堆栈信息\n  在打印信息中，发现该线程是JVM GC线程。那么现在基本可以确定是内存不足，或内存泄漏导致gc线程持续gc 运行，cpu占用过高。（这种情况类是Effect java 第一章提到的）。\n\n# 3 内存定位\n\n  ## 定位内存区域\n  使用jstat -gcutil  查看该进程的内存情况\n    \n  此时可以看到：\n  E 100.00：伊甸区内存已满；\n  O 99.98：老年代内存已满；\n  FGC 117：该进程发生了117次全量GC；\n  GCT 908.51：该进程GC时间908秒。\n\n\t根据以上信息，基本可确定是程序代码存在问题。\n   \n  ## 分析内存对象\n   \n   使用jmap -histo 指令查看进程的内存对象情况：\n   ```\n    jmap -histo 14062 >> jmap.out\n   ```   \n   拉日志出来看看,此时可以看到，HashMap$Entry的实例数达到5000W，Integer、Double的实例数达到5000w、2000多W，三者占用了大量的内存。\n   \n  ## 分析堆栈\n   使用jstat指令查看进程的堆栈情况：\n  ```\n    jstack 12804 >> jstat.out\n  ```  \n  查找相关的代码：\n  发现：\n  发现ActivityUtil.java的477行正在使用HashMap的put方法。\n  \n# 4 代码定位  \n  打开ActivityUtil.java类，定位到477行，代码如下：\n  发现 Map 的对象巨大，占用了Map对象，使得cpu过高，应该是秒杀活动的礼品对象数据过高。\n  \n# 5 改进\n  修改代码，对礼品进行分页获取。\n\n# 6 总结-如何查找最高的java线程\n\t1，使用命令top -p <pid> ，显示你的java进程的内存情况，pid是你的java进程号，比如123\n\t2，按H，获取每个线程的内存情况\n\t3，找到内存和cpu占用最高的线程pid，比如15248\n\t4，执行 printf 0x%x 15248 得到 0x3b90 ,此为线程id的十六进制\n\t5，执行 jstack 123|grep -A 10 3b90，得到线程堆栈信息中3b90这个线程所在行的后面10行\n\t6，查看对应的堆栈信息找出可能存在问题的代码\n  \n  ","source":"_posts/other/02.md","raw":"---\ntitle: CPU虚高故障分析\ncategories:\n- 日常技术\ntags:\n- 心情\n- 随笔\n- 琐事\n---\n\n# 1 故障现象\n\n这天上午，有同事反映公司后台管理系统运行缓慢，运维同事检查发现cpu占用过高，重启服务器后故障消失。\n这天下午，有同事也反映后台系统的某模块系统，运行缓慢，多次重启后故障仍然存在，使用top命令查看服务器的情况，发现cpu占用率接近100%。\n\n# 2 cpu问题定位\n\n## 定位问题进程\n  使用了top指令查看资源占用情况，发现PID为11705的进程消耗了大量的CPU资源，达到了780.4\n\n## 定位问题线程\n   使用 ps -mp 11705 -o THREAD,tid,time  指令把该11705进程的thread,tid,time给列出来，\n   发现11707-11715 这段中的线程占用了大量的cpu时间，各个线程占用了12分钟的时间。\n   \n## 查看问题线程堆栈   \n  挑选 11707 这个线程，查看该线程堆栈情况。\n  步骤：1\n  先将线程id转成16进制，\n  jstack pid|grep 11707 -A 30\n  \n  步骤：2\n  使用jstack 打印线程堆栈信息\n  在打印信息中，发现该线程是JVM GC线程。那么现在基本可以确定是内存不足，或内存泄漏导致gc线程持续gc 运行，cpu占用过高。（这种情况类是Effect java 第一章提到的）。\n\n# 3 内存定位\n\n  ## 定位内存区域\n  使用jstat -gcutil  查看该进程的内存情况\n    \n  此时可以看到：\n  E 100.00：伊甸区内存已满；\n  O 99.98：老年代内存已满；\n  FGC 117：该进程发生了117次全量GC；\n  GCT 908.51：该进程GC时间908秒。\n\n\t根据以上信息，基本可确定是程序代码存在问题。\n   \n  ## 分析内存对象\n   \n   使用jmap -histo 指令查看进程的内存对象情况：\n   ```\n    jmap -histo 14062 >> jmap.out\n   ```   \n   拉日志出来看看,此时可以看到，HashMap$Entry的实例数达到5000W，Integer、Double的实例数达到5000w、2000多W，三者占用了大量的内存。\n   \n  ## 分析堆栈\n   使用jstat指令查看进程的堆栈情况：\n  ```\n    jstack 12804 >> jstat.out\n  ```  \n  查找相关的代码：\n  发现：\n  发现ActivityUtil.java的477行正在使用HashMap的put方法。\n  \n# 4 代码定位  \n  打开ActivityUtil.java类，定位到477行，代码如下：\n  发现 Map 的对象巨大，占用了Map对象，使得cpu过高，应该是秒杀活动的礼品对象数据过高。\n  \n# 5 改进\n  修改代码，对礼品进行分页获取。\n\n# 6 总结-如何查找最高的java线程\n\t1，使用命令top -p <pid> ，显示你的java进程的内存情况，pid是你的java进程号，比如123\n\t2，按H，获取每个线程的内存情况\n\t3，找到内存和cpu占用最高的线程pid，比如15248\n\t4，执行 printf 0x%x 15248 得到 0x3b90 ,此为线程id的十六进制\n\t5，执行 jstack 123|grep -A 10 3b90，得到线程堆栈信息中3b90这个线程所在行的后面10行\n\t6，查看对应的堆栈信息找出可能存在问题的代码\n  \n  ","slug":"other/02","published":1,"date":"2016-11-28T16:30:24.825Z","updated":"2016-11-28T17:12:49.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp82n002qc88qnc7w5yu6","content":"<h1 id=\"1-故障现象\"><a href=\"#1-故障现象\" class=\"headerlink\" title=\"1 故障现象\"></a>1 故障现象</h1><p>这天上午，有同事反映公司后台管理系统运行缓慢，运维同事检查发现cpu占用过高，重启服务器后故障消失。<br>这天下午，有同事也反映后台系统的某模块系统，运行缓慢，多次重启后故障仍然存在，使用top命令查看服务器的情况，发现cpu占用率接近100%。</p>\n<h1 id=\"2-cpu问题定位\"><a href=\"#2-cpu问题定位\" class=\"headerlink\" title=\"2 cpu问题定位\"></a>2 cpu问题定位</h1><h2 id=\"定位问题进程\"><a href=\"#定位问题进程\" class=\"headerlink\" title=\"定位问题进程\"></a>定位问题进程</h2><p>  使用了top指令查看资源占用情况，发现PID为11705的进程消耗了大量的CPU资源，达到了780.4</p>\n<h2 id=\"定位问题线程\"><a href=\"#定位问题线程\" class=\"headerlink\" title=\"定位问题线程\"></a>定位问题线程</h2><p>   使用 ps -mp 11705 -o THREAD,tid,time  指令把该11705进程的thread,tid,time给列出来，<br>   发现11707-11715 这段中的线程占用了大量的cpu时间，各个线程占用了12分钟的时间。</p>\n<h2 id=\"查看问题线程堆栈\"><a href=\"#查看问题线程堆栈\" class=\"headerlink\" title=\"查看问题线程堆栈\"></a>查看问题线程堆栈</h2><p>  挑选 11707 这个线程，查看该线程堆栈情况。<br>  步骤：1<br>  先将线程id转成16进制，<br>  jstack pid|grep 11707 -A 30</p>\n<p>  步骤：2<br>  使用jstack 打印线程堆栈信息<br>  在打印信息中，发现该线程是JVM GC线程。那么现在基本可以确定是内存不足，或内存泄漏导致gc线程持续gc 运行，cpu占用过高。（这种情况类是Effect java 第一章提到的）。</p>\n<h1 id=\"3-内存定位\"><a href=\"#3-内存定位\" class=\"headerlink\" title=\"3 内存定位\"></a>3 内存定位</h1><h2 id=\"定位内存区域\"><a href=\"#定位内存区域\" class=\"headerlink\" title=\"定位内存区域\"></a>定位内存区域</h2><p>  使用jstat -gcutil  查看该进程的内存情况</p>\n<p>  此时可以看到：<br>  E 100.00：伊甸区内存已满；<br>  O 99.98：老年代内存已满；<br>  FGC 117：该进程发生了117次全量GC；<br>  GCT 908.51：该进程GC时间908秒。</p>\n<pre><code>根据以上信息，基本可确定是程序代码存在问题。\n</code></pre><h2 id=\"分析内存对象\"><a href=\"#分析内存对象\" class=\"headerlink\" title=\"分析内存对象\"></a>分析内存对象</h2><p>   使用jmap -histo 指令查看进程的内存对象情况：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  jmap -histo 14062 &gt;&gt; jmap.out</div><div class=\"line\"> ```   </div><div class=\"line\"> 拉日志出来看看,此时可以看到，HashMap$Entry的实例数达到5000W，Integer、Double的实例数达到5000w、2000多W，三者占用了大量的内存。</div><div class=\"line\"> </div><div class=\"line\">## 分析堆栈</div><div class=\"line\"> 使用jstat指令查看进程的堆栈情况：</div></pre></td></tr></table></figure></p>\n<pre><code>jstack 12804 &gt;&gt; jstat.out\n</code></pre><p>  ```<br>  查找相关的代码：<br>  发现：<br>  发现ActivityUtil.java的477行正在使用HashMap的put方法。</p>\n<h1 id=\"4-代码定位\"><a href=\"#4-代码定位\" class=\"headerlink\" title=\"4 代码定位\"></a>4 代码定位</h1><p>  打开ActivityUtil.java类，定位到477行，代码如下：<br>  发现 Map 的对象巨大，占用了Map对象，使得cpu过高，应该是秒杀活动的礼品对象数据过高。</p>\n<h1 id=\"5-改进\"><a href=\"#5-改进\" class=\"headerlink\" title=\"5 改进\"></a>5 改进</h1><p>  修改代码，对礼品进行分页获取。</p>\n<h1 id=\"6-总结-如何查找最高的java线程\"><a href=\"#6-总结-如何查找最高的java线程\" class=\"headerlink\" title=\"6 总结-如何查找最高的java线程\"></a>6 总结-如何查找最高的java线程</h1><pre><code>1，使用命令top -p &lt;pid&gt; ，显示你的java进程的内存情况，pid是你的java进程号，比如123\n2，按H，获取每个线程的内存情况\n3，找到内存和cpu占用最高的线程pid，比如15248\n4，执行 printf 0x%x 15248 得到 0x3b90 ,此为线程id的十六进制\n5，执行 jstack 123|grep -A 10 3b90，得到线程堆栈信息中3b90这个线程所在行的后面10行\n6，查看对应的堆栈信息找出可能存在问题的代码\n</code></pre>","excerpt":"","more":"<h1 id=\"1-故障现象\"><a href=\"#1-故障现象\" class=\"headerlink\" title=\"1 故障现象\"></a>1 故障现象</h1><p>这天上午，有同事反映公司后台管理系统运行缓慢，运维同事检查发现cpu占用过高，重启服务器后故障消失。<br>这天下午，有同事也反映后台系统的某模块系统，运行缓慢，多次重启后故障仍然存在，使用top命令查看服务器的情况，发现cpu占用率接近100%。</p>\n<h1 id=\"2-cpu问题定位\"><a href=\"#2-cpu问题定位\" class=\"headerlink\" title=\"2 cpu问题定位\"></a>2 cpu问题定位</h1><h2 id=\"定位问题进程\"><a href=\"#定位问题进程\" class=\"headerlink\" title=\"定位问题进程\"></a>定位问题进程</h2><p>  使用了top指令查看资源占用情况，发现PID为11705的进程消耗了大量的CPU资源，达到了780.4</p>\n<h2 id=\"定位问题线程\"><a href=\"#定位问题线程\" class=\"headerlink\" title=\"定位问题线程\"></a>定位问题线程</h2><p>   使用 ps -mp 11705 -o THREAD,tid,time  指令把该11705进程的thread,tid,time给列出来，<br>   发现11707-11715 这段中的线程占用了大量的cpu时间，各个线程占用了12分钟的时间。</p>\n<h2 id=\"查看问题线程堆栈\"><a href=\"#查看问题线程堆栈\" class=\"headerlink\" title=\"查看问题线程堆栈\"></a>查看问题线程堆栈</h2><p>  挑选 11707 这个线程，查看该线程堆栈情况。<br>  步骤：1<br>  先将线程id转成16进制，<br>  jstack pid|grep 11707 -A 30</p>\n<p>  步骤：2<br>  使用jstack 打印线程堆栈信息<br>  在打印信息中，发现该线程是JVM GC线程。那么现在基本可以确定是内存不足，或内存泄漏导致gc线程持续gc 运行，cpu占用过高。（这种情况类是Effect java 第一章提到的）。</p>\n<h1 id=\"3-内存定位\"><a href=\"#3-内存定位\" class=\"headerlink\" title=\"3 内存定位\"></a>3 内存定位</h1><h2 id=\"定位内存区域\"><a href=\"#定位内存区域\" class=\"headerlink\" title=\"定位内存区域\"></a>定位内存区域</h2><p>  使用jstat -gcutil  查看该进程的内存情况</p>\n<p>  此时可以看到：<br>  E 100.00：伊甸区内存已满；<br>  O 99.98：老年代内存已满；<br>  FGC 117：该进程发生了117次全量GC；<br>  GCT 908.51：该进程GC时间908秒。</p>\n<pre><code>根据以上信息，基本可确定是程序代码存在问题。\n</code></pre><h2 id=\"分析内存对象\"><a href=\"#分析内存对象\" class=\"headerlink\" title=\"分析内存对象\"></a>分析内存对象</h2><p>   使用jmap -histo 指令查看进程的内存对象情况：<br>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">  jmap -histo 14062 &gt;&gt; jmap.out</div><div class=\"line\"> ```   </div><div class=\"line\"> 拉日志出来看看,此时可以看到，HashMap$Entry的实例数达到5000W，Integer、Double的实例数达到5000w、2000多W，三者占用了大量的内存。</div><div class=\"line\"> </div><div class=\"line\">## 分析堆栈</div><div class=\"line\"> 使用jstat指令查看进程的堆栈情况：</div></pre></td></tr></table></figure></p>\n<pre><code>jstack 12804 &gt;&gt; jstat.out\n</code></pre><p>  ```<br>  查找相关的代码：<br>  发现：<br>  发现ActivityUtil.java的477行正在使用HashMap的put方法。</p>\n<h1 id=\"4-代码定位\"><a href=\"#4-代码定位\" class=\"headerlink\" title=\"4 代码定位\"></a>4 代码定位</h1><p>  打开ActivityUtil.java类，定位到477行，代码如下：<br>  发现 Map 的对象巨大，占用了Map对象，使得cpu过高，应该是秒杀活动的礼品对象数据过高。</p>\n<h1 id=\"5-改进\"><a href=\"#5-改进\" class=\"headerlink\" title=\"5 改进\"></a>5 改进</h1><p>  修改代码，对礼品进行分页获取。</p>\n<h1 id=\"6-总结-如何查找最高的java线程\"><a href=\"#6-总结-如何查找最高的java线程\" class=\"headerlink\" title=\"6 总结-如何查找最高的java线程\"></a>6 总结-如何查找最高的java线程</h1><pre><code>1，使用命令top -p &lt;pid&gt; ，显示你的java进程的内存情况，pid是你的java进程号，比如123\n2，按H，获取每个线程的内存情况\n3，找到内存和cpu占用最高的线程pid，比如15248\n4，执行 printf 0x%x 15248 得到 0x3b90 ,此为线程id的十六进制\n5，执行 jstack 123|grep -A 10 3b90，得到线程堆栈信息中3b90这个线程所在行的后面10行\n6，查看对应的堆栈信息找出可能存在问题的代码\n</code></pre>"},{"title":"学习spring boot系列之 导读","_content":">导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0\n\n# 确立学习目的\n\n本系列是学习spring boot系列之学习 spring-boot 的目的是为了更好的学习spring-cloud 的技术架构，如下：\n\n![spring cloud](/img/2016/12/spring-cloud.png )\n\n","source":"_posts/guid/spring-boot/00.md","raw":"---\ntitle: 学习spring boot系列之 导读\ncategories:\n- 学习系列\ntags:\n- spring\n- spring-boot\n---\n>导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0\n\n# 确立学习目的\n\n本系列是学习spring boot系列之学习 spring-boot 的目的是为了更好的学习spring-cloud 的技术架构，如下：\n\n![spring cloud](/img/2016/12/spring-cloud.png )\n\n","slug":"guid/spring-boot/00","published":1,"date":"2016-12-03T12:56:09.294Z","updated":"2016-12-03T13:28:39.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp82s002zc88q5q52jw4b","content":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0</p>\n</blockquote>\n<h1 id=\"确立学习目的\"><a href=\"#确立学习目的\" class=\"headerlink\" title=\"确立学习目的\"></a>确立学习目的</h1><p>本系列是学习spring boot系列之学习 spring-boot 的目的是为了更好的学习spring-cloud 的技术架构，如下：</p>\n<p><img src=\"/img/2016/12/spring-cloud.png\" alt=\"spring cloud\"></p>\n","excerpt":"","more":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0</p>\n</blockquote>\n<h1 id=\"确立学习目的\"><a href=\"#确立学习目的\" class=\"headerlink\" title=\"确立学习目的\"></a>确立学习目的</h1><p>本系列是学习spring boot系列之学习 spring-boot 的目的是为了更好的学习spring-cloud 的技术架构，如下：</p>\n<p><img src=\"/img/2016/12/spring-cloud.png\" alt=\"spring cloud\"></p>\n"},{"title":"学习spring boot系列之3 配置swagger API 管理文档","_content":">导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0 swagger API\n\nswagger api 需要依赖如下的包：\n```\n\t<dependency>\n\t\t<groupId>io.springfox</groupId>\n\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t<version>2.2.2</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>io.springfox</groupId>\n\t\t<artifactId>springfox-swagger-ui</artifactId>\n\t\t<version>2.2.2</version>\n\t</dependency>\n```\n\n访问：http://localhost:8080/swagger-ui.html\n\n\n","source":"_posts/guid/spring-boot/03.md","raw":"---\ntitle: 学习spring boot系列之3 配置swagger API 管理文档\ncategories:\n- 学习系列\ntags:\n- spring\n- spring-boot\n---\n>导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0 swagger API\n\nswagger api 需要依赖如下的包：\n```\n\t<dependency>\n\t\t<groupId>io.springfox</groupId>\n\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t<version>2.2.2</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>io.springfox</groupId>\n\t\t<artifactId>springfox-swagger-ui</artifactId>\n\t\t<version>2.2.2</version>\n\t</dependency>\n```\n\n访问：http://localhost:8080/swagger-ui.html\n\n\n","slug":"guid/spring-boot/03","published":1,"date":"2016-12-03T08:57:25.234Z","updated":"2016-12-03T13:48:35.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp82x0036c88q0nzbm0zg","content":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0 swagger API</p>\n</blockquote>\n<p>swagger api 需要依赖如下的包：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>访问：<a href=\"http://localhost:8080/swagger-ui.html\" target=\"_blank\" rel=\"external\">http://localhost:8080/swagger-ui.html</a></p>\n","excerpt":"","more":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0 swagger API</p>\n</blockquote>\n<p>swagger api 需要依赖如下的包：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class=\"line\">\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>访问：<a href=\"http://localhost:8080/swagger-ui.html\">http://localhost:8080/swagger-ui.html</a></p>\n"},{"title":"学习spring boot系列之 hello world","_content":">导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0\n\n\n# 快速入门\n要学习 spring-boot 的第一手资料当然是在官网啦！\n\n```\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@SpringBootApplication\npublic class Example {\n\t@RequestMapping(\"/\")\n\tString home() {\n\t\treturn \"Hello World!\";\n\t}\n\tpublic static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(Example.class, args);\n\t}\n}\n``` \n# Maven 配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.didispace</groupId>\n\t<artifactId>Chapter1</artifactId>\n\t<version>1.0.0</version>\n\t<packaging>jar</packaging>\n\t<name>Chapter1</name>\n\t<description>The first Spring Boot project</description>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>1.3.2.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t</dependencies>\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n```\n\n\n具体详细代码，请参考spring-boot-hello1 \n执行命令： java -jar spring-boot-hello1-1.0-SNAPSHOT.jar\n然后，在浏览器输入 http://localhost:9090/hello 就可以看到有 json 格式的数据返回。\njava -jar spring-boot01-1.0-SNAPSHOT.jar > log.file 2>&1 &\n\n如果这个时候，我想关掉后台运行的 Spring Boot 的服务，我要这样做：\nps aux | grep spring | xargs kill -9\n\n\n# 非继承方式实现 spring-boot(boottool)\n参考代码例子 spring-hello2\npom 仅仅需要：添加Maven配置\n```\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>1.4.0.RELEASE</version>\n        </dependency>\n        <!-- Import dependency management from SpringBoot -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>1.4.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n```\n\n\n\n","source":"_posts/guid/spring-boot/01.md","raw":"---\ntitle: 学习spring boot系列之 hello world\ncategories:\n- 学习系列\ntags:\n- spring\n- spring-boot\n---\n>导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0\n\n\n# 快速入门\n要学习 spring-boot 的第一手资料当然是在官网啦！\n\n```\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@SpringBootApplication\npublic class Example {\n\t@RequestMapping(\"/\")\n\tString home() {\n\t\treturn \"Hello World!\";\n\t}\n\tpublic static void main(String[] args) throws Exception {\n\t\tSpringApplication.run(Example.class, args);\n\t}\n}\n``` \n# Maven 配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.didispace</groupId>\n\t<artifactId>Chapter1</artifactId>\n\t<version>1.0.0</version>\n\t<packaging>jar</packaging>\n\t<name>Chapter1</name>\n\t<description>The first Spring Boot project</description>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>1.3.2.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t</dependencies>\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n```\n\n\n具体详细代码，请参考spring-boot-hello1 \n执行命令： java -jar spring-boot-hello1-1.0-SNAPSHOT.jar\n然后，在浏览器输入 http://localhost:9090/hello 就可以看到有 json 格式的数据返回。\njava -jar spring-boot01-1.0-SNAPSHOT.jar > log.file 2>&1 &\n\n如果这个时候，我想关掉后台运行的 Spring Boot 的服务，我要这样做：\nps aux | grep spring | xargs kill -9\n\n\n# 非继承方式实现 spring-boot(boottool)\n参考代码例子 spring-hello2\npom 仅仅需要：添加Maven配置\n```\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>1.4.0.RELEASE</version>\n        </dependency>\n        <!-- Import dependency management from SpringBoot -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>1.4.0.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n```\n\n\n\n","slug":"guid/spring-boot/01","published":1,"date":"2016-11-30T14:46:29.117Z","updated":"2016-12-03T08:49:16.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp82y0037c88qp8el8hax","content":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0</p>\n</blockquote>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><p>要学习 spring-boot 的第一手资料当然是在官网啦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">@RestController</div><div class=\"line\">@SpringBootApplication</div><div class=\"line\">public class Example &#123;</div><div class=\"line\">\t@RequestMapping(&quot;/&quot;)</div><div class=\"line\">\tString home() &#123;</div><div class=\"line\">\t\treturn &quot;Hello World!&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tSpringApplication.run(Example.class, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"># Maven 配置</div></pre></td></tr></table></figure>\n<p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p>\n<p><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemalocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"><br>    <modelversion>4.0.0</modelversion><br>    <groupid>com.didispace</groupid><br>    <artifactid>Chapter1</artifactid><br>    <version>1.0.0</version><br>    <packaging>jar</packaging><br>    <name>Chapter1</name><br>    <description>The first Spring Boot project</description><br>    <parent><br>        <groupid>org.springframework.boot</groupid><br>        <artifactid>spring-boot-starter-parent</artifactid><br>        <version>1.3.2.RELEASE</version><br>        <relativepath> <!-- lookup parent from repository --><br>    </relativepath></parent><br>    <properties><br>        <project.build.sourceencoding>UTF-8</project.build.sourceencoding><br>        <java.version>1.8</java.version><br>    </properties><br>    <dependencies><br>        <dependency><br>            <groupid>org.springframework.boot</groupid><br>            <artifactid>spring-boot-starter</artifactid><br>        </dependency><br>        <dependency><br>            <groupid>org.springframework.boot</groupid><br>            <artifactid>spring-boot-starter-test</artifactid><br>            <scope>test</scope><br>        </dependency><br>        <dependency><br>            <groupid>org.springframework.boot</groupid><br>            <artifactid>spring-boot-starter-web</artifactid><br>        </dependency><br>    </dependencies><br>    <build><br>        <plugins><br>            <plugin><br>                <groupid>org.springframework.boot</groupid><br>                <artifactid>spring-boot-maven-plugin</artifactid><br>            </plugin><br>        </plugins><br>    </build><br></project><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">具体详细代码，请参考spring-boot-hello1 </div><div class=\"line\">执行命令： java -jar spring-boot-hello1-1.0-SNAPSHOT.jar</div><div class=\"line\">然后，在浏览器输入 http://localhost:9090/hello 就可以看到有 json 格式的数据返回。</div><div class=\"line\">java -jar spring-boot01-1.0-SNAPSHOT.jar &gt; log.file 2&gt;&amp;1 &amp;</div><div class=\"line\"></div><div class=\"line\">如果这个时候，我想关掉后台运行的 Spring Boot 的服务，我要这样做：</div><div class=\"line\">ps aux | grep spring | xargs kill -9</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 非继承方式实现 spring-boot(boottool)</div><div class=\"line\">参考代码例子 spring-hello2</div><div class=\"line\">pom 仅仅需要：添加Maven配置</div></pre></td></tr></table></figure></p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Import dependency management from SpringBoot --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;\n        &lt;type&gt;pom&lt;/type&gt;\n        &lt;scope&gt;import&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre><p>```</p>\n","excerpt":"","more":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0</p>\n</blockquote>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><p>要学习 spring-boot 的第一手资料当然是在官网啦！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">@RestController</div><div class=\"line\">@SpringBootApplication</div><div class=\"line\">public class Example &#123;</div><div class=\"line\">\t@RequestMapping(&quot;/&quot;)</div><div class=\"line\">\tString home() &#123;</div><div class=\"line\">\t\treturn &quot;Hello World!&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tSpringApplication.run(Example.class, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"># Maven 配置</div></pre></td></tr></table></figure>\n<p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p>\n<p><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"><br>    <modelVersion>4.0.0</modelVersion><br>    <groupId>com.didispace</groupId><br>    <artifactId>Chapter1</artifactId><br>    <version>1.0.0</version><br>    <packaging>jar</packaging><br>    <name>Chapter1</name><br>    <description>The first Spring Boot project</description><br>    <parent><br>        <groupId>org.springframework.boot</groupId><br>        <artifactId>spring-boot-starter-parent</artifactId><br>        <version>1.3.2.RELEASE</version><br>        <relativePath/> <!-- lookup parent from repository --><br>    </parent><br>    <properties><br>        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><br>        <java.version>1.8</java.version><br>    </properties><br>    <dependencies><br>        <dependency><br>            <groupId>org.springframework.boot</groupId><br>            <artifactId>spring-boot-starter</artifactId><br>        </dependency><br>        <dependency><br>            <groupId>org.springframework.boot</groupId><br>            <artifactId>spring-boot-starter-test</artifactId><br>            <scope>test</scope><br>        </dependency><br>        <dependency><br>            <groupId>org.springframework.boot</groupId><br>            <artifactId>spring-boot-starter-web</artifactId><br>        </dependency><br>    </dependencies><br>    <build><br>        <plugins><br>            <plugin><br>                <groupId>org.springframework.boot</groupId><br>                <artifactId>spring-boot-maven-plugin</artifactId><br>            </plugin><br>        </plugins><br>    </build><br></project><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">具体详细代码，请参考spring-boot-hello1 </div><div class=\"line\">执行命令： java -jar spring-boot-hello1-1.0-SNAPSHOT.jar</div><div class=\"line\">然后，在浏览器输入 http://localhost:9090/hello 就可以看到有 json 格式的数据返回。</div><div class=\"line\">java -jar spring-boot01-1.0-SNAPSHOT.jar &gt; log.file 2&gt;&amp;1 &amp;</div><div class=\"line\"></div><div class=\"line\">如果这个时候，我想关掉后台运行的 Spring Boot 的服务，我要这样做：</div><div class=\"line\">ps aux | grep spring | xargs kill -9</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 非继承方式实现 spring-boot(boottool)</div><div class=\"line\">参考代码例子 spring-hello2</div><div class=\"line\">pom 仅仅需要：添加Maven配置</div></pre></td></tr></table></figure></p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Import dependency management from SpringBoot --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n        &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;\n        &lt;type&gt;pom&lt;/type&gt;\n        &lt;scope&gt;import&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre><p>```</p>\n"},{"title":"移动端之路-阿里Weex框架快速体验与环境搭建","_content":">导读:\n作者：灯塔\nWeex 是阿里研发的移动端框架，整体参考了vue, 尤大大作为顾问。\n\n#Weex简介\n\n\n# Weex框架环境搭建\nWeex是阿里开源的一款完美兼顾性能与动态的移动端解决方案，让移动端开发者可以通过简洁的前端语法写出Native级别的性能体验，并支持IOS,安卓、YunOS以及Web H5等多端的部署。\n对移动端开发者来说，Weex主要解决了频繁发版和多端研发的两大痛点，同时解决了前端语言性能差和显示效果受限制的问题。\n开发者可以通过Weex官网进行内测。http://alibaba.github.io/weex/\n开发者只需要在自己的App中嵌入Weex的SDK,就可以通过撰写HTML/CSS/JavaScript来开发Native级别的Weex界面。Weex界面的生成码其实就是一段很小的JS,可以像发布网页一样轻松部署在服务端，然后在App中请求执行。\n\n# 环境搭建\n因为Weex使用了Node.js 的工具链，我们需要先安装node.js \n下载地址：官网 http://www.nodejs.org/download/\n \n\n\n\n","source":"_posts/guid/mobile/01.md","raw":"---\ntitle: 移动端之路-阿里Weex框架快速体验与环境搭建\ncategories:\n- 学习系列\ntags:\n- 移动端\n- weex\n---\n>导读:\n作者：灯塔\nWeex 是阿里研发的移动端框架，整体参考了vue, 尤大大作为顾问。\n\n#Weex简介\n\n\n# Weex框架环境搭建\nWeex是阿里开源的一款完美兼顾性能与动态的移动端解决方案，让移动端开发者可以通过简洁的前端语法写出Native级别的性能体验，并支持IOS,安卓、YunOS以及Web H5等多端的部署。\n对移动端开发者来说，Weex主要解决了频繁发版和多端研发的两大痛点，同时解决了前端语言性能差和显示效果受限制的问题。\n开发者可以通过Weex官网进行内测。http://alibaba.github.io/weex/\n开发者只需要在自己的App中嵌入Weex的SDK,就可以通过撰写HTML/CSS/JavaScript来开发Native级别的Weex界面。Weex界面的生成码其实就是一段很小的JS,可以像发布网页一样轻松部署在服务端，然后在App中请求执行。\n\n# 环境搭建\n因为Weex使用了Node.js 的工具链，我们需要先安装node.js \n下载地址：官网 http://www.nodejs.org/download/\n \n\n\n\n","slug":"guid/mobile/01","published":1,"date":"2016-12-09T16:21:27.698Z","updated":"2016-12-25T11:33:46.483Z","_id":"cix4kp8310039c88qf3f1t34m","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>导读:<br>作者：灯塔<br>Weex 是阿里研发的移动端框架，整体参考了vue, 尤大大作为顾问。</p>\n</blockquote>\n<p>#Weex简介</p>\n<h1 id=\"Weex框架环境搭建\"><a href=\"#Weex框架环境搭建\" class=\"headerlink\" title=\"Weex框架环境搭建\"></a>Weex框架环境搭建</h1><p>Weex是阿里开源的一款完美兼顾性能与动态的移动端解决方案，让移动端开发者可以通过简洁的前端语法写出Native级别的性能体验，并支持IOS,安卓、YunOS以及Web H5等多端的部署。<br>对移动端开发者来说，Weex主要解决了频繁发版和多端研发的两大痛点，同时解决了前端语言性能差和显示效果受限制的问题。<br>开发者可以通过Weex官网进行内测。<a href=\"http://alibaba.github.io/weex/\" target=\"_blank\" rel=\"external\">http://alibaba.github.io/weex/</a><br>开发者只需要在自己的App中嵌入Weex的SDK,就可以通过撰写HTML/CSS/JavaScript来开发Native级别的Weex界面。Weex界面的生成码其实就是一段很小的JS,可以像发布网页一样轻松部署在服务端，然后在App中请求执行。</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>因为Weex使用了Node.js 的工具链，我们需要先安装node.js<br>下载地址：官网 <a href=\"http://www.nodejs.org/download/\" target=\"_blank\" rel=\"external\">http://www.nodejs.org/download/</a></p>\n","excerpt":"","more":"<blockquote>\n<p>导读:<br>作者：灯塔<br>Weex 是阿里研发的移动端框架，整体参考了vue, 尤大大作为顾问。</p>\n</blockquote>\n<p>#Weex简介</p>\n<h1 id=\"Weex框架环境搭建\"><a href=\"#Weex框架环境搭建\" class=\"headerlink\" title=\"Weex框架环境搭建\"></a>Weex框架环境搭建</h1><p>Weex是阿里开源的一款完美兼顾性能与动态的移动端解决方案，让移动端开发者可以通过简洁的前端语法写出Native级别的性能体验，并支持IOS,安卓、YunOS以及Web H5等多端的部署。<br>对移动端开发者来说，Weex主要解决了频繁发版和多端研发的两大痛点，同时解决了前端语言性能差和显示效果受限制的问题。<br>开发者可以通过Weex官网进行内测。<a href=\"http://alibaba.github.io/weex/\">http://alibaba.github.io/weex/</a><br>开发者只需要在自己的App中嵌入Weex的SDK,就可以通过撰写HTML/CSS/JavaScript来开发Native级别的Weex界面。Weex界面的生成码其实就是一段很小的JS,可以像发布网页一样轻松部署在服务端，然后在App中请求执行。</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>因为Weex使用了Node.js 的工具链，我们需要先安装node.js<br>下载地址：官网 <a href=\"http://www.nodejs.org/download/\">http://www.nodejs.org/download/</a></p>\n"},{"title":"学习spring boot系列之2 配置文件详解：自定义属性、随机数、多环境配置等","_content":">导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0\n\n在使用spring-boot 作为 单独的应用服务的时候，我们的应用需要在不同的环境中运行，其中我们一般的环境划分包括为：\n- dev : 开发环境 \n- prod ：生产环境\n- test ：测试环境 \n\n```\n##======================================\n## 说明： 多环境配置文件\n##\n##\n##======================================\njbeacon.top.blog.name=zrx\njbeacon.top.blog.title=Spring Boot guide\njbeacon.top.desc=${jbeacon.top.blog.name}are writing《${jbeacon.top.blog.title}》\n# 随机字符串\njbeacon.top.blog.value=${random.value}\n# 随机int\njbeacon.top.blog.number=${random.int}\n# 随机long\njbeacon.top.blog.bignumber=${random.long}\n# 10以内的随机数\njbeacon.top.blog.test1=${random.int(10)}\n# 10-20的随机数\njbeacon.top.blog.test2=${random.int[10,20]}\n# 多环境配置文件激活属性\nspring.profiles.active=dev\n```\n\n我们也可以通过一下的配置来获取属性文件的配置文件：\n```\n@Value(\"${jbeacon.top.blog.name}\")\nprivate String name;\n@Value(\"${jbeacon.top.blog.title}\")\nprivate String title;\n@Value(\"${jbeacon.top.desc}\")\nprivate String desc;\n```\n\n通过Junit4测试获取该属性：\n```\n   Assert.assertEquals(\"zrx\", blogProperties.getName());\n```\n\n# 基于Rest ful 风格的 spring-boot\n通过使用\n@RestController\n@RequestMapping(value=\"/users\")     // 通过这里配置使下面的映射都在/users下，可去除\n替代原来的 @Controller +@RequestMapping(value=\"/users\") + @RequestBody 的Rest ful玩法。\n\n\n\n","source":"_posts/guid/spring-boot/02.md","raw":"---\ntitle: 学习spring boot系列之2 配置文件详解：自定义属性、随机数、多环境配置等\ncategories:\n- 学习系列\ntags:\n- spring\n- spring-boot\n---\n>导读：\n跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0\n\n在使用spring-boot 作为 单独的应用服务的时候，我们的应用需要在不同的环境中运行，其中我们一般的环境划分包括为：\n- dev : 开发环境 \n- prod ：生产环境\n- test ：测试环境 \n\n```\n##======================================\n## 说明： 多环境配置文件\n##\n##\n##======================================\njbeacon.top.blog.name=zrx\njbeacon.top.blog.title=Spring Boot guide\njbeacon.top.desc=${jbeacon.top.blog.name}are writing《${jbeacon.top.blog.title}》\n# 随机字符串\njbeacon.top.blog.value=${random.value}\n# 随机int\njbeacon.top.blog.number=${random.int}\n# 随机long\njbeacon.top.blog.bignumber=${random.long}\n# 10以内的随机数\njbeacon.top.blog.test1=${random.int(10)}\n# 10-20的随机数\njbeacon.top.blog.test2=${random.int[10,20]}\n# 多环境配置文件激活属性\nspring.profiles.active=dev\n```\n\n我们也可以通过一下的配置来获取属性文件的配置文件：\n```\n@Value(\"${jbeacon.top.blog.name}\")\nprivate String name;\n@Value(\"${jbeacon.top.blog.title}\")\nprivate String title;\n@Value(\"${jbeacon.top.desc}\")\nprivate String desc;\n```\n\n通过Junit4测试获取该属性：\n```\n   Assert.assertEquals(\"zrx\", blogProperties.getName());\n```\n\n# 基于Rest ful 风格的 spring-boot\n通过使用\n@RestController\n@RequestMapping(value=\"/users\")     // 通过这里配置使下面的映射都在/users下，可去除\n替代原来的 @Controller +@RequestMapping(value=\"/users\") + @RequestBody 的Rest ful玩法。\n\n\n\n","slug":"guid/spring-boot/02","published":1,"date":"2016-12-03T07:06:07.166Z","updated":"2016-12-03T10:17:15.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix4kp839003lc88qhuc9n1d0","content":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0</p>\n</blockquote>\n<p>在使用spring-boot 作为 单独的应用服务的时候，我们的应用需要在不同的环境中运行，其中我们一般的环境划分包括为：</p>\n<ul>\n<li>dev : 开发环境 </li>\n<li>prod ：生产环境</li>\n<li>test ：测试环境 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">##======================================</div><div class=\"line\">## 说明： 多环境配置文件</div><div class=\"line\">##</div><div class=\"line\">##</div><div class=\"line\">##======================================</div><div class=\"line\">jbeacon.top.blog.name=zrx</div><div class=\"line\">jbeacon.top.blog.title=Spring Boot guide</div><div class=\"line\">jbeacon.top.desc=$&#123;jbeacon.top.blog.name&#125;are writing《$&#123;jbeacon.top.blog.title&#125;》</div><div class=\"line\"># 随机字符串</div><div class=\"line\">jbeacon.top.blog.value=$&#123;random.value&#125;</div><div class=\"line\"># 随机int</div><div class=\"line\">jbeacon.top.blog.number=$&#123;random.int&#125;</div><div class=\"line\"># 随机long</div><div class=\"line\">jbeacon.top.blog.bignumber=$&#123;random.long&#125;</div><div class=\"line\"># 10以内的随机数</div><div class=\"line\">jbeacon.top.blog.test1=$&#123;random.int(10)&#125;</div><div class=\"line\"># 10-20的随机数</div><div class=\"line\">jbeacon.top.blog.test2=$&#123;random.int[10,20]&#125;</div><div class=\"line\"># 多环境配置文件激活属性</div><div class=\"line\">spring.profiles.active=dev</div></pre></td></tr></table></figure>\n<p>我们也可以通过一下的配置来获取属性文件的配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Value(&quot;$&#123;jbeacon.top.blog.name&#125;&quot;)</div><div class=\"line\">private String name;</div><div class=\"line\">@Value(&quot;$&#123;jbeacon.top.blog.title&#125;&quot;)</div><div class=\"line\">private String title;</div><div class=\"line\">@Value(&quot;$&#123;jbeacon.top.desc&#125;&quot;)</div><div class=\"line\">private String desc;</div></pre></td></tr></table></figure></p>\n<p>通过Junit4测试获取该属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Assert.assertEquals(&quot;zrx&quot;, blogProperties.getName());</div></pre></td></tr></table></figure></p>\n<h1 id=\"基于Rest-ful-风格的-spring-boot\"><a href=\"#基于Rest-ful-风格的-spring-boot\" class=\"headerlink\" title=\"基于Rest ful 风格的 spring-boot\"></a>基于Rest ful 风格的 spring-boot</h1><p>通过使用<br>@RestController<br>@RequestMapping(value=”/users”)     // 通过这里配置使下面的映射都在/users下，可去除<br>替代原来的 @Controller +@RequestMapping(value=”/users”) + @RequestBody 的Rest ful玩法。</p>\n","excerpt":"","more":"<blockquote>\n<p>导读：<br>跟我学习Spring boot 教程系列,jdk1.8,  spring-boot:1.4.0</p>\n</blockquote>\n<p>在使用spring-boot 作为 单独的应用服务的时候，我们的应用需要在不同的环境中运行，其中我们一般的环境划分包括为：</p>\n<ul>\n<li>dev : 开发环境 </li>\n<li>prod ：生产环境</li>\n<li>test ：测试环境 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">##======================================</div><div class=\"line\">## 说明： 多环境配置文件</div><div class=\"line\">##</div><div class=\"line\">##</div><div class=\"line\">##======================================</div><div class=\"line\">jbeacon.top.blog.name=zrx</div><div class=\"line\">jbeacon.top.blog.title=Spring Boot guide</div><div class=\"line\">jbeacon.top.desc=$&#123;jbeacon.top.blog.name&#125;are writing《$&#123;jbeacon.top.blog.title&#125;》</div><div class=\"line\"># 随机字符串</div><div class=\"line\">jbeacon.top.blog.value=$&#123;random.value&#125;</div><div class=\"line\"># 随机int</div><div class=\"line\">jbeacon.top.blog.number=$&#123;random.int&#125;</div><div class=\"line\"># 随机long</div><div class=\"line\">jbeacon.top.blog.bignumber=$&#123;random.long&#125;</div><div class=\"line\"># 10以内的随机数</div><div class=\"line\">jbeacon.top.blog.test1=$&#123;random.int(10)&#125;</div><div class=\"line\"># 10-20的随机数</div><div class=\"line\">jbeacon.top.blog.test2=$&#123;random.int[10,20]&#125;</div><div class=\"line\"># 多环境配置文件激活属性</div><div class=\"line\">spring.profiles.active=dev</div></pre></td></tr></table></figure>\n<p>我们也可以通过一下的配置来获取属性文件的配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Value(&quot;$&#123;jbeacon.top.blog.name&#125;&quot;)</div><div class=\"line\">private String name;</div><div class=\"line\">@Value(&quot;$&#123;jbeacon.top.blog.title&#125;&quot;)</div><div class=\"line\">private String title;</div><div class=\"line\">@Value(&quot;$&#123;jbeacon.top.desc&#125;&quot;)</div><div class=\"line\">private String desc;</div></pre></td></tr></table></figure></p>\n<p>通过Junit4测试获取该属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Assert.assertEquals(&quot;zrx&quot;, blogProperties.getName());</div></pre></td></tr></table></figure></p>\n<h1 id=\"基于Rest-ful-风格的-spring-boot\"><a href=\"#基于Rest-ful-风格的-spring-boot\" class=\"headerlink\" title=\"基于Rest ful 风格的 spring-boot\"></a>基于Rest ful 风格的 spring-boot</h1><p>通过使用<br>@RestController<br>@RequestMapping(value=”/users”)     // 通过这里配置使下面的映射都在/users下，可去除<br>替代原来的 @Controller +@RequestMapping(value=”/users”) + @RequestBody 的Rest ful玩法。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cix4kp80c0009c88qu8pipyfv","category_id":"cix4kp80r000ic88qbx51c2ol","_id":"cix4kp80v000qc88q09iqs0eh"},{"post_id":"cix4kp7zf0004c88qwou9powk","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp80y000uc88qm6ifm9qi"},{"post_id":"cix4kp7zf0004c88qwou9powk","category_id":"cix4kp80t000nc88qu6v0nbzb","_id":"cix4kp810000xc88qfygms9ts"},{"post_id":"cix4kp80e000ac88q76cat0mi","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp810000yc88qa8mee8s1"},{"post_id":"cix4kp80e000ac88q76cat0mi","category_id":"cix4kp80t000nc88qu6v0nbzb","_id":"cix4kp8110011c88q1cen9ovj"},{"post_id":"cix4kp7zw0005c88qqm246yu2","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp8130017c88qfr7kmcer"},{"post_id":"cix4kp7zw0005c88qqm246yu2","category_id":"cix4kp80t000nc88qu6v0nbzb","_id":"cix4kp816001ac88qwl2hnoi4"},{"post_id":"cix4kp80l000ec88qw32qz6cy","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp817001bc88qg4yfqvzc"},{"post_id":"cix4kp80l000ec88qw32qz6cy","category_id":"cix4kp80t000nc88qu6v0nbzb","_id":"cix4kp818001dc88qed5fcevq"},{"post_id":"cix4kp80a0008c88qo6ik3rgr","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp81b001gc88q4fhwf539"},{"post_id":"cix4kp80a0008c88qo6ik3rgr","category_id":"cix4kp8130018c88qzgx5z4sp","_id":"cix4kp81c001jc88q4g7gs3mt"},{"post_id":"cix4kp80i000dc88qusb2q73i","category_id":"cix4kp80z000vc88q3ji1eq54","_id":"cix4kp81d001lc88qjvqoxqh2"},{"post_id":"cix4kp80i000dc88qusb2q73i","category_id":"cix4kp818001cc88q1mv1awxc","_id":"cix4kp81e001oc88q6gmhdx7j"},{"post_id":"cix4kp81r001wc88qczekr9q3","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp82d0026c88qrqkix6xg"},{"post_id":"cix4kp81r001wc88qczekr9q3","category_id":"cix4kp8270020c88q76w4mbbg","_id":"cix4kp82e0028c88qgne5x7ga"},{"post_id":"cix4kp81t001xc88q8pgfbgq4","category_id":"cix4kp82b0024c88ql95qt4gf","_id":"cix4kp82f002ac88qpf7dkb83"},{"post_id":"cix4kp825001zc88q36taq3fa","category_id":"cix4kp82d0027c88qhibgvmyv","_id":"cix4kp82g002ec88q0y92knv2"},{"post_id":"cix4kp82a0023c88qa562j0ss","category_id":"cix4kp82f002bc88q1n6ww6kp","_id":"cix4kp82i002ic88q52amg2nq"},{"post_id":"cix4kp82l002pc88qpmo48uof","category_id":"cix4kp8000006c88q1oih97n3","_id":"cix4kp82q002tc88q7flz38ms"},{"post_id":"cix4kp82l002pc88qpmo48uof","category_id":"cix4kp80t000nc88qu6v0nbzb","_id":"cix4kp82q002vc88q5hq79ezy"},{"post_id":"cix4kp82n002qc88qnc7w5yu6","category_id":"cix4kp82f002bc88q1n6ww6kp","_id":"cix4kp82r002xc88qqyf0rqmq"},{"post_id":"cix4kp82s002zc88q5q52jw4b","category_id":"cix4kp82u0030c88q704tit2z","_id":"cix4kp82v0033c88qcuvtu7ot"},{"post_id":"cix4kp82x0036c88q0nzbm0zg","category_id":"cix4kp82u0030c88q704tit2z","_id":"cix4kp834003ac88qmm9qokfx"},{"post_id":"cix4kp82y0037c88qp8el8hax","category_id":"cix4kp82u0030c88q704tit2z","_id":"cix4kp836003ec88qp91mrfjc"},{"post_id":"cix4kp839003lc88qhuc9n1d0","category_id":"cix4kp82u0030c88q704tit2z","_id":"cix4kp83c003nc88q1ncngx6v"},{"post_id":"cix4kp8310039c88qf3f1t34m","category_id":"cix4kp82u0030c88q704tit2z","_id":"cix4kvqm50001b88qfkrr5w9k"}],"PostTag":[{"post_id":"cix4kp7zf0004c88qwou9powk","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp80r000hc88q51h7inza"},{"post_id":"cix4kp7zf0004c88qwou9powk","tag_id":"cix4kp80f000cc88qp7autr4e","_id":"cix4kp80s000jc88qn6akx3q2"},{"post_id":"cix4kp80l000ec88qw32qz6cy","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp80t000lc88q1clprexe"},{"post_id":"cix4kp80l000ec88qw32qz6cy","tag_id":"cix4kp80f000cc88qp7autr4e","_id":"cix4kp80t000mc88qmkxsuz1r"},{"post_id":"cix4kp7zw0005c88qqm246yu2","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp80v000pc88qtroidy2g"},{"post_id":"cix4kp7zw0005c88qqm246yu2","tag_id":"cix4kp80f000cc88qp7autr4e","_id":"cix4kp80w000rc88q64jfjihn"},{"post_id":"cix4kp80a0008c88qo6ik3rgr","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp8110012c88qwinlj6ak"},{"post_id":"cix4kp80a0008c88qo6ik3rgr","tag_id":"cix4kp80w000sc88qxbo6rg1j","_id":"cix4kp8120013c88qqbrgvm67"},{"post_id":"cix4kp80a0008c88qo6ik3rgr","tag_id":"cix4kp80z000wc88qlemq3o0r","_id":"cix4kp8130016c88qvr7bsm08"},{"post_id":"cix4kp80c0009c88qu8pipyfv","tag_id":"cix4kp8110010c88qx6hu9642","_id":"cix4kp81a001fc88qw370j1lz"},{"post_id":"cix4kp80c0009c88qu8pipyfv","tag_id":"cix4kp8120015c88qcrd1x4q9","_id":"cix4kp81b001hc88qr8finh5x"},{"post_id":"cix4kp80c0009c88qu8pipyfv","tag_id":"cix4kp8140019c88qv6tq8i0f","_id":"cix4kp81d001kc88q7w7cxq19"},{"post_id":"cix4kp80e000ac88q76cat0mi","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp81e001mc88qd6l4nk4c"},{"post_id":"cix4kp80e000ac88q76cat0mi","tag_id":"cix4kp80f000cc88qp7autr4e","_id":"cix4kp81f001pc88qx39u6oxz"},{"post_id":"cix4kp80i000dc88qusb2q73i","tag_id":"cix4kp81b001ic88q9xzry9y7","_id":"cix4kp81m001sc88qi7y41hun"},{"post_id":"cix4kp80i000dc88qusb2q73i","tag_id":"cix4kp81e001nc88q6wvq8x4u","_id":"cix4kp81m001tc88qenmt77xm"},{"post_id":"cix4kp80i000dc88qusb2q73i","tag_id":"cix4kp81i001qc88q5gswm4yk","_id":"cix4kp81n001uc88qb6st12v2"},{"post_id":"cix4kp80i000dc88qusb2q73i","tag_id":"cix4kp81k001rc88qs8e67mb4","_id":"cix4kp81n001vc88q2r5m1n8r"},{"post_id":"cix4kp81r001wc88qczekr9q3","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp824001yc88qhptwcbxn"},{"post_id":"cix4kp81r001wc88qczekr9q3","tag_id":"cix4kp80w000sc88qxbo6rg1j","_id":"cix4kp8290022c88qql12rcfi"},{"post_id":"cix4kp81t001xc88q8pgfbgq4","tag_id":"cix4kp8290021c88qkjn404pd","_id":"cix4kp82g002dc88qrfvqxmsa"},{"post_id":"cix4kp81t001xc88q8pgfbgq4","tag_id":"cix4kp82c0025c88qpyhhpnvf","_id":"cix4kp82g002fc88qcump1zif"},{"post_id":"cix4kp81t001xc88q8pgfbgq4","tag_id":"cix4kp82e0029c88qogvh2ih9","_id":"cix4kp82i002hc88qu6o1ybjv"},{"post_id":"cix4kp825001zc88q36taq3fa","tag_id":"cix4kp82f002cc88qn51vlggj","_id":"cix4kp82j002kc88qmcsj9xrc"},{"post_id":"cix4kp825001zc88q36taq3fa","tag_id":"cix4kp82h002gc88qrnzmn69c","_id":"cix4kp82j002lc88qkpdnc5uw"},{"post_id":"cix4kp82a0023c88qa562j0ss","tag_id":"cix4kp82j002jc88qglpv5e9h","_id":"cix4kp82k002nc88qbt0ea4h8"},{"post_id":"cix4kp82a0023c88qa562j0ss","tag_id":"cix4kp82k002mc88qeutohy54","_id":"cix4kp82k002oc88qqi0ijn3f"},{"post_id":"cix4kp82l002pc88qpmo48uof","tag_id":"cix4kp8080007c88qqks1i8ua","_id":"cix4kp82p002rc88q55n9t3bu"},{"post_id":"cix4kp82l002pc88qpmo48uof","tag_id":"cix4kp80f000cc88qp7autr4e","_id":"cix4kp82q002sc88qwamkxlpl"},{"post_id":"cix4kp82n002qc88qnc7w5yu6","tag_id":"cix4kp8290021c88qkjn404pd","_id":"cix4kp82q002uc88qijlvdo27"},{"post_id":"cix4kp82n002qc88qnc7w5yu6","tag_id":"cix4kp82c0025c88qpyhhpnvf","_id":"cix4kp82q002wc88qc9l5lzk7"},{"post_id":"cix4kp82n002qc88qnc7w5yu6","tag_id":"cix4kp82e0029c88qogvh2ih9","_id":"cix4kp82r002yc88q7w80kh6p"},{"post_id":"cix4kp82s002zc88q5q52jw4b","tag_id":"cix4kp82u0031c88qfeo9qtun","_id":"cix4kp82v0034c88qx5448l5d"},{"post_id":"cix4kp82s002zc88q5q52jw4b","tag_id":"cix4kp82v0032c88qo6shvagn","_id":"cix4kp82w0035c88quav90xek"},{"post_id":"cix4kp82x0036c88q0nzbm0zg","tag_id":"cix4kp82u0031c88qfeo9qtun","_id":"cix4kp8310038c88q7msv72ss"},{"post_id":"cix4kp82x0036c88q0nzbm0zg","tag_id":"cix4kp82v0032c88qo6shvagn","_id":"cix4kp834003bc88q8pwpwehi"},{"post_id":"cix4kp82y0037c88qp8el8hax","tag_id":"cix4kp82u0031c88qfeo9qtun","_id":"cix4kp836003fc88qy3qbyhea"},{"post_id":"cix4kp82y0037c88qp8el8hax","tag_id":"cix4kp82v0032c88qo6shvagn","_id":"cix4kp836003gc88qs0rbwm1r"},{"post_id":"cix4kp8310039c88qf3f1t34m","tag_id":"cix4kp837003hc88qwd4zjvn8","_id":"cix4kp837003kc88qdnwgqv3u"},{"post_id":"cix4kp839003lc88qhuc9n1d0","tag_id":"cix4kp82u0031c88qfeo9qtun","_id":"cix4kp83b003mc88q3ryxs0sv"},{"post_id":"cix4kp839003lc88qhuc9n1d0","tag_id":"cix4kp82v0032c88qo6shvagn","_id":"cix4kp83d003oc88qlafzqnm8"},{"post_id":"cix4kp8310039c88qf3f1t34m","tag_id":"cix4kvqlo0000b88qxg05f93x","_id":"cix4kvqm70002b88qhinoh0a6"}],"Tag":[{"name":"jdk源码系列","_id":"cix4kp8080007c88qqks1i8ua"},{"name":"security源码导读系列","_id":"cix4kp80f000cc88qp7autr4e"},{"name":"java","_id":"cix4kp80w000sc88qxbo6rg1j"},{"name":"juc","_id":"cix4kp80z000wc88qlemq3o0r"},{"name":"翻译","_id":"cix4kp8110010c88qx6hu9642"},{"name":"spring-cloud","_id":"cix4kp8120015c88qcrd1x4q9"},{"name":"微服务","_id":"cix4kp8140019c88qv6tq8i0f"},{"name":"饮食健康","_id":"cix4kp81b001ic88q9xzry9y7"},{"name":"熟食","_id":"cix4kp81e001nc88q6wvq8x4u"},{"name":"冬瓜","_id":"cix4kp81i001qc88q5gswm4yk"},{"name":"拿手菜","_id":"cix4kp81k001rc88qs8e67mb4"},{"name":"心情","_id":"cix4kp8290021c88qkjn404pd"},{"name":"随笔","_id":"cix4kp82c0025c88qpyhhpnvf"},{"name":"琐事","_id":"cix4kp82e0029c88qogvh2ih9"},{"name":"运维","_id":"cix4kp82f002cc88qn51vlggj"},{"name":"tomcat","_id":"cix4kp82h002gc88qrnzmn69c"},{"name":"机器人","_id":"cix4kp82j002jc88qglpv5e9h"},{"name":"机器学习","_id":"cix4kp82k002mc88qeutohy54"},{"name":"spring","_id":"cix4kp82u0031c88qfeo9qtun"},{"name":"spring-boot","_id":"cix4kp82v0032c88qo6shvagn"},{"name":"�ƶ���","_id":"cix4kp835003dc88qjhn92h2l"},{"name":"weex","_id":"cix4kp837003hc88qwd4zjvn8"},{"name":"移动端","_id":"cix4kvqlo0000b88qxg05f93x"}]}}