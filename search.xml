<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JUC源码阅读之 Thread]]></title>
      <url>http://jbeacon.top/2016/11/27/juc/01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lang包之 System]]></title>
      <url>http://jbeacon.top/2016/11/27/java.lang/01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
<ul>
<li>作者: 灯塔</li>
<li>源码：jdk1.8</li>
</ul>
</blockquote>
<p>在我们初学习编程之处，就我来说，我一开始接触编程的语言是c语言，我相信大多数科班出身的都跟我一样，首先学习的是print(“Hello World”).<br>在我学习java时，我也是如此，毕竟学习过一门语言，再学习其他就很好的掌握方法了。<br>在java 学习中， 我们是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;Hello world!“);</div></pre></td></tr></table></figure></p>
<p>当年学习的时候，会个Hello world! 对我来说已经是件兴奋不已的事情，却并没有好好的看看<strong>System</strong>中的源码</p>
<p><strong>System</strong>的类，包含了几个有用的属性，和方法，他们不能被实例化，下面这些方法都是<strong>System</strong>类所提供的。<br>如：标准的输入流，标准的输出流，以及错误的输出流，和一些扩展定义的属性和环境变量方法。都是加载文件和库的一种手段，一个实用程序的方法和快速复制数组的一部分。</p>
<p>先过目一下，这个牛叉的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public final class System &#123;</div><div class="line">   /** openjdk 能找到这个cpp 文件**/</div><div class="line">   private static native void registerNatives();</div><div class="line">   static &#123;</div><div class="line">      registerNatives();</div><div class="line">   &#125;   </div><div class="line">   /** 防止被实例化**/</div><div class="line">   private System() &#123;&#125;</div><div class="line">   public final static InputStream in = null;</div><div class="line">   public final static PrintStream out = null;</div><div class="line">   public final static PrintStream err = null;</div><div class="line">   /** 允许实现安全策略 **/</div><div class="line">   private static volatile SecurityManager security = null;</div><div class="line">   ......</div><div class="line">   ......</div><div class="line">   public static Console console() &#123;</div><div class="line">         if (cons == null) &#123;</div><div class="line">             synchronized (System.class) &#123;</div><div class="line">                 cons = sun.misc.SharedSecrets.getJavaIOAccess().console();</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         return cons;</div><div class="line">   &#125;</div><div class="line">   ......</div><div class="line">   ......</div><div class="line">   public static</div><div class="line">   void setSecurityManager(final SecurityManager s) &#123;</div><div class="line">        try &#123;</div><div class="line">            s.checkPackageAccess(&quot;java.lang&quot;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">        &#125;</div><div class="line">        setSecurityManager0(s);</div><div class="line">    &#125;</div><div class="line">    private static synchronized</div><div class="line">    void setSecurityManager0(final SecurityManager s) &#123;</div><div class="line">        SecurityManager sm = getSecurityManager();</div><div class="line">        if (sm != null) &#123;</div><div class="line">            sm.checkPermission(new RuntimePermission</div><div class="line">                                     (&quot;setSecurityManager&quot;));</div><div class="line">        &#125;</div><div class="line">        if ((s != null) &amp;&amp; (s.getClass().getClassLoader() != null)) &#123;      </div><div class="line">            AccessController.doPrivileged(new PrivilegedAction&lt;Object&gt;() &#123;</div><div class="line">                public Object run() &#123;</div><div class="line">                    s.getClass().getProtectionDomain().implies</div><div class="line">                        (SecurityConstants.ALL_PERMISSION);</div><div class="line">                    return null;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        security = s;</div><div class="line">    &#125;</div><div class="line">	/** 毫秒 **/</div><div class="line">	public static native long currentTimeMillis();</div><div class="line">	/** 纳秒 **/</div><div class="line">	public static native long nanoTime();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外，在System中也提供了数组的复制功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static native void arraycopy(Object src,  int  srcPos,</div><div class="line">                                    Object dest, int destPos,</div><div class="line">                                    int length);</div></pre></td></tr></table></figure></p>
<ul>
<li>@param      src  : 表示源数组（将要被复制的）</li>
<li>@param      srcPos 复制src数组的起点</li>
<li>@param      dest   目标数组，被改变的</li>
<li>@param      destPos 目标数组的复制起点</li>
<li>@param      length 复制目标数组的个数<br>例如：我们可以这样使用System.arraycopy(…)<br>int[] a = {1,2,3,4,5,6,7};<br>int[] b = {9,8,7,6};<br>System.arraycopy(a, 2, b,0,2)<br>b的结果为：[9,2,3,6]</li>
</ul>
<p>此外，<strong>System</strong> 还提供了一个非常重要的特性，那就是<strong>Properties props</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private static Properties props;</div><div class="line">private static native Properties initProperties(Properties props);</div></pre></td></tr></table></figure>
<p>下面这些属性，已经在JVM中被实现了:</p>
<ul>
<li>java.version ： java 版本号</li>
<li>java.vendor ：Java供应商特定的字符串</li>
<li>java.vendor.url：Java厂商的网址</li>
<li>java.home  ： Java 安装目录</li>
<li>java.class.version ： Java类版本号</li>
<li>java.class.path  ：Java 类路径</li>
<li>os.name  ： 操作系统的名称</li>
<li>os.arch ： 操作系统的架构</li>
<li>os.version  ： 操作系统的版本号</li>
<li>file.separator  ： 文件分割符号</li>
<li>path.separator  ： 路径分割符</li>
<li>line.separator  ： 行分割符</li>
<li>user.name ： 用户名称</li>
<li>user.home ： 用户根目录</li>
<li>user.dir  用户当前工作目录</li>
</ul>
<p>我们一般会这样使用，同过System 可以有效的获取我们当前系统的环境的一些信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.getProperty(&quot;os.name&quot;);</div></pre></td></tr></table></figure></p>
<p>其他的类似.</p>
<p>System 中还有这样的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static void gc() &#123;</div><div class="line">    Runtime.getRuntime().gc();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在执行System.gc() 的时候，会触发一下这样的JVM的垃圾回收。</p>
<p>总结：给出一套工具类的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class SystemUtils &#123;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 系统默认字符集UTF-8。</div><div class="line">     */</div><div class="line">    public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;utf-8&quot;);</div><div class="line">    </div><div class="line">    //内部引用，保证初始化。</div><div class="line">    private static String lp;</div><div class="line">    </div><div class="line">    static &#123;</div><div class="line">        ByteArrayOutputStream bos = new ByteArrayOutputStream(2);</div><div class="line">        PrintWriter writer = new PrintWriter(bos, true);</div><div class="line">        writer.println();</div><div class="line">        lp = new String(bos.toByteArray());</div><div class="line">        writer.close();</div><div class="line">        if(lp == null) &#123;</div><div class="line">            lp = new String(new byte[]&#123;&apos;\r&apos;,&apos;\n&apos;&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * lineSeparator</div><div class="line">     */</div><div class="line">    public static final String LINESEPARATOR = lp;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM名称。</div><div class="line">     * </div><div class="line">     * @return 当前JVM名称。</div><div class="line">     */</div><div class="line">    public static String getJavaVMName() &#123;</div><div class="line">        return System.getProperty(&quot;java.vm.name&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM版本。</div><div class="line">     * </div><div class="line">     * @return  当前JVM版本。</div><div class="line">     */</div><div class="line">    public static String getJavaVMVersion() &#123;</div><div class="line">        return System.getProperty(&quot;java.vm.version&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM厂商。</div><div class="line">     * </div><div class="line">     * @return 当前JVM厂商。</div><div class="line">     */</div><div class="line">    public static String getJavaVMVendor() &#123;</div><div class="line">        return System.getProperty(&quot;java.vm.vendor&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前Java版本。</div><div class="line">     * </div><div class="line">     * @return 当前Java版本。</div><div class="line">     */</div><div class="line">    public static String getJavaVersion() &#123;</div><div class="line">        return System.getProperty(&quot;java.version&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前临时目录。</div><div class="line">     * </div><div class="line">     * @return 系统当前临时目录。</div><div class="line">     */</div><div class="line">    public static String getTempDir() &#123;</div><div class="line">        return System.getProperty(&quot;java.io.tmpdir&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前操作系统的名称。</div><div class="line">     * </div><div class="line">     * @return  </div><div class="line">     *      当前操作系统名称。</div><div class="line">     */</div><div class="line">    public static String getOsName() &#123;</div><div class="line">        return System.getProperty(&quot;os.name&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前操作系统版本。</div><div class="line">     * </div><div class="line">     * @return  </div><div class="line">     *      当前操作系统版本。</div><div class="line">     */</div><div class="line">    public static String getOsVersion() &#123;</div><div class="line">        return System.getProperty(&quot;os.version&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前系统用户名称。</div><div class="line">     * </div><div class="line">     * @return  </div><div class="line">     *      当前系统用户名称。</div><div class="line">     */</div><div class="line">    public static String getUserName() &#123;</div><div class="line">        return System.getProperty(&quot;user.name&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JavaHome。</div><div class="line">     * </div><div class="line">     * @return  当前JavaHome, 如果没有则返回null。</div><div class="line">     */</div><div class="line">    public static String getJavaHome() &#123;</div><div class="line">        return System.getProperty(&quot;java.home&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取CPU数据模型（32位还是64位，即寻址空间大小）。</div><div class="line">     * </div><div class="line">     * @return </div><div class="line">     *      CPU数据模型（32位还是64位）。</div><div class="line">     */</div><div class="line">    public static String getArchDataMode() &#123;</div><div class="line">        return System.getProperty(&quot;sun.arch.data.model&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前语言环境。</div><div class="line">     * </div><div class="line">     * @return 当前语言环境，如：zh。</div><div class="line">     */</div><div class="line">    public static String getUserLanguage() &#123;</div><div class="line">        return System.getProperty(&quot;user.language&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取文件分隔符。</div><div class="line">     * </div><div class="line">     * @return 文件分隔符。</div><div class="line">     */</div><div class="line">    public static String getFileSeparator() &#123;</div><div class="line">        return System.getProperty(&quot;file.separator&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取处理器数量（CPU核心数量）。</div><div class="line">     * </div><div class="line">     * @return 处理器数量。</div><div class="line">     */</div><div class="line">    public static int getProcessorCount() &#123;</div><div class="line">        return Runtime.getRuntime().availableProcessors();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM空闲内存。</div><div class="line">     * </div><div class="line">     * @return 当前JVM空闲内存，单位（字节）。</div><div class="line">     */</div><div class="line">    public static long getFreeMemory() &#123;</div><div class="line">        return Runtime.getRuntime().freeMemory();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM最大内存</div><div class="line">     * </div><div class="line">     * @return 当前JVM最大内存，单位（字节）。</div><div class="line">     */</div><div class="line">    public static long getMaxMemory() &#123;</div><div class="line">        return  Runtime.getRuntime().maxMemory();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * &lt;p&gt;获取当前JVM总内存</div><div class="line">     * &lt;p&gt;总内存可以不等于最大内存，取决于JVM的设置（参见-Xms -Xmx等参数），当</div><div class="line">     * 最小内存不等于最大内存时，内存空间可扩展。</div><div class="line">     * </div><div class="line">     * @return </div><div class="line">     */</div><div class="line">    public static long getTotalMemory() &#123;</div><div class="line">        return Runtime.getRuntime().totalMemory();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 打印当前所有线程栈追踪信息。</div><div class="line">     */</div><div class="line">    public static void printAllStackTrack() &#123;</div><div class="line">        Map&lt;Thread, StackTraceElement[]&gt; stMap = Thread.getAllStackTraces();</div><div class="line">        for(Thread thread : stMap.keySet()) &#123;</div><div class="line">            StackTraceElement[] elements = stMap.get(thread);</div><div class="line">            System.out.println(thread);</div><div class="line">            for (StackTraceElement element : elements) &#123;</div><div class="line">                System.out.println(&quot;    &quot;+element);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM运行时间（从启动到当前的时间）。</div><div class="line">     * </div><div class="line">     * @return </div><div class="line">     *      当前JVM启动时间，单位（毫秒）。</div><div class="line">     */     </div><div class="line">    public static long getJavaVMUptime() &#123;</div><div class="line">        // throw new UnsupportedOperationException();  </div><div class="line">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</div><div class="line">        if(runtimeMXBean != null)&#123;</div><div class="line">                return runtimeMXBean.getUptime();</div><div class="line">        &#125;</div><div class="line">        //can&apos;t happen</div><div class="line">        return -1;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取当前JVM启动时间。</div><div class="line">     * </div><div class="line">     * @return </div><div class="line">     *      当前JVM启动时间，单位（毫秒）。</div><div class="line">     */</div><div class="line">    public static long getJavaVMStartTime() &#123;</div><div class="line">        // throw new UnsupportedOperationException();  </div><div class="line">        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();</div><div class="line">        if(runtimeMXBean != null)&#123;</div><div class="line">                return runtimeMXBean.getStartTime();</div><div class="line">        &#125;</div><div class="line">        //can&apos;t happen</div><div class="line">        return -1;       </div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">    private SystemUtils()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[菜名：红烧冬瓜]]></title>
      <url>http://jbeacon.top/2016/11/27/cooker/01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：<br>本人除了是个写字的，还是一个厨艺爱好者，我们写代码的除了关心代码外，我们更加应该关系我们的健康，毕竟这是一个高风险职业啊。<br>so,我就写了这个饮食健康的系列，show show 我自己的拿手好菜。<br>本章，拿手好菜，<strong>红烧冬瓜</strong></p>
</blockquote>
<h1 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h1><ul>
<li>冬瓜500克  5块钱</li>
<li>葱油40克   142ml -9.90块， </li>
<li>花生油35克 </li>
<li>甜酱25克</li>
<li>酱油25克</li>
<li>白糖10克</li>
<li>精盐3克</li>
<li>味精2克</li>
<li>葱 姜末 各一点</li>
<li>水淀粉20克</li>
<li>高汤100毫升</li>
</ul>
<h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><p>步骤一：</p>
<p>到超市去买个冬瓜，如何挑冬瓜？如今的农家冬瓜基本都是藏过的，可以挑那种硬皮的比较好。</p>
<p>步骤二：<br>将冬瓜去皮，去子瓢洗净，切成3厘米长（这个切的参不多就行，别计较），1.2厘米厚，2厘米宽的块状物。<br>步骤三：<br>起油锅，锅内加花生油烧热，下入葱 姜末（前面已经切好），甜酱，再放入冬瓜，酱油，白糖，精盐，味精（个人不喜欢味精没放），高汤（我用的是热米水，可以是开水），开后转微火，烧至冬瓜软烂时，用钩勺淋上葱油，搅匀，呈上盘子就可以。</p>
<h1 id="最终的作品："><a href="#最终的作品：" class="headerlink" title="最终的作品："></a>最终的作品：</h1><p><img src="http://ali.xinshipu.cn/20110610/original/1307684166819.jpg" alt="sss" title="title"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[翻译spring-cloud的一篇文章]]></title>
      <url>http://jbeacon.top/2016/11/26/translation/1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
<ul>
<li>翻译：灯塔</li>
<li>校对：</li>
<li>翻译原文：<a href="http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html" target="_blank" rel="external">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a></li>
<li>翻译目的：玩玩这个<a href="https://github.com/kbastani/spring-cloud-microservice-example" target="_blank" rel="external">https://github.com/kbastani/spring-cloud-microservice-example</a><br>注意：企业实现微服务化时，需要考虑团队的水平，技术成本，和当前的业务需求，业务体量，微服务实施也并不好玩，分布式会比单体架构难度大的多。</li>
</ul>
<hr>
</blockquote>
<h1 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring-Cloud?"></a>什么是Spring-Cloud?</h1><p>Spring-Cloud 是一套工具集合，用来提供解决方案构建分布式系统时遇到的一些常见的模式。如果你熟悉构建用spring 来构建应用，那么spring-cloud常用来构建它的一些常见的构建块。<br>在Spring-Cloud 提供的解决方案中，你可能要找一些工具来解决一下的一下问题：</p>
<ul>
<li>Configuration management（配置管理）</li>
<li>Service discovery(服务发现)</li>
<li>Circuit breakers（断融器）</li>
<li>Distributed sessions（分布式回会话）</li>
</ul>
<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>这里大部分spring-cloud 的工作都是基于spring-boot 的基础上的。<br>下面谈论的一些东西对于spring-boot来说都是一些新的东西，下面的项目名称已经很大的程度上已经说明了他是干什么的。<br>你能在Spring框架和spring的生态圈中的到所有的最好的东西，调到完美，以最小的配置，为生产环境做好随时发布的准备。</p>
<h1 id="服务发现和集成路由"><a href="#服务发现和集成路由" class="headerlink" title="服务发现和集成路由"></a>服务发现和集成路由</h1><p>在为服务的架构中，每一个服务都有单独的作用。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个<strong>配置服务</strong>，和<strong>发现服务</strong>。在用spring-cloud中构建微服务架构时，这里有一些概念需要首先去处理和熟悉的。第一和第二个微服务，将需要你去创建一个<strong>配置服务</strong>，和<strong>发现服务</strong>。</p>
<p><img src="http://i.imgur.com/Dc6xjwd.png" alt="微服务" title="title"></p>
<p>上面的图片展示了一个4-microservice设置，连线表示了它们之间的依赖。</p>
<p><strong>配置服务</strong>，在顶部，用黄色表示，同时，它也被其他的微服务依赖。<strong>发现服务</strong>在低部，标记为蓝色，同时也被其他微服务依赖。</p>
<p>绿色，是代表2个微服务，这是这个例子的应用的一部分，我在这篇博客中叫他为 <strong>movies</strong> 和 <strong>recommendations</strong></p>
<h1 id="配置服务（Configuration-Service）"><a href="#配置服务（Configuration-Service）" class="headerlink" title="配置服务（Configuration Service）"></a>配置服务（Configuration Service）</h1><p>这个<strong>配置服务</strong>，在所有的微服务架构中都是一个非常重要的概念，基于<a href="http://12factor.net/config" target="_blank" rel="external">twelve-factor</a>应用方法,微服务的配置应该是在环境中得到存储，而不是仅仅在项目中。</p>
<p><strong>配置服务</strong> 是必须的，因为他为所有的微服务处理了配置，通过简单的点对点服务调用，来检索这些配置，这是多功能的优点。</p>
<p>让我们来总结一下，这个多个部署环境。如果我们有一个临时环境和生产环境，在这些环境中，我们的配置是不一样的，一个配置服务可能有一个专用的Git存储库的配置环境。没有其他的环境中能够访问这个配置<br>它是只提供给服务在该环境运行时的配置。</p>
<p><img src="http://i.imgur.com/J7FazPH.png" alt="微服务" title="title"></p>
<p>当<strong>配置服务</strong>开启后，它会根据配置路劲找到配置文件，去服务那些需要配置服务的微服务程序。每一个微服务都可以拥有他们的自己的配置，来处理一些正在运行的特殊环境。<br>在这个过程中，配置外部化和集中在一个地方，可以版本控制和修改，而无需重启服务改变配置。</p>
<p>可以利用spring-cloud 的节点管理，你可以让配置环境的改变，只是需要简单的刷新 <strong>发现服务</strong>， 这样就能强制让全部的服务消费者发现这个新的服务。</p>
<h1 id="发现服务-Discovery-Service"><a href="#发现服务-Discovery-Service" class="headerlink" title="发现服务(Discovery Service)"></a>发现服务(Discovery Service)</h1><p><strong>发现服务</strong>是微服务架构中的另外一个重要的组件。<strong>发现服务</strong>处理维护服务实例的列表可工作在一个集群中。在应用程序中，service - to - service调用是使用客户端来做。</p>
<p>以这个程序为例子，我使用<a href="https://github.com/spring-cloud-samples/feign-eureka" target="_blank" rel="external">Spring Cloud Feign</a>, 客户端是依赖于一个RESTful的API 的微服务,它起源于<a href="https://github.com/spring-cloud-samples/feign-eureka" target="_blank" rel="external">Netflix OSS</a>项目.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@FeignClient(&quot;movie&quot;)</div><div class="line">public interface MovieClient &#123;</div><div class="line">    @RequestMapping(method = RequestMethod.GET, value = &quot;/movies&quot;)</div><div class="line">    PagedResources findAll();</div><div class="line"></div><div class="line">    @RequestMapping(method = RequestMethod.GET, value = &quot;/movies/&#123;id&#125;&quot;)</div><div class="line">    Movie findById(@RequestParam(&quot;id&quot;) String id);</div><div class="line"></div><div class="line">    @RequestMapping(method = RequestMethod.POST, value = &quot;/movies&quot;,</div><div class="line">      produces = MediaType.APPLICATION_JSON_VALUE)</div><div class="line">    void createMovie(@RequestBody Movie movie);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的例子，我创建了一个 模拟客户端，用RESTful 方法来暴露<strong>movie service</strong>。使用 <strong>@FeignClient</strong>注解，我首先指定我想为<strong>movice micro service</strong>来创建一个客户端的API。<br>接着，我指定一个我想要消费的微服务映射，我是通过在方法上声明URL的样式来做接口映射的（spring mvc类似），作为一个REST Ful 的路由映射。</p>
<p>创建一个模拟的客户端 是相当的简单，我们只是需要在我将要创建的客户端中，知道需要那个服务的ID。这个服务的URL将会在运行期间被自动配置，因为在集群中的每一个微服务在开启时它的ID都会被注册到<strong>发现服务</strong>中。</p>
<p>这同样适用于其他服务的microservice架构。我只是需要知道这个服务的Id,我就能和他做交互，这里的所有事情都会spring自动化了。</p>
<h1 id="API-Gateway"><a href="#API-Gateway" class="headerlink" title="API Gateway"></a>API Gateway</h1><p>API gateway 是另外一个重要的微服务，如果我们需要去创建一个微服务集群管理他们自己的领域实体类。绿色的六边形下面是数据驱动的服务，用来管理他们自己的领域模型实体类，以及他们自己的数据库。通过添加一个<strong>API gateway service</strong>， 我们可以创建一个API 路由的代理，并暴露给绿色的服务。<br><img src="http://i.imgur.com/JVSGMfY.png" alt="Alt text" title="Optional title"></p>
<p>现在，我们假设 <strong>recommendations service</strong> 和 <strong> movie service </strong> 都暴露他们自己的REST API 给领域实体管理。这个API gateway 将会通过<strong>discovery service</strong>发现他们的服务和他们依赖注入其他服务的代理路由方法。<br>通过这个方式，<strong> recommendation</strong> 和 <strong> movice </strong> 服务，将会有一个完整的定义; 本地的路由映射是可以利用所有暴露 REST API 的微服务。API Gateway 将会重新定义转发路由请求服务实例，用自己的路由开始通过HTTP来发出请求。</p>
<h1 id="例子项目"><a href="#例子项目" class="headerlink" title="例子项目"></a>例子项目</h1><p>我把全部的例子项目都放到了一起，演示了一个从头到尾的 使用Spring cloud 构建本地云平台的实践架构。</p>
<p>概念：</p>
<ul>
<li>使用Docker整合测试用例</li>
<li>混合持久化</li>
<li>微服务架构</li>
<li>服务发现</li>
<li>API gateway</li>
</ul>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>每一个服务都是使用Docker来构建和发布的。从头到尾整合测试用例，能在一台开发机器中，使用Docker compose来做。</p>
<h1 id="混合持久化（Polyglot-Persistence）"><a href="#混合持久化（Polyglot-Persistence）" class="headerlink" title="混合持久化（Polyglot Persistence）"></a>混合持久化（Polyglot Persistence）</h1><p>这个示例项目的核心概念之一是在实践中如何走近通晓多种语言的持久性。Microservices项目中使用自己的数据库,同时结合数据从其他服务通过休息或一个消息总线。例如，你能有一个微服务，服务下面的数据库：</p>
<ul>
<li>Neo4j (graph)</li>
<li>MongoDB (document)</li>
<li>MySQL (relational)</li>
</ul>
<h1 id="微服务架构（Microservice-architecture）"><a href="#微服务架构（Microservice-architecture）" class="headerlink" title="微服务架构（Microservice architecture）"></a>微服务架构（Microservice architecture）</h1><p>这个例子项目，演示了如何使用微服务构建一个新的应用程序，而不是monolith-first策略。<br>由于在项目中的每一个微服务都是父项目的一个模块，这样对开发者来说是非常友好的，可以在本地中运行和开发每一个微服务。添加一个新的微服务也是非常的容易，当<strong>发现程序</strong>可以自动发现新的在集群中运行的微服务。</p>
<h1 id="服务发现（Service-discovery）"><a href="#服务发现（Service-discovery）" class="headerlink" title="服务发现（Service discovery）"></a>服务发现（Service discovery）</h1><p>这个项目包含2种类型的服务发现，其中一个是使用了Netflix Eureka, 以及另外一个是使用了Hashicorp 的 Consul。发现有多个服务提供了机会来使用一个(Consul)作为集群的DNS提供商，其他如（Eureka）作为一个API gateway 的代理。</p>
<h1 id="API-gateway"><a href="#API-gateway" class="headerlink" title="API gateway"></a>API gateway</h1><p>每一个微服务，将会和Eureka 的检索整个集群API路由线，使用此策略中的每个microservice集群可以通过一个API网关负载均衡和暴露API gateway。每个服务将自动发现和API请求路由到服务拥有路线。这个代理技术是十分有帮助的在开发用户接口的时候，作为完整的API可用的平台是通过自己的主机作为代理。</p>
<h1 id="Docker-例子"><a href="#Docker-例子" class="headerlink" title="Docker 例子"></a>Docker 例子</h1><p>这个Demo项目是使用Docker来构建一个内容镜像都是每个microservices Maven构建的一部分。我们可以轻松地安排整个microservice集群在自己的机器上使用Docker组件。</p>
<h1 id="开始这个项目"><a href="#开始这个项目" class="headerlink" title="开始这个项目"></a>开始这个项目</h1><p>你可以访问Github仓库，来获取这个例子的项目。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/kbastani/spring-cloud-microservice-example</div></pre></td></tr></table></figure></p>
<p>拷贝这个项目，和下载这个仓库到你的机器。在下载后，你将会需要，使用Maven 和Docker去编译和构建一个本地的镜像。</p>
<h1 id="下载Docker"><a href="#下载Docker" class="headerlink" title="下载Docker"></a>下载Docker</h1><p>首先，下载一个Docker,如果你并没有安装。接着，按着这个介绍，<a href="https://docs.docker.com/compose/install/" target="_blank" rel="external">这里</a>, 去获取Docker , 以及在你的开发机器上运行。</p>
<p>你将同时需要安装 <a href="https://docs.docker.com/compose/" target="_blank" rel="external">Docker Compose</a>,这个安装指导，你可以在这里找到，<a href="https://docs.docker.com/compose/install/" target="_blank" rel="external">这里</a>. 如果你已经安装了Mac OSX 和 boot2docker,确认你的boot2docker-vm的条件，是否最小为5G内存，下面这个命令将允许你这样设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ boot2docker init --memory=5000</div></pre></td></tr></table></figure></p>
<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>运行这个Demo,需要一下这些条件：</p>
<ul>
<li>Maven3+</li>
<li>Java 8+</li>
<li>Docker </li>
<li>Docker Compose</li>
</ul>
<h1 id="构建这个项目"><a href="#构建这个项目" class="headerlink" title="构建这个项目"></a>构建这个项目</h1><p>去构建这个项目，可以开启终端在项目的根目录下运行这个命令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn clean install</div></pre></td></tr></table></figure></p>
<p>在执行，这个命令，他会帮忙下载项目工程所需要的依赖包，以及编译每一个项目工程。每一个服务都会被构建，以及Maven的Docker 插件将会自动构建每一个镜像到本地的Docker 注册。在你运行  <strong>mvn clean install</strong>命令去构建的时候 Docker 必须先被运行，并且是可用的。<br>如果构建成功，你会看到这样的信息输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Reactor Summary:</div><div class="line">[INFO]</div><div class="line">[INFO] spring-cloud-microservice-example-parent .......... SUCCESS [  0.268 s]</div><div class="line">[INFO] users-microservice ................................ SUCCESS [ 11.929 s]</div><div class="line">[INFO] discovery-microservice ............................ SUCCESS [  5.640 s]</div><div class="line">[INFO] api-gateway-microservice .......................... SUCCESS [  5.156 s]</div><div class="line">[INFO] recommendation-microservice ....................... SUCCESS [  7.732 s]</div><div class="line">[INFO] config-microservice ............................... SUCCESS [  4.711 s]</div><div class="line">[INFO] hystrix-dashboard ................................. SUCCESS [  4.251 s]</div><div class="line">[INFO] consul-microservice ............................... SUCCESS [  6.763 s]</div><div class="line">[INFO] movie-microservice ................................ SUCCESS [  8.359 s]</div><div class="line">[INFO] movies-ui ......................................... SUCCESS [ 15.833 s]</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure></p>
<h1 id="开始使用Docker-Compose-来组成集群"><a href="#开始使用Docker-Compose-来组成集群" class="headerlink" title="开始使用Docker Compose 来组成集群"></a>开始使用Docker Compose 来组成集群</h1><p>现在每一个镜像，已经被构建成功，我们可以使用Docker Compose 来 组成自旋向上的集群，我们将会包含一个预配置的yaml文件。<br>在项目的根目录，进入 <strong>spring-cloud-mircroservice-example/docker</strong>目录<br>现在，可以开启一个微服务集群，执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker-compose up</div></pre></td></tr></table></figure></p>
<p>如果所有的事情都配置正确，每一个镜像都能更早的在我们自己的Docker VM 容器内，被运行构建，网络会自动服务发现. 你将会看见，一大串的log 输出，为每一个服务的开启的顺序。<br>这可能需要几分钟来编译整个程序，这个时间是由你的运行机器来决定的。</p>
<p>一旦启动顺序完成，你可以导航到 Eureka主机和看到哪些服务注册与发现服务。</p>
<p>复制和粘贴下面的命令行到你的终端，Docker能接近使用 <strong>$DOCKER_HOST</strong> 环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ open $(echo \&quot;$(echo $DOCKER_HOST)\&quot;|</div><div class="line">            \sed &apos;s/tcp:\/\//http:\/\//g&apos;|</div><div class="line">            \sed &apos;s/[0-9]\&#123;4,\&#125;/8761/g&apos;|</div><div class="line">            \sed &apos;s/\&quot;//g&apos;)</div></pre></td></tr></table></figure></p>
<p>如果 Eureka 能正确开启，浏览器窗口将会开启一个本地的Eureka 服务的面板，就如下面所展示的那样：<br><img src="http://i.imgur.com/buABI3h.png" alt="Eureka"></p>
<p>我们能看见，每一个服务实例的运行和运行状态。我们能接近这个数据驱动服务。这个演示程序的就是 <strong>movie</strong> 服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ open $(echo \&quot;$(echo $DOCKER_HOST)/movie\&quot;|</div><div class="line">            \sed &apos;s/tcp:\/\//http:\/\//g&apos;|</div><div class="line">            \sed &apos;s/[0-9]\&#123;4,\&#125;/10000/g&apos;|</div><div class="line">            \sed &apos;s/\&quot;//g&apos;)</div></pre></td></tr></table></figure></p>
<p>这个命令，这个命令将导航到API网关的端点和代理<strong>movie</strong>服务的REST API端点。这些REST APIs 已经使用 <strong>HATEOAS</strong>来被配置了，它支持所有的服务的自动发现功能嵌入链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;_links&quot; : &#123;</div><div class="line">    &quot;self&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;resume&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/resume&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;pause&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/pause&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;restart&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/restart&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;metrics&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/metrics&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;env&quot; : [ &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/env&quot;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/env&quot;</div><div class="line">    &#125; ],</div><div class="line">    &quot;archaius&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/archaius&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;beans&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/beans&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;configprops&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/configprops&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;trace&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/trace&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;info&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/info&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;health&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/health&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;hystrix.stream&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/hystrix.stream&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;routes&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/routes&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;dump&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/dump&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;refresh&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/refresh&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;mappings&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/mappings&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoconfig&quot; : &#123;</div><div class="line">      &quot;href&quot; : &quot;http://192.168.59.103:10000/movie/autoconfig&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>本系列的第一部分关于构建mircroservice架构与Spring-cloud 和 Docker。在本文章中，我们已经涉及到了以下的一些概念：</p>
<ul>
<li>服务发现（Service Discovery）</li>
<li>扩展配置（Externalized Configuration）</li>
<li>API Gateway</li>
<li>用Docker实现服务编排（Service Orchestration with Docker Compose）</li>
</ul>
<p>在下一篇博文中,我们将复习如何构建应用程序前端与后端服务集成。我们也可以关注于这个例子<a href="http://martinfowler.com/bliki/PolyglotPersistence.html" target="_blank" rel="external">polyglot persistence</a>使用Mysql(关系型数据库) 和 Neo4j(图形数据库)。</p>
<h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p>我将会特别感谢<a href="http://www.twitter.com/starbuxman" target="_blank" rel="external">Josh Long</a> 和 spring 的 rest 团队给与我这个机会去学习spring 框架提供的第一手精美的东西。没有杰克的指导我将无法用语言表达的所有神奇的spring生态系统所能提供的东西。</p>
<p>这里有很多开源工具，想Spring Cloud。 这将是件不可能的事情，如果没有这些人的思想领导，如：<a href="https://twitter.com/adrianco" target="_blank" rel="external">Adrian Cockcroft (Netflix OSS)</a>, <a href="https://twitter.com/martinfowler" target="_blank" rel="external">Martin Fowler (everything)</a><br><a href="https://twitter.com/samnewman" target="_blank" rel="external">Sam Newman (O’Reilly’s Building Microservices)</a>, <a href="https://twitter.com/iansrobinson" target="_blank" rel="external"> Ian Robinson (consumer driven contracts)</a><br><a href="https://twitter.com/crichardson" target="_blank" rel="external"> Chris Richardson (Cloud Foundry) </a> 以及很多其他参与到开源工作的人们。</p>
<blockquote>
<p>参考：<br><a href="http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html" target="_blank" rel="external">http://www.kennybastani.com/2015/07/spring-cloud-docker-microservices.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[消息摘要与数字签名(补充基础知识)]]></title>
      <url>http://jbeacon.top/2016/11/21/jca/04/</url>
      <content type="html"><![CDATA[<p><img src="http://img2.tuicool.com/3mMjAf.jpg" alt="vv" title="title"><br><a id="more"></a></p>
<blockquote>
<p>导读：<br>在读java.security 源码时，发现有很多不懂的地方，需要补充一下基础知识。这章节主要说说Java安全的<strong>消息摘要</strong> 和 <strong>数字签名</strong> 的内容。</p>
</blockquote>
<h1 id="1、消息摘要"><a href="#1、消息摘要" class="headerlink" title="1、消息摘要"></a>1、消息摘要</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>他是有一个唯一对一个消息或文本的固定长度的值。它是由一个单向的Hash加密函数对消息进行作用而产生。如果消息在途中改变了，则接收者通过对收到消息的新产生的摘要与原摘要比较，就可知道消息是否被改变了。因此消息摘要保证了消息的完整性。消息摘要采用单向Hash 函数将需加密的明文”摘要”成一串密文，这一串密文亦称为数字指纹(Finger Print)。它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是”真身”的”指纹”了。<br>类是MD5加密，明文摘要成密文，过程不可逆，但密文是唯一的，只需要对比密文的一致性，就能知道原来的明文有没有因为远程传输而改变。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>消息摘要具有以下特点：</p>
<ul>
<li>唯一性：数据只要有一点改变，那么再通过消息摘要算法得到的摘要也会发生变化。虽然理论上有可能会发生碰撞，但是概率极其低。</li>
<li>不可逆：消息摘要算法的密文无法被解密。</li>
<li>不需要密钥，可使用于分布式网络。</li>
<li>无论输入的明文有多长，计算出来的消息摘要的长度总是固定的。</li>
</ul>
<p>原理<br>消息摘要，其实就是将需要摘要的数据作为参数，经过哈希函数(Hash)的计算，得到的散列值。<br>如下，给出常用的消息摘要工具类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div></pre></td><td class="code"><pre><div class="line">public class MessageDigestUtils &#123;        </div><div class="line">    /**</div><div class="line">     * 默认字节缓冲区大小。</div><div class="line">     */</div><div class="line">    private static final int DEFAULT_BUFFER_SIZE = 1024 * 8;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD2算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。</div><div class="line">     */</div><div class="line">    public static byte[] getMD2Digest(byte[] input)&#123;</div><div class="line">        //throw new UnsupportedOperationException();</div><div class="line">        return getMessageDigest(input, MessageDigestAlgorithm.MD2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD2算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IOException  如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。</div><div class="line">     */</div><div class="line">    public static byte[] getMD2Digest(InputStream inputStream) throws IOException&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       return getMessageDigest(inputStream, MessageDigestAlgorithm.MD2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD2算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD2算法。</div><div class="line">     */</div><div class="line">    public static String getMD2StringDigest(byte[] input)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(input, MessageDigestAlgorithm.MD2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD2算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流。</div><div class="line">     * @return 字符串形式的消息摘要。</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD2算法。</div><div class="line">     */</div><div class="line">    public static String getMD2StringDigest(InputStream inputStream) throws IOException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD5算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。</div><div class="line">     */</div><div class="line">    public static byte[] getMD5Digest(byte[] input)&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       return getMessageDigest(input, MessageDigestAlgorithm.MD5); </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD5算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。</div><div class="line">     */</div><div class="line">    public static byte[] getMD5Digest(InputStream inputStream) throws IOException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getMessageDigest(inputStream, MessageDigestAlgorithm.MD5);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD5算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持MD5算法。</div><div class="line">     */</div><div class="line">    public static String getMD5StringDigest(byte[] input)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(input, MessageDigestAlgorithm.MD5);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过MD5算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持MD5算法。</div><div class="line">     */</div><div class="line">    public static String getMD5StringDigest(InputStream inputStream) throws IOException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.MD5);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHADigest(byte[] input)&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       return getMessageDigest(input, MessageDigestAlgorithm.SHA);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHADigest(InputStream inputStream) throws IOException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-1算法。</div><div class="line">     */</div><div class="line">    public static String getSHAStringDigest(byte[] input)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-1(简称SHA)算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IOException  如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-1算法。</div><div class="line">     */</div><div class="line">    public static String getSHAStringDigest(InputStream inputStream) </div><div class="line">            throws IOException&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-256算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据流</div><div class="line">     * @return  字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHA256Digest(byte[] input)&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       return getMessageDigest(input, MessageDigestAlgorithm.SHA256);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-256算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHA256Digest(InputStream inputStream) </div><div class="line">            throws IOException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-256算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return  字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-256算法。</div><div class="line">     */</div><div class="line">    public static String getSHA256StringDigest(byte[] input)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA256);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-256算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream</div><div class="line">     * @return </div><div class="line">     *      字符串形式的消息摘要</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-256算法。</div><div class="line">     */</div><div class="line">    public static String getSHA256StringDigest(InputStream inputStream) </div><div class="line">            throws IOException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA256);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-384算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHA384Digest(byte[] input)&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       return getMessageDigest(input, MessageDigestAlgorithm.SHA384);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-384算法进行消息摘要。</div><div class="line">     * </div><div class="line">     * @param inputStream inputStream 要进行消息摘要的数据流。</div><div class="line">     * @return 字节数组形式的消息摘要。</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHA384Digest(InputStream inputStream) throws IOException&#123;</div><div class="line">       // throw new UnsupportedOperationException();</div><div class="line">       		return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-384算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-384算法。</div><div class="line">     */</div><div class="line">    public static String getSHA384StringDigest(byte[] input)&#123;</div><div class="line">       //throw new UnsupportedOperationException();</div><div class="line">       return getStringMessageDigest(input, MessageDigestAlgorithm.SHA384);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-384算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IOException  如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-384算法。</div><div class="line">     */</div><div class="line">    public static String getSHA384StringDigest(InputStream inputStream) </div><div class="line">            throws IOException&#123;</div><div class="line">        //  throw new UnsupportedOperationException();  </div><div class="line">        return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA384);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-512算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return  字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHA512Digest(byte[] input)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getMessageDigest(input, MessageDigestAlgorithm.SHA512);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-512算法进行消息摘要。</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流。</div><div class="line">     * @return 字节数组形式的消息摘要。</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。</div><div class="line">     */</div><div class="line">    public static byte[] getSHA512Digest(InputStream inputStream) </div><div class="line">            throws IOException&#123; </div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return getMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-512算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null或者JDK不支持SHA-512算法。</div><div class="line">     */</div><div class="line">    public static String getSHA512StringDigest(byte [] input) &#123;</div><div class="line">        //throw new UnsupportedOperationException();</div><div class="line">        return getStringMessageDigest(input, MessageDigestAlgorithm.SHA512);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 通过SHA-512算法进行消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null或者JDK不支持SHA-512算法。</div><div class="line">     */</div><div class="line">    public static String getSHA512StringDigest(InputStream inputStream) </div><div class="line">            throws IOException &#123;        </div><div class="line">       return getStringMessageDigest(inputStream, MessageDigestAlgorithm.SHA512);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlgorithm&#125;</div><div class="line">     * @return 字节数组形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。</div><div class="line">     */</div><div class="line">    private static byte[] getMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) &#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        Assert.notNull(input, &quot;要进行消息摘要的数据不能为空!&quot;);</div><div class="line">        Assert.notNull(algorithm, &quot;消息摘要算法不能为空!&quot;);</div><div class="line">        try &#123;</div><div class="line">                MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());</div><div class="line">                return messageDigest.digest(input);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">                throw new IllegalArgumentException(e);</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取消息摘要</div><div class="line">     * </div><div class="line">     * @param input 要进行消息摘要的数据</div><div class="line">     * @param alogrithm 消息摘要算法 @see &#123;@link  MessageDigestAlogrithm&#125;</div><div class="line">     * @return 字符串形式的消息摘要</div><div class="line">     * @throws IllegalArgumentException 如果参数input为null，或者algorithm为空或不被JDK支持。</div><div class="line">     */</div><div class="line">    private static String getStringMessageDigest(byte[] input, MessageDigestAlgorithm algorithm) &#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        byte[] digest = getMessageDigest(input, algorithm);</div><div class="line">        return HexUtils.toHexString(digest);        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取消息摘要。</div><div class="line">     * @param inputStream 要进行消息摘要的数据流。</div><div class="line">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlogrithm &#125;</div><div class="line">     * @return 字节数组形式的消息摘要。</div><div class="line">     * @throws IOException 如果从数据流中读取数据发生错误。</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。</div><div class="line">     */</div><div class="line">    private static byte[] getMessageDigest (InputStream inputStream, MessageDigestAlgorithm algorithm) </div><div class="line">            throws IOException &#123;</div><div class="line">        //throw new UnsupportedOperationException();</div><div class="line">        Assert.notNull(inputStream, &quot;要进行消息摘要的数据流不能为空!&quot;);</div><div class="line">        Assert.notNull(algorithm, &quot;消息摘要算法不能为空!&quot;);</div><div class="line">        try &#123;</div><div class="line">            MessageDigest messageDigest = MessageDigest.getInstance(algorithm.getName());</div><div class="line">            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];</div><div class="line">            int len = -1;</div><div class="line">            while ((len = inputStream.read(buffer)) &gt; -1) &#123;</div><div class="line">                messageDigest.update(buffer, 0, len);</div><div class="line">            &#125;</div><div class="line">            return messageDigest.digest();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new IllegalArgumentException(e);</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取消息摘要</div><div class="line">     * </div><div class="line">     * @param inputStream 要进行消息摘要的数据流。</div><div class="line">     * @param alogrithm 消息摘要算法 @see &#123;@link MessageDigestAlogrithm&#125;。</div><div class="line">     * @return 字符串形式的消息摘要。</div><div class="line">     * @throws IOException 如果从数据流中读数据发生错误。</div><div class="line">     * @throws IllegalArgumentException 如果参数inputStream为null，或者algorithm为空或不被JDK支持。</div><div class="line">     */</div><div class="line">    private static String getStringMessageDigest(InputStream inputStream, MessageDigestAlgorithm algorithm) </div><div class="line">            throws IOException &#123;        </div><div class="line">        byte[] digest = getMessageDigest(inputStream, algorithm);</div><div class="line">        return HexUtils.toHexString(digest);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private MessageDigestUtils() &#123;&#125; </div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 消息摘要算法</div><div class="line">     * </div><div class="line">     * 这里只是列举JDK6以上（包含6）支持的算法</div><div class="line">     */</div><div class="line">    public static enum  MessageDigestAlgorithm &#123;</div><div class="line">        </div><div class="line">        MD2(&quot;MD2&quot;,128),</div><div class="line">        MD5(&quot;MD5&quot;,128),</div><div class="line">        SHA(&quot;SHA-1&quot;,160),</div><div class="line">        SHA256(&quot;SHA-256&quot;,256),</div><div class="line">        SHA384(&quot;SHA-384&quot;,384),</div><div class="line">        SHA512(&quot;SHA-512&quot;,512);</div><div class="line">        </div><div class="line">        /**</div><div class="line">         * 算法名称</div><div class="line">         */</div><div class="line">        private String name;</div><div class="line">        </div><div class="line">        /**</div><div class="line">         * 摘要长度（单位：比特）</div><div class="line">         */</div><div class="line">        private int digestLength;</div><div class="line"></div><div class="line">        private  MessageDigestAlgorithm(String name,int digestLength) &#123;</div><div class="line">            this.name = name;</div><div class="line">            this.digestLength = digestLength;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getName() &#123;</div><div class="line">            return name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public int getDigestLength() &#123;</div><div class="line">            return digestLength;</div><div class="line">        &#125;                </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><p>MD2(“MD2”,128),<br>MD5(“MD5”,128),<br>SHA(“SHA-1”,160),<br>SHA256(“SHA-256”,256),<br>SHA384(“SHA-384”,384),<br>SHA512(“SHA-512”,512);</p>
<p>消息摘要算法包括MD(Message Digest，消息摘要算法)、SHA(Secure Hash Algorithm，安全散列算法)、MAC(Message AuthenticationCode，消息认证码算法)共3大系列，常用于验证数据的完整性，是数字签名算法的核心算法。<br>MD5和SHA1分别是MD、SHA算法系列中最有代表性的算法。<br>如今，MD5已被发现有许多漏洞，从而不再安全。SHA算法比MD算法的摘要长度更长，也更加安全。</p>
<h1 id="2、数字签名"><a href="#2、数字签名" class="headerlink" title="2、数字签名"></a>2、数字签名</h1><p>数字签名算法可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是非对称加密算法和消息摘要算法的结合体。</p>
<h2 id="算法简述"><a href="#算法简述" class="headerlink" title="算法简述"></a>算法简述</h2><p><strong>数字签名算法</strong>可以看做是一种带有密钥的消息摘要算法，并且这种密钥包含了公钥和私钥。也就是说，数字签名算法是<strong>非对称加密算法和消息摘要算法的结合体</strong>。</p>
<h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>数字签名算法要求能够验证数据完整性、认证数据来源，并起到抗否认的作用。</p>
<p>原理<br>数字签名算法包含签名和验证两项操作，遵循私钥签名，公钥验证的方式。<br>签名时要使用私钥和待签名数据，验证时则需要公钥、签名值和待签名数据，其核心算法主要是消息摘要算法。</p>
<p>常用算法：<br>RSA、DSA、ECDSA</p>
<p>实现：RSA<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">public class RSASignatureUtils &#123;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * RSA算法名称。</div><div class="line">     */</div><div class="line">    private static final String ALGORITHM = &quot;RSA&quot;;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 对数据进行签名。</div><div class="line">     * </div><div class="line">     * @param data 待签名的数据。</div><div class="line">     * @param privateKey 私钥。</div><div class="line">     * @param signatureAlgorithm 数字签名算法。 参见&#123;@link SignatureAlgorithm&#125;</div><div class="line">     * @return  </div><div class="line">     *      数字签名。</div><div class="line">     * @throws IllegalArgumentException 如果参数不合法。</div><div class="line">     * @throws IllegalStateException 如果在签名过程中发生错误。</div><div class="line">     */</div><div class="line">    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class="line">        //throw new UnsupportedOperationException();</div><div class="line">        Assert.notNull(data, &quot;要签名的数据不能为null!&quot;);</div><div class="line">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class="line">        try &#123;</div><div class="line">            PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);</div><div class="line">            Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class="line">            signature.initSign(key);</div><div class="line">            signature.update(data);</div><div class="line">            return signature.sign();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (SignatureException e) &#123;</div><div class="line">            throw new IllegalStateException(e);</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 对数据的数字签名进行验证。</div><div class="line">     * </div><div class="line">     * @param data 待验证数据。</div><div class="line">     * @param publicKey 公钥。</div><div class="line">     * @param sign data的数据签名。</div><div class="line">     * @param signatureAlgorithm 数字签名算法。参见&#123;@link SignatureAlgorithm&#125;</div><div class="line">     * @return </div><div class="line">     *      签名是否有效。</div><div class="line">     * @throws IllegalArgumentException 如果参数不合法。</div><div class="line">     * @throws IllegalStateException 如果在验证过程中发生错误。</div><div class="line">     * </div><div class="line">     */</div><div class="line">    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        Assert.notNull(data, &quot;要验证的数据不能为null!&quot;);</div><div class="line">        Assert.notNull(sign, &quot;数字签名不能为null!&quot;);</div><div class="line">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class="line">        try &#123;</div><div class="line">            PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);</div><div class="line">            Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class="line">            signature.initVerify(key);</div><div class="line">            signature.update(data);</div><div class="line">            return signature.verify(sign);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">            throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (SignatureException e) &#123;</div><div class="line">            throw new IllegalStateException(e);</div><div class="line">        &#125;       </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * RSA数字签名算法。 </div><div class="line">     * 这里只列举JDK6支持的算法。</div><div class="line">     */    </div><div class="line">    public static enum SignatureAlgorithm&#123;</div><div class="line">        MD2WithRSA(&quot;MD2WithRSA&quot;),</div><div class="line">        MD5WithRSA(&quot;MD5WithRSA&quot;),</div><div class="line">        SHA1WithRSA(&quot;SHA1WithRSA&quot;),</div><div class="line">        SHA256WithRSA(&quot;SHA256WithRSA&quot;),</div><div class="line">        SHA384WithRSA(&quot;SHA384WithRSA&quot;),</div><div class="line">        SHA512WithRSA(&quot;SHA512WithRSA&quot;);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 算法名称。</div><div class="line">         */</div><div class="line">        private String name;</div><div class="line"></div><div class="line">        private SignatureAlgorithm(String name) &#123;</div><div class="line">            this.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getName() &#123;</div><div class="line">            return name;</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private RSASignatureUtils()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DSA：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">public class DSASignatureUtils &#123;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * DSA算法名称。</div><div class="line">     */</div><div class="line">    private static final String ALGORITHM = &quot;DSA&quot;;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * JDK6支持的DSA算法默认密钥长度。</div><div class="line">     */</div><div class="line">    private static final int KEYSIZE = 1024;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 生成一个密钥对Bean(包括公钥和私钥)。</div><div class="line">     * </div><div class="line">     * @param keySize 密钥长度(必须大于等于512且小于等于1024，同时是64的倍数。)</div><div class="line">     * @return 密钥对。</div><div class="line">     * @throws IllegalArgumentException 如果密钥长度不合法。</div><div class="line">     * @throws IllegalStateException 如果系统不支持DSA算法。</div><div class="line">     */</div><div class="line">    public static KeyPairBean generateKeyPair(int keySize)&#123;</div><div class="line">       //throw new UnsupportedOperationException();</div><div class="line">        Assert.isTrue(keySize &gt;= 512 &amp;&amp; keySize &lt;= 1024 &amp;&amp; keySize % 64 == 0,</div><div class="line">                &quot;密钥长度必须大于等512且小于等于1024，同时是64的倍数!&quot;);</div><div class="line">        return EncryptionBase.generateKeyPair(ALGORITHM, keySize);       </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 生成一个密钥对Bean(包括公钥和私钥)。</div><div class="line">     * &lt;p&gt;使用默认密钥长度1024。</div><div class="line">     * </div><div class="line">     * @return  密钥对。</div><div class="line">     * @throws IllegalArgumentException 如果密钥长度不合法。</div><div class="line">     * @throws IllegalStateException 如果系统不支持DSA算法。</div><div class="line">     */</div><div class="line">    public static KeyPairBean generateKeyPair()&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        return generateKeyPair(KEYSIZE);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 对数据进行签名。</div><div class="line">     * </div><div class="line">     * @param data 待签名的数据。</div><div class="line">     * @param privateKey 私钥。</div><div class="line">     * @param signatureAlgorithm 数字签名算法。 参见&#123;@link SignatureAlgorithm&#125;</div><div class="line">     * @return </div><div class="line">     *      数字签名。</div><div class="line">     * @throws IllegalArgumentException 如果参数不合法。</div><div class="line">     * @throws IllegalStateException 如果在签名过程中发生错误。</div><div class="line">     */</div><div class="line">    public static byte[] sign(byte[] data, byte[] privateKey, SignatureAlgorithm signatureAlgorithm)&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        Assert.notNull(data, &quot;要签名的数据不能为null!&quot;);</div><div class="line">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class="line">        try &#123;</div><div class="line">                PrivateKey key = EncryptionBase.toPrivateKey(privateKey, ALGORITHM);</div><div class="line">                Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class="line">                signature.initSign(key);</div><div class="line">                signature.update(data);</div><div class="line">                return signature.sign();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">                throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">                throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (SignatureException e) &#123;</div><div class="line">                throw new IllegalStateException(e);</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 对数据的数字签名进行验证。</div><div class="line">     * </div><div class="line">     * @param data 待验证数据。</div><div class="line">     * @param publicKey 公钥。</div><div class="line">     * @param sign data的数据签名。</div><div class="line">     * @param signatureAlgorithm 数字签名算法。参见&#123;@link SignatureAlgorithm&#125;</div><div class="line">     * @return  </div><div class="line">     *      签名是否有效。</div><div class="line">     * @throws IllegalArgumentException 如果参数不合法。</div><div class="line">     * @throws IllegalStateException 如果在验证过程中发生错误。</div><div class="line">     */</div><div class="line">    public static boolean verify(byte[] data, byte[] publicKey, byte[] sign, SignatureAlgorithm signatureAlgorithm) throws SignatureException&#123;</div><div class="line">        // throw new UnsupportedOperationException();</div><div class="line">        Assert.notNull(data, &quot;要验证的数据不能为null!&quot;);</div><div class="line">        Assert.notNull(sign, &quot;数字签名不能为null!&quot;);</div><div class="line">        Assert.notNull(signatureAlgorithm, &quot;数字签名算法不能为null!&quot;);</div><div class="line">        try &#123;</div><div class="line">                PublicKey key = EncryptionBase.toPublicKey(publicKey, ALGORITHM);</div><div class="line">                Signature signature = Signature.getInstance(signatureAlgorithm.getName());</div><div class="line">                signature.initVerify(key);</div><div class="line">                signature.update(data);</div><div class="line">                return signature.verify(sign);</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">                throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (InvalidKeyException e) &#123;</div><div class="line">                throw new IllegalArgumentException(e);</div><div class="line">        &#125; catch (SignatureException e) &#123;</div><div class="line">                throw new IllegalStateException(e);</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * DSA数字签名算法。</div><div class="line">     * 这里只列举JDK6支持的算法。</div><div class="line">     */</div><div class="line">    public static enum SignatureAlgorithm&#123;</div><div class="line">        SHA1WithDSA(&quot;SHA1WithDSA&quot;);</div><div class="line">        /**</div><div class="line">         * 算法名称。</div><div class="line">         */</div><div class="line">        private String name;</div><div class="line"></div><div class="line">        private SignatureAlgorithm(String name) &#123;</div><div class="line">                this.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public String getName() &#123;</div><div class="line">                return name;</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private DSASignatureUtils()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考文章：<br><a href="http://www.cnblogs.com/jingmoxukong/p/5700906.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/5700906.html</a><br><a href="http://www.cnblogs.com/jingmoxukong/p/5688306.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/5688306.html</a><br>《Core Java Volume2》<br>《Java加密与解密技术》</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java.security源码解读系列-消息摘要与数字签名]]></title>
      <url>http://jbeacon.top/2016/11/20/jca/03/</url>
      <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430"></iframe></p>
<blockquote>
<p>导读：</p>
<ul>
<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>
<li>本文相关的JDK版本是JDK7,jdk8</li>
<li>作者：灯塔</li>
<li>原文： </li>
</ul>
</blockquote>
<p>签名类是用于提供应用程序的功能的数字签名算法。数字签名用于身份验证和完整性保证数字数据。签名算法并不只是局限为DSA sha-1 算法，可以是MD2+RSA DSA+sha-1 这种特殊的结合，还可以加盐等等，签名对象可以用于生成和验证数字签名。<br>Signature对象可以用于生成和验证数字签名。</p>
<a id="more"></a>
<p>我们先来看看Signature 类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**@author Benjamin Renaud**/</div><div class="line">public abstract class Signature extends SignatureSpi &#123;</div><div class="line">  ....... </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过类的继承SignatureSpi 我们知道，Signature 是属于SPI（Service Provider Interface）体系下的，也就是说，他类实现中必然提供了一个 getProvider() 方法，支持签名算法的别名实现。</p>
<p>在看源码的时候，发现好多这种代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static final Debug debug =</div><div class="line">					Debug.getInstance(&quot;jca&quot;, &quot;Signature&quot;);</div><div class="line"></div><div class="line">private static final Debug pdebug =</div><div class="line">					Debug.getInstance(&quot;provider&quot;, &quot;Provider&quot;);</div><div class="line">private static final boolean skipDebug =</div><div class="line">	Debug.isOn(&quot;engine=&quot;) &amp;&amp; !Debug.isOn(&quot;signature&quot;);</div></pre></td></tr></table></figure></p>
<p>很多Debug.XX() 的实现。这好像是 Java Platform Debugger Architecture  下的东西 ，具体可以看这里：<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</a><br>是securiy 下面的一个工具类：</p>
<p>Signature 对象是一个抽象类，意味这他必然要被继承。<br>我们再次具体的看看他的源码实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/**@author Benjamin Renaud**/</div><div class="line">public abstract class Signature extends SignatureSpi &#123;</div><div class="line">   private String algorithm;</div><div class="line">   /**The provider 包内可见**/</div><div class="line">   Provider provider;</div><div class="line">   </div><div class="line">   private final static Map&lt;String,Boolean&gt; signatureInfo;</div><div class="line"></div><div class="line">   static &#123;</div><div class="line">        signatureInfo = new ConcurrentHashMap&lt;String,Boolean&gt;();</div><div class="line">        Boolean TRUE = Boolean.TRUE;</div><div class="line">        // pre-initialize with values for our SignatureSpi implementations</div><div class="line">        signatureInfo.put(&quot;sun.security.provider.DSA$RawDSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.provider.DSA$SHA1withDSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$MD2withRSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$MD5withRSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA1withRSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA256withRSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA384withRSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.rsa.RSASignature$SHA512withRSA&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;com.sun.net.ssl.internal.ssl.RSASignature&quot;, TRUE);</div><div class="line">        signatureInfo.put(&quot;sun.security.pkcs11.P11Signature&quot;, TRUE);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   public final void initSign(PrivateKey privateKey)</div><div class="line">            throws InvalidKeyException &#123;</div><div class="line">        engineInitSign(privateKey);</div><div class="line">        state = SIGN;</div><div class="line"></div><div class="line">        if (!skipDebug &amp;&amp; pdebug != null) &#123;</div><div class="line">            pdebug.println(&quot;Signature.&quot; + algorithm +</div><div class="line">                &quot; signing algorithm from: &quot; + this.provider.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	//这里有一个加密适配器，将来会废除</div><div class="line">    @SuppressWarnings(&quot;deprecation&quot;)</div><div class="line">    private static class CipherAdapter extends SignatureSpi &#123;</div><div class="line"></div><div class="line">        private final Cipher cipher;</div><div class="line"></div><div class="line">        private ByteArrayOutputStream data;</div><div class="line">	｝	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考：<br><a href="http://www.cnblogs.com/jingmoxukong/p/5700906.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/5700906.html</a><br><a href="http://www.cnblogs.com/jingmoxukong/p/5688306.html" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/p/5688306.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat多实例部署及其原理]]></title>
      <url>http://jbeacon.top/2016/11/19/yunwei/1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：<br>昨天在跟群友做技术交流的时候,了解到，有很多大公司都是采用了高可用的，分布式的，实例沉余1+台。但是在小公司的同学也很多，他们反映并不是所有公司都有那样的资源来供你调度。往往公司只会给你一台机器，因为有些应用挂了公司也不会有损失的，我们往往一台机器就可以搞定。<br>但是，我们也要为我们做出来的应用负责，毕竟东西做出来是为了给人用的，如果做出来的东西经常挂了，谈何使用，在前期，如果公司资源紧张的情况下，可以不可以做高可用，多机器的沉余部署。但是至少是在但机上有2个进程在跑。so,在这里我们就说说这个，如何做单机多实例的部署。<br>在这里谈谈，在只有单机的资源下，如何把单机的资源压榨出来，用好单机。</p>
</blockquote>
<hr>
<h1 id="1、Tomcat部署的场景分析"><a href="#1、Tomcat部署的场景分析" class="headerlink" title="1、Tomcat部署的场景分析"></a>1、Tomcat部署的场景分析</h1><p>通常，我们对tomcat单机部署需求可以分为几种：</p>
<ul>
<li>单实例单应用 (一个tomcat 一个web应用)</li>
<li>单实例多应用 (一个tomcat多个应用)</li>
<li>多实例单应用 (多个tomcat都部署一个应用)</li>
<li>多实例多应用 (多个tomcat部署多个不同的应用)</li>
</ul>
<p><strong>第一种场景</strong>：这是我们开发中经常用到的，如果不要求周期性地维护tomcat版本，一般的做法是把打好的war包丢到webapps目录下，然后执行startup.sh脚本，并且可以在浏览器里访问就行了。<br><strong>第二种场景</strong>：是把多个应用程序的war包放在同一个tomcat的webapps目录，这样一来，关闭和启动tomca，或tomcat挂掉会影响所有项目。<br><strong>第三种场景</strong>: 各个tomcat都运行同一个应用程序，对应地需要修改不同的监听端口，这种方式通常会和apache httpd或者nginx整合使用，做一些负载均衡的处理。<br><strong>第四种场景</strong>: 相当于第一种场景的复数形式，除了修改不同的监听端口，没有本质区别。</p>
<p>一般来说，多实例部署tomcat，可以充分利用系统资源，不过这种方式，也有几个方面需要考虑：<br>多实例tomcat的更新维护，例如对tomcat进行升级等操作，我们需要考虑如何能“优雅”地对所有实例进行升级<br>尽量不要影响应用程序，在更新tomcat时，一不小心就把conf目录等全部覆盖，所以尽量要把配置文件和安装目录隔离<br>对于单应用来说，如果将war包分别置于各个tomcat的webapps目录，那么在发布新版本的war时，可能会出现某个实例更新失败，导致用户在访问时可能会访问到不同版本的web app，因此，<strong>比较好的方式就是所有tomcat实例都统一指向同一个应用程序</strong>，这样做，就可以多个tomcat用一份应用源码，简单部署，单机高可用也能实现（要配合nginx）.<br>本文重点阐述多实例应用的部署方案，但是为了解决上述几个问题，我们需要先来了解一下tomcat的一些基本情况。</p>
<a id="more"></a>
<h1 id="2、我们的目标"><a href="#2、我们的目标" class="headerlink" title="2、我们的目标"></a>2、我们的目标</h1><p><a href="http://www.itnose.net/img/20161025/172338.png" target="_blank" rel="external"><img src="http://www.itnose.net/img/20161025/172338.png" alt="tomcat架构" title="title"></a></p>
<hr>
<h1 id="3、tomcat架构"><a href="#3、tomcat架构" class="headerlink" title="3、tomcat架构"></a>3、tomcat架构</h1><h2 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h2><p><a href="http://www.itnose.net/img/20160411/10674534.gif" target="_blank" rel="external"><img src="http://www.itnose.net/img/20160411/10674534.gif" alt="tomcat架构" title="title"></a></p>
<p>这里有一台服务器，3台tomcat服务，以及一台tomcat的解构图。</p>
<h2 id="分离目录"><a href="#分离目录" class="headerlink" title="分离目录"></a>分离目录</h2><table>
<thead>
<tr>
<th style="text-align:left">目录</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">bin</td>
<td style="text-align:left">主要存放脚本文件，例如比较常用的windows和linux系统中启动和关闭脚本</td>
</tr>
<tr>
<td style="text-align:left">conf</td>
<td style="text-align:left">主要存放配置文件，其中最重要的两个配置文件是server.xml和web.xml</td>
</tr>
<tr>
<td style="text-align:left">lib</td>
<td style="text-align:left">主要存放tomcat运行所依赖的包</td>
</tr>
<tr>
<td style="text-align:left">logs</td>
<td style="text-align:left">主要存放运行时产生的日志文件，例如catalina.{date}.log等</td>
</tr>
<tr>
<td style="text-align:left">temp</td>
<td style="text-align:left">存放tomcat运行时产生的临时文件，例如开启了hibernate缓存的应用程序，会在该目录下生成一些文件</td>
</tr>
<tr>
<td style="text-align:left">webapps</td>
<td style="text-align:left">部署web应用程序的默认目录</td>
</tr>
<tr>
<td style="text-align:left">work</td>
<td style="text-align:left">主要存放由JSP文件生成的servlet（java文件以及最终编译生成的class文件）</td>
</tr>
</tbody>
</table>
<p>再介绍两个tomcat中比较重要的概念（通常也是两个系统变量）——<strong>CATALINA_HOME</strong>和<strong>CATALINA_BASE</strong>：</p>
<p><strong>CATALINA_HOME</strong>：即指向Tomcat安装路径的系统变量<br><strong>CATALINA_BASE</strong>：即指向活跃配置路径的系统变量通过设置这两个变量，就可以将tomcat的安装目录和工作目录分离，从而实现tomcat多实例的部署。<br>Tomcat官方文档指出，CATALINA_HOME路径的路径下只需要包含bin和lib目录，这也就是支持tomcat软件运行的目录，而CATALINA_BASE设置的路径可以包括上述所有目录，不过其中bin和lib目录并不是必需的，缺省时会使用CATALINA_HOME中的bin和conf。如此，我们就可以使用一个tomcat安装目录部署多个tomcat实例，这样的好处在于方便升级，就可以在不影响tomcat实例的前提下，替换掉CATALINA_HOME指定的tomcat安装目录。</p>
<p><a href="http://www.itnose.net/img/20161025/172337.png" target="_blank" rel="external"><img src="http://www.itnose.net/img/20161025/172337.png" alt="tomcat架构" title="title"></a></p>
<p> tomcat serve.xml 配置结构<br>Container容器子容器间关系图<br><a href="http://www.itnose.net/img/20160411/10674535.png" target="_blank" rel="external"><img src="http://www.itnose.net/img/20160411/10674535.png" alt="tomcat架构" title="title"></a></p>
<p> 交互图<br><a href="http://www.itnose.net/img/20160411/10674536.png" target="_blank" rel="external"><img src="http://www.itnose.net/img/20160411/10674536.png" alt="tomcat架构" title="title"></a></p>
<p> 对比下Tomcat serve.xml 的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class="line"></div><div class="line">  &lt;GlobalNamingResources&gt;</div><div class="line">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class="line">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class="line">              description=&quot;User database that can be updated and saved&quot;</div><div class="line">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class="line">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class="line">  &lt;/GlobalNamingResources&gt;</div><div class="line">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class="line">    &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">               connectionTimeout=&quot;20000&quot;</div><div class="line">               redirectPort=&quot;8443&quot; /&gt;</div><div class="line">    &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</div><div class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class="line">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class="line">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class="line">      &lt;/Realm&gt;</div><div class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line">      &lt;/Host&gt;</div><div class="line">    &lt;/Engine&gt;</div><div class="line">  &lt;/Service&gt;</div><div class="line">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="4、实战"><a href="#4、实战" class="headerlink" title="4、实战"></a>4、实战</h1><p>端口配置</p>
<h2 id="修改server-xml"><a href="#修改server-xml" class="headerlink" title="修改server.xml"></a>修改server.xml</h2><p>在server.xml中配置了四个监听端口，分别是：<br><strong>Server Port</strong>：该端口用于监听关闭tomcat的shutdown命令，<strong>默认为8005</strong>.<br><strong>Connector Port</strong>：该端口用于监听HTTP的请求，<strong>默认为8080</strong>.<br><strong>AJP Port</strong>：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，<strong>默认为8009</strong><br><strong>Redirect Port</strong>：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把https的请求转发到这个Redirect Port指定的端口，<strong>默认为8443</strong></p>
<p>虚拟主机配置<br>再来说Host配置，Host就是所谓的虚拟主机，对应包含了一个或者多个web应用程序，默认的Host配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>其中：<br><strong>name</strong>： 虚拟主机的名称，一台主机表示了完全限定的域名或IP地址，<strong>默认为localhost</strong>，同时也是唯一的host，进入tomcat的所有http请求都会映射到该主机上<br><strong>appBase</strong>：web应用程序目录的路径，可以是CATALINA_HOME的相对路径，也可以写成绝对路径，<strong>默认情况下为$CATALINA_HOME/webappsunpackWARs</strong>： 表示是否自动解压war包<br><strong>autoDeploy</strong>：所谓的热部署，即在tomcat正在运行的情况下，如果有新的war加入，则会立即执行部署操作<br>另外再介绍一个Host中的属性—deployOnStartup：表示tomcat启动时是否自动部署appBase目录下所有的Web应用程序，默认为true。这个属性和autoDeploy会产生两次部署的“副作用”：一次是tomcat启动时就开始部署，第二次就是autoDeploy引起的热部署。因此最好将autoDeploy置为false<br>在部署<strong>多实例单应用</strong>的时候，默认的$CATALINA/webapps会因为tomcat安装目录升级产生不必要的麻烦，我们考虑将appBase的目录统一到另外的路径下。</p>
<p>Context的配置<br>最后再说明一下Context的配置，它出现在Host配置内，一个Context的配置就代表了一个web应用程序，如果配置多应用程序，就需要在Host下配置多个Context，一个简单的Context配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Context path=&quot;/some&quot; docBase=&quot;someapp.war&quot; &gt;</div></pre></td></tr></table></figure></p>
<p><strong>path</strong>：表示访问入口，例如，path=”/abc”，则访问localhost:8080/abc时，就可以访问该Context对应的应用程序。如果path=””，则直接用localhost:8080就可以访问<br><strong>docBase</strong>：表示应用程序的解包目录或者war文件路径，是Host的appBase配置目录的相对路径，也可以是直接写成绝对路径，<strong>但是不要将appBase的值，作为docBase配置路径的前缀，例如appBase=”somedir”，docBase=”somedir-someapp.war”，这样的配置会导致部署错误</strong><br>通过配置Host的appBase和Context的docBase两个属性，可以将应用程序的文件和tomcat相关的目录进行分离，这样webapps目录也就没有作用了。</p>
<h2 id="跟我来实施该方案"><a href="#跟我来实施该方案" class="headerlink" title="跟我来实施该方案"></a>跟我来实施该方案</h2><ul>
<li>现在假设我们有一台已经配置好Java环境的服务器：（我用的是阿里云）</li>
<li>我已经有一个已经完成的shop.war 应用程序</li>
</ul>
<p>步骤1：<br>下载并解压tomcat<br><a href="/img/2016/11/tomcat01.jpg"><img src="/img/2016/11/tomcat01.jpg" alt="tomcat架构" title="title"></a></p>
<p>步骤2：<br>对Tomcat目录作以下调整：<br>在tomcat安装目录下创建a.ttlsa.com、b.ttlsa.com，并且将conf、logs、webapp、temp、work目录拷贝到这两个目录，然后tomcat安装目录只需要留下bin、a.ttlsa.com、b.ttlsa.com、lib这4个目录即可。配置后的目录结构如下：<br><a href="/img/2016/11/tomcat02.jpg"><img src="/img/2016/11/tomcat02.jpg" alt="tomcat架构" title="title"></a></p>
<p>如果要度tomcat 进行升级，我们只是需要对tomcat的lib 和 bin 目录进行升级即可。</p>
<p>步骤3：<br>配置站点server.xml<br>   <strong>配置a.ttlsa.com </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!-- 8005 改为8005 --&gt;</div><div class="line">&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class="line">  </div><div class="line">  &lt;GlobalNamingResources&gt;</div><div class="line">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class="line">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class="line">              description=&quot;User database that can be updated and saved&quot;</div><div class="line">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class="line">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class="line">  &lt;/GlobalNamingResources&gt;</div><div class="line">  </div><div class="line">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class="line">    &lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">               connectionTimeout=&quot;20000&quot;</div><div class="line">               redirectPort=&quot;8443&quot; /&gt;</div><div class="line">			   </div><div class="line">   &lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</div><div class="line">	</div><div class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class="line">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class="line">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class="line">      &lt;/Realm&gt;</div><div class="line">	  &lt;!--</div><div class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;/Host&gt;</div><div class="line">	  --&gt;</div><div class="line"></div><div class="line">	  &lt;Host name=&quot;localhost&quot; appBase=&quot;F:\data\www\a.ttlsa.com&quot;</div><div class="line">			  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class="line">			  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">			  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class="line">				&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class="line">			  &lt;/Context&gt;</div><div class="line">	   &lt;/Host&gt;</div><div class="line">	  </div><div class="line">    &lt;/Engine&gt;</div><div class="line">  &lt;/Service&gt;</div><div class="line">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>
<p>配置b.ttlsa.com<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!-- 8005 改为8006 --&gt;</div><div class="line">&lt;Server port=&quot;8002&quot; shutdown=&quot;SHUTDOWN&quot;&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.startup.VersionLoggerListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.AprLifecycleListener&quot; SSLEngine=&quot;on&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot; /&gt;</div><div class="line">  &lt;Listener className=&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot; /&gt;</div><div class="line">  </div><div class="line">  &lt;GlobalNamingResources&gt;</div><div class="line">    &lt;Resource name=&quot;UserDatabase&quot; auth=&quot;Container&quot;</div><div class="line">              type=&quot;org.apache.catalina.UserDatabase&quot;</div><div class="line">              description=&quot;User database that can be updated and saved&quot;</div><div class="line">              factory=&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</div><div class="line">              pathname=&quot;conf/tomcat-users.xml&quot; /&gt;</div><div class="line">  &lt;/GlobalNamingResources&gt;</div><div class="line">  </div><div class="line">  &lt;Service name=&quot;Catalina&quot;&gt;</div><div class="line">    &lt;Connector port=&quot;8082&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">               connectionTimeout=&quot;20000&quot;</div><div class="line">               redirectPort=&quot;8443&quot; /&gt;</div><div class="line">			   </div><div class="line">   &lt;!-- &lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt; --&gt;</div><div class="line">	</div><div class="line">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</div><div class="line">      &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt;</div><div class="line">        &lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</div><div class="line">               resourceName=&quot;UserDatabase&quot;/&gt;</div><div class="line">      &lt;/Realm&gt;</div><div class="line">	  &lt;!-- </div><div class="line">      &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line"></div><div class="line">      &lt;/Host&gt;</div><div class="line">	  --&gt;</div><div class="line">	 </div><div class="line">	  &lt;Host name=&quot;localhost&quot; appBase=&quot;F:\data\www\a.ttlsa.com&quot;</div><div class="line">			  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class="line">			  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">			  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class="line">				&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class="line">			  &lt;/Context&gt;</div><div class="line">	   &lt;/Host&gt;</div><div class="line">	  </div><div class="line">    &lt;/Engine&gt;</div><div class="line">  &lt;/Service&gt;</div><div class="line">&lt;/Server&gt;</div></pre></td></tr></table></figure></p>
<p><strong>创建多实例启动脚本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># description: 启动tomcat多实例.#</div><div class="line">. /etc/init.d/functions</div><div class="line">RETVAL=$?</div><div class="line"># tomcat实例目录</div><div class="line">export CATALINA_BASE=&quot;$PWD&quot;</div><div class="line"># tomcat安装目录</div><div class="line">export CATALINA_HOME=&quot;/usr/local/tomcat-7.0.50&quot;</div><div class="line"># 可选</div><div class="line">export JVM_OPTIONS=&quot;-Xms128m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=512m&quot;</div><div class="line">case &quot;$1&quot; in</div><div class="line">start)</div><div class="line">if [ -f $CATALINA_HOME/bin/startup.sh ];then</div><div class="line">echo $&quot;Start Tomcat&quot;</div><div class="line">$CATALINA_HOME/bin/startup.sh</div><div class="line">fi</div><div class="line">;;</div><div class="line">stop)</div><div class="line">if [ -f $CATALINA_HOME/bin/shutdown.sh ];then</div><div class="line">echo $&quot;Stop Tomcat&quot;</div><div class="line">$CATALINA_HOME/bin/shutdown.sh</div><div class="line">fi</div><div class="line">;;</div><div class="line">*)</div><div class="line">echo $&quot;Usage: $0 &#123;start|stop&#125;&quot;</div><div class="line">exit 1</div><div class="line">;;</div><div class="line">esac</div><div class="line">exit $RETVAL</div></pre></td></tr></table></figure></p>
<p>这段shell 脚本比较简单，主要是设置环境变量，接受命令参数 RETVAL=$? ，来执行不同的命令。 RETVAL=start/stop 等<br>export CATALINA_BASE=”$PWD” 表示设置当前路径为  CATALINA_BASE 的环境变量，一般情况下CATALINA_BASE 和 CATALINA_HOME 是默认一样的。</p>
<p><strong>启动脚本赋权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># chmod a+x tomcat.sh</div></pre></td></tr></table></figure></p>
<h1 id="5、启动测试"><a href="#5、启动测试" class="headerlink" title="5、启动测试"></a>5、启动测试</h1><p>启动/关闭a.ttlsa.com<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">启动</div><div class="line"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class="line"> # ./tomcat.sh start</div><div class="line"> 关闭</div><div class="line"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class="line"> # ./tomcat.sh stop</div></pre></td></tr></table></figure></p>
<p> 启动/关闭b.ttlsa.com<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">启动</div><div class="line"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class="line"> # ./tomcat.sh start</div><div class="line"> 关闭</div><div class="line"> # cd /usr/local/tomcat-7.0.50/a.ttlsa.com/</div><div class="line"> # ./tomcat.sh stop</div></pre></td></tr></table></figure></p>
<p>备注：一定需要cd到tomcat.sh的当前目录下执行才可以</p>
<p>在win7 下，需要创建在a.ttlsa.com 和b.ttlsa.com下面创建 startup.bat 来启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">set JAVA_HOME=D:\Program Files\Java\jdk1.8.0_112</div><div class="line">set PATH=%JAVA_HOME%\bin;%PATH%</div><div class="line">set CATALINA_BASE=%CD%</div><div class="line">cd E:\tomcat-8.5.6\bin</div><div class="line">catalina.bat start</div></pre></td></tr></table></figure>
<p>这段是在win7 下云的bat脚本，于shell脚本同理，set CATALINA_BASE=%CD% 也是设置环境变量，CD 可以获取当前的路径。</p>
<p>shell 脚本入门参考：<a href="http://sishuok.com/forum/blogPost/list/5655.html" target="_blank" rel="external">http://sishuok.com/forum/blogPost/list/5655.html</a></p>
<h1 id="6、结果"><a href="#6、结果" class="headerlink" title="6、结果"></a>6、结果</h1><p>单个Tomcat应用多个tomcat实例的配置到此，就结束了。<br>此外，我们在这里的基础上进行系统的扩展，比如如果我的Tomcat应用挂掉了，我的整个应用都将不可用了，我们应该如何处理？<br>我们可以把Tomcat复制多份，在单机的情况下，开多一个Tomcat进程，在配合Nginx 来配置，就能实现Tomcat的自动切换，这些内容，有空再写。</p>
<p>如果需要操作多个实例显得比较麻烦，大家可以自行写统一的脚本。</p>
<p><a href="/img/2016/11/tomcat03.jpg"><img src="/img/2016/11/tomcat03.jpg" alt="tomcat架构" title="title"></a><br><a href="/img/2016/11/tomcat04.jpg"><img src="/img/2016/11/tomcat04.jpg" alt="tomcat架构" title="title"></a></p>
<p>Linux 下的实现基本一致。</p>
<p>这样的好处是，显而易见的，这样能开启Tomcat的多个进程，即多台tomcat，挂了也不太怕，还有其他tomcat应用支撑，代码实例我们发版本的时候，只需要发布一份，实例代码易于维护。<br>但是，我们网站的域名和端口一般是同一采用80端口，统一的域名，而现在我们开启tomcat只能一个使用80端口，显然是不合适的·，为此我们会引入负载均衡的nginx来配置。<br>nginx 采用80 端口，tomcat分别采用8080， 8081， 8082 这样就能让我们的程序稳定的运行。<br>这样，我们就能进最大的限度来压榨单机的性能，保证应用程序的稳定的运行。<br>而然，单机不然有单机的瓶颈，毕竟单机中的cpu 已经各种硬件的限制，会大大影响实例程序的跑动，在这时，就不再是单机能抗的动的了，我们需要分析程序的瓶颈在那？数据库，那就把数据库单独分出去，单独一台机器，是文件图片服务器，就把他分出去。如果是应用程序太大，就要考虑把应用实例进行拆解为不同哦那个的组件，单独部署，这就是分布式部署。<br>当然，这都是后话，只有程序复杂到一定的程度，并体量很大的话，才会做这种架构的演变，成本和技术投入的难度也会相应的变大。<br>本章，只局限于如何玩好单机的基础上来讨论，对于分布式的那块，笔者能力有限，尚且还不能完全驾驭，不做分享。</p>
<h1 id="7、nginx-tomcat热备"><a href="#7、nginx-tomcat热备" class="headerlink" title="7、nginx+tomcat热备"></a>7、nginx+tomcat热备</h1><p>在上面的配置的基础上，我们在进一步进行扩展，进行实例的均衡和热备。<br>可以在一个服务器挂了的情况下连到另外一个，那怎么弄呢？<br>其实很简单，在upstream中的local_tomcat中配置多一个server。<br>在上面，我的a.ttlsa.com  和 b.ttlsa.com 都是访问  F:\data\www\a.ttlsa.com 下的源码的index.jsp 页面,<br>为了能观察，nginx 的keepAlive 的效果，我做一下修改：<br>a.ttlsa.com —&gt; F:\data\www\a.ttlsa.com  index.jsp 中文字是 1<br>b.ttlsa.com —&gt; F:\data\www\b.ttlsa.com  index.jsp 中文字是 2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">upstream local_tomcat &#123;  </div><div class="line">	server localhost:8081 weight=1;  </div><div class="line">	server localhost:8082 weight=5;  </div><div class="line">&#125; </div><div class="line"></div><div class="line">   server &#123;</div><div class="line">       listen       80;</div><div class="line">       server_name  localhost:8081;</div><div class="line"></div><div class="line">       #charset koi8-r;</div><div class="line"></div><div class="line">       #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">       #location / &#123;</div><div class="line">       #    root   html;</div><div class="line">       #    index  index.html index.htm;</div><div class="line">       #&#125;		</div><div class="line">	location / &#123;  </div><div class="line">		proxy_pass http://local_tomcat;  </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><a href="/img/2016/11/tomcat05.gif"><img src="/img/2016/11/tomcat05.gif" alt="tomcat架构" title="title"></a></p>
<p>在通常的情况下，我们一般是指向一份源码就足够了，并且设置权值，减轻应用的压力。同时也不会出现单点的情况。</p>
<p>补充：nginx.con 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line">events &#123;</div><div class="line">	worker_connections  1024;</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line">	include       mime.types;</div><div class="line">	default_type  application/octet-stream;</div><div class="line"></div><div class="line">	sendfile        on;</div><div class="line">	#tcp_nopush     on;</div><div class="line"></div><div class="line">	#keepalive_timeout  0;</div><div class="line">	keepalive_timeout  65;</div><div class="line"></div><div class="line">	#gzip  on;</div><div class="line"></div><div class="line">	upstream local_tomcat &#123;  </div><div class="line">		server localhost:8081 weight=1;  </div><div class="line">		server localhost:8082 weight=5;  </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	server &#123;</div><div class="line">		listen       80;</div><div class="line">		server_name  localhost;</div><div class="line"></div><div class="line">		#charset koi8-r;</div><div class="line"></div><div class="line">		#access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">		#location / &#123;</div><div class="line">		#    root   html;</div><div class="line">		#    index  index.html index.htm;</div><div class="line">		#&#125;		</div><div class="line">		location / &#123;  </div><div class="line">			proxy_pass http://local_tomcat;  </div><div class="line">		&#125;  </div><div class="line">		</div><div class="line">		error_page   500 502 503 504  /50x.html;</div><div class="line">		location = /50x.html &#123;</div><div class="line">			root   html;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上：我们做到了多台tomcat 但是我们也能做到tomcat的简单升级，并且实现实例的负载均衡，已经应用的主备，在也不用担心应用挂掉而睡不了觉了。<br>缺点：nginx依然存在单点的问题。</p>
<p>本次的实验资源供下载：<a href="http://download.csdn.net/detail/a82793510/9687715" target="_blank" rel="external">http://download.csdn.net/detail/a82793510/9687715</a></p>
<h1 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h1><p>如果是在资源有限的情况下，已经选择了单机，证明不是有钱荏，我一般会把上面的权去掉，在这样我们就可以在一台tomcat应用服务器挂掉的情况下，才会访问备机Tomcat应用服务器。<br>如果只是应用的情况下，这样已经足够了。用基于IP分发的策略已经能解决绝大部分需求。 </p>
<h1 id="资源进一步极端化"><a href="#资源进一步极端化" class="headerlink" title="资源进一步极端化"></a>资源进一步极端化</h1><p>现在，我们在这台单机上已经部署了一个应用app1, 假设现在我司实在是资源太紧缺了，我们又要在这台机子上，部署另外一个应用app2。<br>那么现在我们就要对Nginx 和 Tomcat 进行改动。<br>改动一般分为2种方法：2级域名改动 或 2级目录改动。<br>先来在上面的基础上说说二级目录改动：<br>按照我们上面的，我们的目标的架构：我们已经部署了一个应用程序：some.war ，现在我要采用二级目录方式部署另外的一个应用程序：app.war。<br>那么我会在上面的基础上做如下的修改：localhost 可以修改为自己的域名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;localhost/some&quot; appBase=&quot;F:\data\www\a.ttlsa.com&quot;</div><div class="line">	  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class="line">	  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">	  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class="line">		&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class="line">	  &lt;/Context&gt;</div><div class="line">&lt;/Host&gt;</div><div class="line">&lt;Host name=&quot;localhost/app&quot; appBase=&quot;F:\data\www\b.ttlsa.com&quot;</div><div class="line">	  unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</div><div class="line">	  xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">	  &lt;Context path=&quot;&quot; docBase=&quot;&quot;  reloadable=&quot;true&quot;&gt;</div><div class="line">		&lt;valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; /&gt;</div><div class="line">	  &lt;/Context&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<p>另外的一台的service.xml 也同样如此配置。<br>nginx中的localhost 可以修改为自己的域名 如 mp.hello.io </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">     listen       80;</div><div class="line">     server_name  localhost; // 可以修改为自己的域名</div><div class="line">      </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>二级域名的改动，<br>前提：我们有一个顶级域名：如 hello.io 这样的一个顶级域名：<br>那么，我们现在可以这样做：<br>现在万网中配置一下我们的二级域名，如som.hello.io和app.hello.io 都要在万网中指向我们的服务器Ip 地址。<br>在增加二级域名的情况下，我们可以新增2个是实例。<br>把Nginx修改为这样的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line">    upstream local_tomcat01 &#123;  </div><div class="line">        server localhost:8081;  </div><div class="line">        server localhost:8082;  </div><div class="line">    &#125; </div><div class="line">	 upstream local_tomcat02 &#123;  </div><div class="line">        server localhost:8083;  </div><div class="line">        server localhost:8084;  </div><div class="line">    &#125; </div><div class="line">	    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  some.hello.io;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        #location / &#123;</div><div class="line">        #    root   html;</div><div class="line">        #    index  index.html index.htm;</div><div class="line">        #&#125;        </div><div class="line">        location / &#123;  </div><div class="line">            proxy_pass http://local_tomcat02;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  app.hello.io;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        #location / &#123;</div><div class="line">        #    root   html;</div><div class="line">        #    index  index.html index.htm;</div><div class="line">        #&#125;        </div><div class="line">        location / &#123;  </div><div class="line">            proxy_pass http://local_tomcat02;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>此外，修改一下，Tomcat 的端口就可以了，同时80 81， 指向一个实例，83 84 指向另外一个实例（appBase中指定）。这样就可以做到程序的主备操作。</p>
<p>备注：service_name 的名称可以是ip 地址。<br>nginx在配置upstream时，有两个参数：<br>ip_hash（同一IP一直使用同一台server服务）<br>weight（server的使用权重，数值越大，nginx分发的请求越多） </p>
<p>通过配合这两个参数，能粗糙地解决session共享的问题。<br>对于一些不是太依赖session的应用，或者只有用户登录时保存，那么我认为可以用Cookies代替。<br>即使真的要Session共享，我认为手动写代码保存到Memcached比为Tomcat加插件好，这样能获得更好的可控性。<br>而且我不用Tomcat，用Redis，这个msm就用不上啦，不过我会按照我的思想实现session共享，呵呵，个人愚见！</p>
<p><a href="/img/2016/11/tomcat06.png"><img src="/img/2016/11/tomcat06.png" alt="tomcat架构" title="title"></a></p>
<p>最后我们的架构是这样的。在这样的解构下，我们无论是修改为 二级目录 亦或是二级域名，我们运维都只是要做很小的改动就能切换。配置和源码分离的结构，对我们以后的扩展为分布式应用，还是依然是单机的传统结构都是进可以攻退以守。<br>留有余地，唯一不足就是nginx的单点问题，不过就单机体系来说已经够用了。</p>
<h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>上面不架构已经是属于在单机上做了一个简单的集群了，要实现Tomcat。<br>要多台机器，只要修改上面Nginx的分发的Ip 就可，但是会话共享是一个很大的问题，但是，用基于IP分发的策略已经能解决绝大部分需求。<br>这里已经脱离了我们单机应用的主题，以后有机会探讨。</p>
<hr>
<blockquote>
<p>参考文章：<br><a href="http://www.cnblogs.com/tq03/p/3507658.html" target="_blank" rel="external">http://www.cnblogs.com/tq03/p/3507658.html</a><br><a href="http://www.itnose.net/detail/6658488.html" target="_blank" rel="external">http://www.itnose.net/detail/6658488.html</a><br><a href="http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/" target="_blank" rel="external">http://www.ttlsa.com/tomcat/config-multi-tomcat-instance/</a><br><a href="http://www.cnblogs.com/_popc/p/4167516.html" target="_blank" rel="external">http://www.cnblogs.com/_popc/p/4167516.html</a><br><a href="http://www.itnose.net/detail/6485584.html" target="_blank" rel="external">http://www.itnose.net/detail/6485584.html</a><br><a href="http://www.itnose.net/detail/6521677.html" target="_blank" rel="external">http://www.itnose.net/detail/6521677.html</a><br><a href="http://www.itnose.net/detail/6448554.html" target="_blank" rel="external">http://www.itnose.net/detail/6448554.html</a><br><a href="http://www.aikaiyuan.com/7907.html" target="_blank" rel="external">http://www.aikaiyuan.com/7907.html</a><br><a href="http://blog.csdn.net/cclovett/article/details/26377269" target="_blank" rel="external">http://blog.csdn.net/cclovett/article/details/26377269</a> (nginx)<br><a href="http://www.roncoo.com/article/detail/125185" target="_blank" rel="external">http://www.roncoo.com/article/detail/125185</a></p>
</blockquote>
<hr>
<p><a href="/css/images/mm_facetoface_collect.png"><img src="/css/images/mm_facetoface_collect.png" alt="tomcat架构" title="title"></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java.security源码解读系列-运用加密技术保护Java源代码]]></title>
      <url>http://jbeacon.top/2016/11/18/jca/00/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
<ul>
<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>
<li>本文相关的JDK版本是JDK7,jdk8</li>
</ul>
</blockquote>
<hr>
<h1 id="为什么要加密？"><a href="#为什么要加密？" class="headerlink" title="为什么要加密？"></a>为什么要加密？</h1><p>对于传统的C或C++之类的语言来说，要在Web上保护源代码是很容易的，只要不发布它就可以。遗憾的是，Java程序的源代码很容易被别人偷看。只要有一个反编译器，任何人都可以分析别人的代码。Java的灵活性使得源代码很容易被窃取，但与此同时，它也使通过加密保护代码变得相对容易，我们唯一需要了解的就是Java的ClassLoader对象。当然，在加密过程中，有关Java Cryptography Extension（JCE）的知识也是必不可少的。</p>
<p>有几种技术可以“模糊”Java类文件，使得反编译器处理类文件的效果大打折扣。然而，修改反编译器使之能够处理这些经过模糊处理的类文件并不是什么难事，所以不能简单地依赖模糊技术来保证源代码的安全。</p>
<p>我们可以用流行的加密工具加密应用，比如PGP（Pretty Good Privacy）或GPG（GNU Privacy Guard）。这时，最终用户在运行应用之前必须先进行解密。但解密之后，最终用户就有了一份不加密的类文件，这和事先不进行加密没有什么差别。</p>
<p>Java运行时装入字节码的机制隐含地意味着可以对字节码进行修改。JVM每次装入类文件时都需要一个称为ClassLoader的对象，这个对象负责把新的类装入正在运行的JVM。JVM给ClassLoader一个包含了待装入类（比如java.lang.Object）名字的字符串，然后由ClassLoader负责找到类文件，装入原始数据，并把它转换成一个Class对象。</p>
<p>我们可以通过定制ClassLoader，在类文件执行之前修改它。这种技术的应用非常广泛――在这里，它的用途是在类文件装入之时进行解密，因此可以看成是一种即时解密器。由于解密后的字节码文件永远不会保存到文件系统，所以窃密者很难得到解密后的代码。</p>
<p>由于把原始字节码转换成Class对象的过程完全由系统负责，所以创建定制ClassLoader对象其实并不困难，只需先获得原始数据，接着就可以进行包含解密在内的任何转换。</p>
<p>Java 2在一定程度上简化了定制ClassLoader的构建。在Java 2中，loadClass的缺省实现仍旧负责处理所有必需的步骤，但为了顾及各种定制的类装入过程，它还调用一个新的findClass方法。</p>
<p>这为我们编写定制的ClassLoader提供了一条捷径，减少了麻烦：只需覆盖findClass，而不是覆盖loadClass。这种方法避免了重复所有装入器必需执行的公共步骤，因为这一切由loadClass负责。</p>
<p>不过，本文的定制ClassLoader并不使用这种方法。原因很简单。如果由默认的ClassLoader先寻找经过加密的类文件，它可以找到；但由于类文件已经加密，所以它不会认可这个类文件，装入过程将失败。因此，我们必须自己实现loadClass，稍微增加了一些工作量。</p>
<hr>
<a id="more"></a>
<h1 id="定制类装入器"><a href="#定制类装入器" class="headerlink" title="定制类装入器"></a>定制类装入器</h1><p>每一个运行着的JVM已经拥有一个ClassLoader。这个默认的ClassLoader根据CLASSPATH环境变量的值，在本地文件系统中寻找合适的字节码文件。</p>
<p>应用定制ClassLoader要求对这个过程有较为深入的认识。我们首先必须创建一个定制ClassLoader类的实例，然后显式地要求它装入另外一个类。这就强制JVM把该类以及所有它所需要的类关联到定制的ClassLoader。Listing 1显示了如何用定制ClassLoader装入类文件。<br>【Listing 1：利用定制的ClassLoader装入类文件】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/** 首先创建一个ClassLoader对象 **/</div><div class="line">ClassLoader myClassLoader = new myClassLoader();</div><div class="line">/** 利用定制ClassLoader对象装入类文件 **/</div><div class="line">/** 并把它转换成Class对象 **/</div><div class="line">Class myClass = myClassLoader.loadClass( &quot;mypackage.MyClass&quot; );</div><div class="line">/** 最后，创建该类的一个实例 **/</div><div class="line">Object newInstance = myClass.newInstance();</div><div class="line">/** 注意，MyClass所需要的所有其他类，都将通过 **</div><div class="line">/** 定制的ClassLoader自动装入 **/</div></pre></td></tr></table></figure></p>
<p>如前所述，定制ClassLoader只需先获取类文件的数据，然后把字节码传递给运行时系统，由后者完成余下的任务。</p>
<p>ClassLoader有几个重要的方法。创建定制的ClassLoader时，我们只需覆盖其中的一个，即loadClass，提供获取原始类文件数据的代码。这个方法有两个参数：类的名字，以及一个表示JVM是否要求解析类名字的标记（即是否同时装入有依赖关系的类）。如果这个标记是true，我们只需在返回JVM之前调用resolveClass。</p>
<p>【Listing 2：ClassLoader.loadClass()的一个简单实现】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    public Class loadClass( String name, boolean resolve )</div><div class="line">    throws ClassNotFoundException &#123;</div><div class="line">  try &#123;</div><div class="line">    /** 我们要创建的Class对象 **/</div><div class="line">     Class clasz = null;</div><div class="line">    /** 必需的步骤1：如果类已经在系统缓冲之中，**/</div><div class="line">    /** 我们不必再次装入它 **/</div><div class="line">    clasz = findLoadedClass( name );</div><div class="line">    if (clasz != null)</div><div class="line">      return clasz;</div><div class="line">    /** 下面是定制部分 **/</div><div class="line">    byte classData[] = /* 通过某种方法获取字节码数据 */;</div><div class="line">    if (classData != null) &#123;</div><div class="line">      /** 成功读取字节码数据，现在把它转换成一个Class对象 **/</div><div class="line">      clasz = defineClass( name, classData, 0, classData.length );</div><div class="line">    &#125;</div><div class="line">    /** 必需的步骤2：如果上面没有成功，**/</div><div class="line">    /** 我们尝试用默认的ClassLoader装入它 **/</div><div class="line">    if (clasz == null)</div><div class="line">      clasz = findSystemClass( name );</div><div class="line">    /** 必需的步骤3：如有必要，则装入相关的类 **/</div><div class="line">    if (resolve &amp;&amp; clasz != null)</div><div class="line">      resolveClass( clasz );</div><div class="line">    /** 把类返回给调用者 **/</div><div class="line">    return clasz;</div><div class="line">  &#125; catch( IOException ie ) &#123;</div><div class="line">    throw new ClassNotFoundException( ie.toString() );</div><div class="line">  &#125; catch( GeneralSecurityException gse ) &#123;</div><div class="line">    throw new ClassNotFoundException( gse.toString() );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Listing 2显示了一个简单的loadClass实现。代码中的大部分对所有ClassLoader对象来说都一样，但有一小部分（已通过注释标记）是特有的。在处理过程中，ClassLoader对象要用到其他几个辅助方法：</p>
<ul>
<li>findLoadedClass：用来进行检查，以便确认被请求的类当前还不存在。loadClass方法应该首先调用它。</li>
<li>defineClass：获得原始类文件字节码数据之后，调用defineClass把它转换成一个Class对象。任何loadClass实现都必须调用这个方法。</li>
<li>findSystemClass：提供默认ClassLoader的支持。如果用来寻找类的定制方法不能找到指定的类（或者有意地不用定制方法），则可以调用该方法尝试默认的装入方式。这是很有用的，特别是从普通的JAR文件装入标准Java类时。</li>
<li>resolveClass：当JVM想要装入的不仅包括指定的类，而且还包括该类引用的所有其他类时，它会把loadClass的resolve参数设置成true。这时，我们必须在返回刚刚装入的Class对象给调用者之前调用resolveClass。</li>
</ul>
<hr>
<h1 id="加密、解密"><a href="#加密、解密" class="headerlink" title="加密、解密"></a>加密、解密</h1><p>Java加密扩展即Java Cryptography Extension，简称JCE。它是Sun的加密服务软件，包含了加密和密匙生成功能。JCE是JCA（Java Cryptography Architecture）的一种扩展。</p>
<p>JCE没有规定具体的加密算法，但提供了一个框架，加密算法的具体实现可以作为服务提供者加入。除了JCE框架之外，JCE软件包还包含了SunJCE服务提供者，其中包括许多有用的加密算法，比如DES（Data Encryption Standard）和Blowfish。</p>
<p>为简单计，在本文中我们将用DES算法加密和解密字节码。下面是用JCE加密和解密数据必须遵循的基本步骤：</p>
<ul>
<li>步骤1：生成一个安全密匙。在加密或解密任何数据之前需要有一个密匙。密匙是随同被加密的应用一起发布的一小段数据，Listing 3显示了如何生成一个密匙。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/* DES算法要求有一个可信任的随机数源 */</div><div class="line">SecureRandom sr = new SecureRandom();</div><div class="line">/* 为我们选择的DES算法生成一个KeyGenerator对象 */</div><div class="line">KeyGenerator kg = KeyGenerator.getInstance( &quot;DES&quot; );</div><div class="line">kg.init( sr );</div><div class="line">/*生成密匙 */</div><div class="line">SecretKey key = kg.generateKey();</div><div class="line">/* 获取密匙数据 */</div><div class="line">byte rawKeyData[] = key.getEncoded();</div><div class="line">/* 接下来就可以用密匙进行加密或解密，或者把它保存</div><div class="line">   为文件供以后使用 */</div><div class="line">doSomething( rawKeyData );</div></pre></td></tr></table></figure>
<ul>
<li>步骤2：加密数据。得到密匙之后，接下来就可以用它加密数据。除了解密的ClassLoader之外，一般还要有一个加密待发布应用的独立程序（见Listing 4）。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/* DES算法要求有一个可信任的随机数源 */</div><div class="line">SecureRandom sr = new SecureRandom();</div><div class="line">byte rawKeyData[] = /* 用某种方法获得密匙数据 */;</div><div class="line">/* 从原始密匙数据创建DESKeySpec对象 */</div><div class="line">DESKeySpec dks = new DESKeySpec( rawKeyData );</div><div class="line">/* 创建一个密匙工厂，然后用它把DESKeySpec转换成 */</div><div class="line">/* 一个SecretKey对象 */</div><div class="line">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class="line">SecretKey key = keyFactory.generateSecret( dks );</div><div class="line">/* Cipher对象实际完成加密操作 */</div><div class="line">Cipher cipher = Cipher.getInstance( &quot;DES&quot; );</div><div class="line">/* 用密匙初始化Cipher对象 */</div><div class="line">cipher.init( Cipher.ENCRYPT_MODE, key, sr );</div><div class="line">/* 现在，获取数据并加密 */</div><div class="line">byte data[] = /* 用某种方法获取数据 */</div><div class="line">/* 正式执行加密操作 */</div><div class="line">byte encryptedData[] = cipher.doFinal( data );</div><div class="line">/* 进一步处理加密后的数据 */</div><div class="line">doSomething( encryptedData );</div></pre></td></tr></table></figure>
<ul>
<li>步骤3：解密数据。运行经过加密的应用时，ClassLoader分析并解密类文件。操作步骤如Listing 5所示。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/* DES算法要求有一个可信任的随机数源 */</div><div class="line">SecureRandom sr = new SecureRandom();</div><div class="line">byte rawKeyData[] = /* 用某种方法获取原始密匙数据 */;</div><div class="line">/* 从原始密匙数据创建一个DESKeySpec对象 */</div><div class="line">DESKeySpec dks = new DESKeySpec( rawKeyData );</div><div class="line">/* 创建一个密匙工厂，然后用它把DESKeySpec对象转换成 */</div><div class="line">/* 一个SecretKey对象 */</div><div class="line">SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class="line">SecretKey key = keyFactory.generateSecret( dks );</div><div class="line">/* Cipher对象实际完成解密操作 */</div><div class="line">Cipher cipher = Cipher.getInstance( &quot;DES&quot; );</div><div class="line">/* 用密匙初始化Cipher对象 */</div><div class="line">cipher.init( Cipher.DECRYPT_MODE, key, sr );</div><div class="line">/* 现在，获取数据并解密 */</div><div class="line">byte encryptedData[] = /* 获得经过加密的数据 */</div><div class="line">/* 正式执行解密操作 */</div><div class="line">byte decryptedData[] = cipher.doFinal( encryptedData );</div><div class="line">/* 进一步处理解密后的数据 */</div><div class="line">doSomething( decryptedData );</div></pre></td></tr></table></figure>
<hr>
<h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p>前面介绍了如何加密和解密数据。要部署一个经过加密的应用，步骤如下：</p>
<ul>
<li>1、步骤1：创建应用。我们的例子包含一个App主类，两个辅助类（分别称为Foo和Bar）。这个应用没有什么实际功用，但只要我们能够加密这个应用，加密其他应用也就不在话下。</li>
<li>2、步骤2：生成一个安全密匙。在命令行，利用GenerateKey工具（参见GenerateKey.java）把密匙写入一个文件：<br>   % java GenerateKey key.data</li>
<li>3、步骤3：加密应用。在命令行，利用EncryptClasses工具（参见EncryptClasses.java）加密应用的类：<br>   % java EncryptClasses key.data App.class Foo.class Bar.class<br>该命令把每一个.class文件替换成它们各自的加密版本</li>
</ul>
<p>步骤4：运行经过加密的应用。用户通过一个DecryptStart程序运行经过加密的应用。DecryptStart程序如Listing 6所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">import java.io.*;</div><div class="line">import java.security.*;</div><div class="line">import java.lang.reflect.*;</div><div class="line">import javax.crypto.*;</div><div class="line">import javax.crypto.spec.*;</div><div class="line">public class DecryptStart extends ClassLoader</div><div class="line">&#123;</div><div class="line">  /* 这些对象在构造函数中设置， */</div><div class="line">  /* 以后loadClass()方法将利用它们解密类 */</div><div class="line">  private SecretKey key;</div><div class="line">  private Cipher cipher;</div><div class="line">  /* 构造函数：设置解密所需要的对象 */</div><div class="line">  public DecryptStart( SecretKey key ) throws GeneralSecurityException,</div><div class="line">      IOException &#123;</div><div class="line">    this.key = key;</div><div class="line">    String algorithm = &quot;DES&quot;;</div><div class="line">    SecureRandom sr = new SecureRandom();</div><div class="line">    System.err.println( &quot;[DecryptStart: creating cipher]&quot; );</div><div class="line">    cipher = Cipher.getInstance( algorithm );</div><div class="line">    cipher.init( Cipher.DECRYPT_MODE, key, sr );</div><div class="line">  &#125;</div><div class="line">  /* main过程：我们要在这里读入密匙，创建DecryptStart的 */</div><div class="line">  /* 实例，它就是我们的定制ClassLoader。 */</div><div class="line">  /* 设置好ClassLoader以后，我们用它装入应用实例， */</div><div class="line">  /* 最后，我们通过Java Reflection API调用应用实例的main方法 */</div><div class="line">  static public void main( String args[] ) throws Exception &#123;</div><div class="line">    String keyFilename = args[0];</div><div class="line">    String appName = args[1];</div><div class="line">     /* 这些是传递给应用本身的参数 */</div><div class="line">    String realArgs[] = new String[args.length-2];</div><div class="line">    System.arraycopy( args, 2, realArgs, 0, args.length-2 );</div><div class="line">    /* 读取密匙 */</div><div class="line">    System.err.println( &quot;[DecryptStart: reading key]&quot; );</div><div class="line">    byte rawKey[] = Util.readFile( keyFilename );</div><div class="line">    DESKeySpec dks = new DESKeySpec( rawKey );</div><div class="line">    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance( &quot;DES&quot; );</div><div class="line">    SecretKey key = keyFactory.generateSecret( dks );</div><div class="line">    /* 创建解密的ClassLoader */</div><div class="line">    DecryptStart dr = new DecryptStart( key );</div><div class="line">    /* 创建应用主类的一个实例 */</div><div class="line">    /* 通过ClassLoader装入它 */</div><div class="line">    System.err.println( &quot;[DecryptStart: loading &quot;+appName+&quot;]&quot; );</div><div class="line">    Class clasz = dr.loadClass( appName );</div><div class="line">    /* 最后，通过Reflection API调用应用实例 */</div><div class="line">    /* 的main()方法 */</div><div class="line">    /* 获取一个对main()的引用 */</div><div class="line">    String proto[] = new String[1];</div><div class="line">    Class mainArgs[] = &#123; (new String[1]).getClass() &#125;;</div><div class="line">    Method main = clasz.getMethod( &quot;main&quot;, mainArgs );</div><div class="line">    /* 创建一个包含main()方法参数的数组 */</div><div class="line">    Object argsArray[] = &#123; realArgs &#125;;</div><div class="line">    System.err.println( &quot;[DecryptStart: running &quot;+appName+&quot;.main()]&quot; );</div><div class="line">    /* 调用main() */</div><div class="line">    main.invoke( null, argsArray );</div><div class="line">  &#125;</div><div class="line">  public Class loadClass( String name, boolean resolve )</div><div class="line">      throws ClassNotFoundException &#123;</div><div class="line">    try &#123;</div><div class="line">      /* 我们要创建的Class对象 */</div><div class="line">      Class clasz = null;</div><div class="line">      /* 必需的步骤1：如果类已经在系统缓冲之中 */</div><div class="line">      /* 我们不必再次装入它 */</div><div class="line">      clasz = findLoadedClass( name );</div><div class="line">      if (clasz != null)</div><div class="line">        return clasz;</div><div class="line">      /* 下面是定制部分 */</div><div class="line">      try &#123;</div><div class="line">        /* 读取经过加密的类文件 */</div><div class="line">        byte classData[] = Util.readFile( name+&quot;.class&quot; );</div><div class="line">        if (classData != null) &#123;</div><div class="line">          /* 解密... */</div><div class="line">          byte decryptedClassData[] = cipher.doFinal( classData );</div><div class="line">          /* 再把它转换成一个类 */</div><div class="line">          clasz = defineClass( name, decryptedClassData,</div><div class="line">            0, decryptedClassData.length );</div><div class="line">          System.err.println( &quot;[DecryptStart: decrypting class &quot;+name+&quot;]&quot; );</div><div class="line">        &#125;</div><div class="line">      &#125; catch( FileNotFoundException fnfe ) &#123;</div><div class="line">      &#125;</div><div class="line">      /* 必需的步骤2：如果上面没有成功 */</div><div class="line">      /* 我们尝试用默认的ClassLoader装入它 */</div><div class="line">      if (clasz == null)</div><div class="line">        clasz = findSystemClass( name );</div><div class="line">      /* 必需的步骤3：如有必要，则装入相关的类 */</div><div class="line">      if (resolve &amp;&amp; clasz != null)</div><div class="line">        resolveClass( clasz );</div><div class="line">      /* 把类返回给调用者 */</div><div class="line">      return clasz;</div><div class="line">    &#125; catch( IOException ie ) &#123;</div><div class="line">      throw new ClassNotFoundException( ie.toString()</div><div class="line">);</div><div class="line">    &#125; catch( GeneralSecurityException gse ) &#123;</div><div class="line">      throw new ClassNotFoundException( gse.toString()</div><div class="line">);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于未经加密的应用，正常执行方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% java App arg0 arg1 arg2</div></pre></td></tr></table></figure>
<p>对于经过加密的应用，则相应的运行方式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">% java DecryptStart key.data App arg0 arg1 arg2</div></pre></td></tr></table></figure>
<p>DecryptStart有两个目的。一个DecryptStart的实例就是一个实施即时解密操作的定制ClassLoader；同时，DecryptStart还包含一个main过程，它创建解密器实例并用它装入和运行应用。示例应用App的代码包含在App.java、Foo.java和Bar.java内。Util.java是一个文件I/O工具，本文示例多处用到了它。完整的代码请从本文最后下载。</p>
<hr>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>我们看到，要在不修改源代码的情况下加密一个Java应用是很容易的。不过，世上没有完全安全的系统。本文的加密方式提供了一定程度的源代码保护，但对某些攻击来说它是脆弱的。<br>虽然应用本身经过了加密，但启动程序DecryptStart没有加密。攻击者可以反编译启动程序并修改它，把解密后的类文件保存到磁盘。降低这种风险的办法之一是对启动程序进行高质量的模糊处理。或者，启动程序也可以采用直接编译成机器语言的代码，使得启动程序具有传统执行文件格式的安全性。<br>另外还要记住的是，大多数JVM本身并不安全。狡猾的黑客可能会修改JVM，从ClassLoader之外获取解密后的代码并保存到磁盘，从而绕过本文的加密技术。Java没有为此提供真正有效的补救措施。<br>不过应该指出的是，所有这些可能的攻击都有一个前提，这就是攻击者可以得到密匙。如果没有密匙，应用的安全性就完全取决于加密算法的安全性。虽然这种保护代码的方法称不上十全十美，但它仍不失为一种保护知识产权和敏感用户数据的有效方案。</p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href="http://m635674608.iteye.com/blog/1844777（强推荐）" target="_blank" rel="external">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href="http://joshuasabrina.iteye.com/blog/1798245（强推荐）" target="_blank" rel="external">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）" target="_blank" rel="external">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href="http://www.cnblogs.com/NullPointException/p/5054082.html" target="_blank" rel="external">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[机器学习]]></title>
      <url>http://jbeacon.top/2016/11/12/rob/rob/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/im-qq/webqq-core" target="_blank" rel="external">webqq-core</a><br><a href="https://github.com/b3log/xiaov" target="_blank" rel="external">xiaov</a><br><a href="https://github.com/im-qq/webqq-core" target="_blank" rel="external">https://github.com/im-qq/webqq-core</a></p>
<p><a href="https://code.google.com/archive/p/iqq/" target="_blank" rel="external">https://code.google.com/archive/p/iqq/</a><br><a href="http://pan.baidu.com/share/home?uk=3071047022" target="_blank" rel="external">http://pan.baidu.com/share/home?uk=3071047022</a><br><a href="https://hacpai.com/article/1467011936362" target="_blank" rel="external">https://hacpai.com/article/1467011936362</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java.security源码解读系列-PKI.**Key**]]></title>
      <url>http://jbeacon.top/2016/11/12/jca/02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
<ul>
<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>
<li>本文相关的JDK版本是JDK7,jdk8</li>
</ul>
</blockquote>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="http://music.163.com/outchain/player?type=0&id=434934139&auto=1&height=430"></iframe>

<p>在翻看，jce 的源码中，笔者发现，jce中的源码都基本引用到了java.security 下的类；<br>通过上篇的导读，我们基本可以了解java.security 的基本架构的主要组成：</p>
<ul>
<li>PKI (public key infrastructure)</li>
<li>认证(authentication)</li>
<li>安全通信(secure conmmunication)</li>
<li>访问控制(access control)</li>
</ul>
<h1 id="PKI"><a href="#PKI" class="headerlink" title="PKI"></a>PKI</h1><p>PKI —— 公钥基础构件<br><strong>PKI</strong>是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。<br>Java平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。<br>java Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。<br>既然Provider 是如此总要的，好奇的我总是要去看看的：<br>看到该类的作者是：本杰明雷诺（Benjamin Renaud） 和 安德烈亚斯斯特本兹（Andreas Sterbenz）<br><strong>PKI</strong>相关的类可以在<strong>java.security</strong>和<strong>java.security.cert</strong>包下获取。</p>
<h1 id="PKI的组成"><a href="#PKI的组成" class="headerlink" title="PKI的组成"></a>PKI的组成</h1><ul>
<li><strong>密匙 key</strong></li>
<li><strong>证书 certificate</strong></li>
<li><strong>公钥加密 Public key encryption（PKE）</strong></li>
<li><strong>可信的证书颁发机构 CAS</strong></li>
</ul>
<h1 id="KeyStore"><a href="#KeyStore" class="headerlink" title="KeyStore"></a>KeyStore</h1><p>下面我们来说说密钥：<br>密钥在jdk 中，她主要是是通过 key store 来实现，相关涉及的类都是 XXkeyXX 这类的形式。我们先看看java.security.KeyStore类，在该类的类头部，注释已经说明她是一个用来存储密钥和证书的类或叫数据解构更加合适。<br>在KeyStore中包含了好几个内部类，蛮有意思的，包括Builder内部类数据解构的构建者，<br><strong>CallbackHandlerProtection</strong>,<br><strong>PasswordParameter</strong>,<br><strong>PrivateKeyEntry</strong>, 私钥，一个存储加密过的私钥，用来存储保护的信息，防止非法访问。<br><strong>SecretKeyEntry</strong>, 密钥<br><strong>SimpleLoadStoreParameter</strong>,<br><strong>TrustedCeritificateEntry</strong> 可信任证书，他包含一个单一的公钥，可以供给别人使用，我们称为可信任证书</p>
<p>要学习如何看源码，看源码的注释是必不可少的，幸运的是JKD的源码注释是那么的清晰。哈哈，感谢前人的努力。<br><strong>KeyStore</strong>是用来存储加密密钥和加密证书的存储解构，类的表头注释来了个开门见山。<br><strong>KeyStore</strong>可以支持不同的实体类型的存储结构，每一个类型都实现了内部的一个KeyStore.Entry 接口。<br>它支持一下的几种存储解构类型：</p>
<ul>
<li><strong>KeyStore.PrivateKeyEntry</strong><blockquote>
<p>这个存储解构持有 加密的 <strong>PrivateKey</strong>(私钥)，用来存储一个被保护的格式数据，防止被接近访问。同时他也会实现一个对公钥开放的证书链来供外部访问。<br>私钥和证书主要是个一个已经被授权的应用来访问私钥和证书链的。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">public static final class PrivateKeyEntry implements Entry &#123;</div><div class="line"></div><div class="line">    private final PrivateKey privKey; </div><div class="line">		</div><div class="line">    private final Certificate[] chain;</div><div class="line">    private final Set&lt;Attribute&gt; attributes;</div><div class="line"></div><div class="line">    public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain) &#123;</div><div class="line">        this(privateKey, chain, Collections.&lt;Attribute&gt;emptySet());</div><div class="line">    &#125;</div><div class="line">    public PrivateKeyEntry(PrivateKey privateKey, Certificate[] chain,</div><div class="line">       Set&lt;Attribute&gt; attributes) &#123;</div><div class="line"></div><div class="line">        if (privateKey == null || chain == null || attributes == null) &#123;</div><div class="line">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class="line">        &#125;</div><div class="line">        if (chain.length == 0) &#123;</div><div class="line">            throw new IllegalArgumentException</div><div class="line">                            (&quot;invalid zero-length input chain&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Certificate[] clonedChain = chain.clone();</div><div class="line">        String certType = clonedChain[0].getType();</div><div class="line">        for (int i = 1; i &lt; clonedChain.length; i++) &#123;</div><div class="line">            if (!certType.equals(clonedChain[i].getType())) &#123;</div><div class="line">                throw new IllegalArgumentException</div><div class="line">                            (&quot;chain does not contain certificates &quot; +</div><div class="line">                            &quot;of the same type&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (!privateKey.getAlgorithm().equals</div><div class="line">                    (clonedChain[0].getPublicKey().getAlgorithm())) &#123;</div><div class="line">            throw new IllegalArgumentException</div><div class="line">                            (&quot;private key algorithm does not match &quot; +</div><div class="line">                            &quot;algorithm of public key in end entity &quot; +</div><div class="line">                            &quot;certificate (at index 0)&quot;);</div><div class="line">        &#125;</div><div class="line">        this.privKey = privateKey;</div><div class="line"></div><div class="line">        if (clonedChain[0] instanceof X509Certificate &amp;&amp;</div><div class="line">            !(clonedChain instanceof X509Certificate[])) &#123;</div><div class="line"></div><div class="line">            this.chain = new X509Certificate[clonedChain.length];</div><div class="line">            System.arraycopy(clonedChain, 0,</div><div class="line">                            this.chain, 0, clonedChain.length);</div><div class="line">        &#125; else &#123;</div><div class="line">            this.chain = clonedChain;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        this.attributes =</div><div class="line">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class="line">    &#125;</div><div class="line">    public PrivateKey getPrivateKey() &#123;</div><div class="line">        return privKey;</div><div class="line">    &#125;</div><div class="line">    public Certificate[] getCertificateChain() &#123;</div><div class="line">        return chain.clone();</div><div class="line">    &#125;</div><div class="line">    public Certificate getCertificate() &#123;</div><div class="line">        return chain[0];</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class="line">        return attributes;</div><div class="line">    &#125;</div><div class="line">    public String toString() &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        sb.append(&quot;Private key entry and certificate chain with &quot;</div><div class="line">            + chain.length + &quot; elements:\r\n&quot;);</div><div class="line">        for (Certificate cert : chain) &#123;</div><div class="line">            sb.append(cert);</div><div class="line">            sb.append(&quot;\r\n&quot;);</div><div class="line">        &#125;</div><div class="line">        return sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>KeyStore.SecretKeyEntry</strong><blockquote>
<p>这个存储解构是存储加密过的<strong>SecretKey</strong>，来防止没授权访问。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public static final class SecretKeyEntry implements Entry &#123;</div><div class="line"></div><div class="line">    private final SecretKey sKey;</div><div class="line">    private final Set&lt;Attribute&gt; attributes;</div><div class="line">    public SecretKeyEntry(SecretKey secretKey) &#123;</div><div class="line">        if (secretKey == null) &#123;</div><div class="line">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class="line">        &#125;</div><div class="line">        this.sKey = secretKey;</div><div class="line">        this.attributes = Collections.&lt;Attribute&gt;emptySet();</div><div class="line">    &#125;</div><div class="line">    public SecretKeyEntry(SecretKey secretKey, Set&lt;Attribute&gt; attributes) &#123;</div><div class="line"></div><div class="line">        if (secretKey == null || attributes == null) &#123;</div><div class="line">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class="line">        &#125;</div><div class="line">        this.sKey = secretKey;</div><div class="line">        this.attributes =</div><div class="line">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class="line">    &#125;</div><div class="line">    public SecretKey getSecretKey() &#123;</div><div class="line">        return sKey;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class="line">        return attributes;</div><div class="line">    &#125;</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Secret key entry with algorithm &quot; + sKey.getAlgorithm();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>KeyStore.TrustedCertificateEntry</strong><blockquote>
<p>这个存储实体包含一个单一的公钥，证书是属于另外的一部分，被叫做可信任证书。因为<strong>StoreKey</strong>的拥有者，对这些证书是已经有明确的身份确认的。通过这类证书实体，我们可以用来实现授权第三方的用户。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public static final class TrustedCertificateEntry implements Entry &#123;</div><div class="line"></div><div class="line">    private final Certificate cert;</div><div class="line">    private final Set&lt;Attribute&gt; attributes;</div><div class="line">    public TrustedCertificateEntry(Certificate trustedCert) &#123;</div><div class="line">        if (trustedCert == null) &#123;</div><div class="line">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class="line">        &#125;</div><div class="line">        this.cert = trustedCert;</div><div class="line">        this.attributes = Collections.&lt;Attribute&gt;emptySet();</div><div class="line">    &#125;</div><div class="line">    public TrustedCertificateEntry(Certificate trustedCert,</div><div class="line">       Set&lt;Attribute&gt; attributes) &#123;</div><div class="line">        if (trustedCert == null || attributes == null) &#123;</div><div class="line">            throw new NullPointerException(&quot;invalid null input&quot;);</div><div class="line">        &#125;</div><div class="line">        this.cert = trustedCert;</div><div class="line">        this.attributes =</div><div class="line">            Collections.unmodifiableSet(new HashSet&lt;&gt;(attributes));</div><div class="line">    &#125;</div><div class="line">    public Certificate getTrustedCertificate() &#123;</div><div class="line">        return cert;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Set&lt;Attribute&gt; getAttributes() &#123;</div><div class="line">        return attributes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a string representation of this TrustedCertificateEntry.</div><div class="line">     * @return a string representation of this TrustedCertificateEntry.</div><div class="line">     */</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Trusted certificate entry:\r\n&quot; + cert.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="KeyStore使用："><a href="#KeyStore使用：" class="headerlink" title="KeyStore使用："></a>KeyStore使用：</h1><p>上述的实体类中，每个Entry都快可以有自己的实体别名。<br>使用KeyStore的一些常用方法：</p>
<ul>
<li><p>依赖于默认类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</div></pre></td></tr></table></figure>
</li>
<li><p>提供一个特殊的KeyStore类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KeyStore ks = KeyStore.getInstance(&quot;JKS&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>通过输入流来载入KeyStore</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</div><div class="line"></div><div class="line">/** get user password and file input stream*/</div><div class="line">char[] password = getPassword();</div><div class="line"></div><div class="line">try (FileInputStream fis = new FileInputStream(&quot;keyStoreName&quot;)) &#123;</div><div class="line"> ks.load(fis, password);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>构造一个空的KeyStore</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">KeyStore.ProtectionParameter protParam =</div><div class="line">    new KeyStore.PasswordProtection(password);</div><div class="line"></div><div class="line">/** get my private key**/</div><div class="line">KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)</div><div class="line">    ks.getEntry(&quot;privateKeyAlias&quot;, protParam);</div><div class="line">PrivateKey myPrivateKey = pkEntry.getPrivateKey();</div><div class="line"></div><div class="line">/** save my secret key**/</div><div class="line">javax.crypto.SecretKey mySecretKey;</div><div class="line">KeyStore.SecretKeyEntry skEntry =</div><div class="line">    new KeyStore.SecretKeyEntry(mySecretKey);</div><div class="line">ks.setEntry(&quot;secretKeyAlias&quot;, skEntry, protParam);</div><div class="line"></div><div class="line">/** store away the keystore**/</div><div class="line">try (FileOutputStream fos = new FileOutputStream(&quot;newKeyStoreName&quot;)) &#123;</div><div class="line">    ks.store(fos, password);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>下面，我们在来看看其他的<strong>Key</strong><br>Key 接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**@author Benjamin Renaud**/</div><div class="line">public interface Key extends java.io.Serializable &#123;</div><div class="line">    static final long serialVersionUID = 6603384152749567654L;</div><div class="line">	public String getAlgorithm(); // 获取加密算法名，如DSA,就是DSA算法的密钥。</div><div class="line">	public String getFormat();// 返回这个key的主要解码格式的名称,</div><div class="line">	public byte[] getEncoded();//返回Key的解码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在来看看KeyException 类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**@author Benjamin Renaud**/</div><div class="line">public class KeyException extends GeneralSecurityException &#123;</div><div class="line">    public KeyException() &#123;</div><div class="line">        super();</div><div class="line">    &#125;</div><div class="line">	public KeyException(String msg) &#123;</div><div class="line">        super(msg);</div><div class="line">    &#125;</div><div class="line">	public KeyException(String message, Throwable cause) &#123;</div><div class="line">        super(message, cause);</div><div class="line">    &#125;</div><div class="line">	public KeyException(Throwable cause) &#123;</div><div class="line">        super(cause);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是比较常见的异常类，在Key 的算法返回值为null 时会抛出该异常。他的父级异常 GeneralSecurityException 和Exception 类跟他的构造方法类是。</p>
<p>KeyFactory 类：<br>从名字中，就能知道这是一个工厂方法的类。这个类是在1.2版本中加入的，作者部署本杰明雷，而是Jan Luehe<br>这个类主要是用来做 转换那些并不透明的加密密钥类型的Key，为一些按照特殊规范的透明Key,这是一个双向的过程。<br>Service Provider Interface(SPI)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class KeyFactory&#123;</div><div class="line">    private final String algorithm;</div><div class="line">	private Provider provider;</div><div class="line">	private volatile KeyFactorySpi spi;</div><div class="line">	private final Object lock = new Object();</div><div class="line">	private Iterator&lt;Service&gt; serviceIterator;</div><div class="line">	</div><div class="line">	protected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider,</div><div class="line">                         String algorithm)&#123;......&#125;</div><div class="line">	private KeyFactory(String algorithm) throws NoSuchAlgorithmException &#123;......&#125;</div><div class="line">	</div><div class="line">	public static KeyFactory getInstance(String algorithm)&#123;......&#125;</div><div class="line">    public static KeyFactory getInstance(String algorithm, String provider)</div><div class="line">            throws NoSuchAlgorithmException, NoSuchProviderException &#123;......&#125;</div><div class="line">    public static KeyFactory getInstance(String algorithm, Provider provider)</div><div class="line">            throws NoSuchAlgorithmException &#123;......&#125;</div><div class="line">			</div><div class="line">	public final Provider getProvider() &#123;</div><div class="line">        synchronized (lock) &#123;</div><div class="line">            serviceIterator = null;</div><div class="line">            return provider;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">	public final String getAlgorithm() &#123;</div><div class="line">        return this.algorithm;</div><div class="line">    &#125;</div><div class="line">	private KeyFactorySpi nextSpi(KeyFactorySpi oldSpi) &#123;/** keyFactory 分派key **/</div><div class="line">        synchronized (lock) &#123;</div><div class="line">		    ......</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public final PublicKey generatePublic(KeySpec keySpec)</div><div class="line">            throws InvalidKeySpecException &#123;.......&#125;</div><div class="line">	public final PrivateKey generatePrivate(KeySpec keySpec)</div><div class="line">            throws InvalidKeySpecException &#123;......&#125;</div><div class="line">	public final &lt;T extends KeySpec&gt; T getKeySpec(Key key, Class&lt;T&gt; keySpec)</div><div class="line">            throws InvalidKeySpecException &#123;......&#125;		</div><div class="line">	public final Key translateKey(Key key) throws InvalidKeyException &#123;......&#125;		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>KeyFactorySpi 抽象类：<br>继承这个类中的所有抽象方法必须实现由 provider 供应关键工厂特定的实现算法。<br>KeyPair 类：<br>同时持有公钥和私钥。</p>
<p>此外，在<em>java.security.spec</em> 下面，也提供了很多的<strong>XXKeyXX</strong>的实现，这是由于历史的原因没有放到<strong>java.security.* </strong>下面。<br>如：<br><strong>java.security.spec.KeySpec;</strong> 接口， All key specifications must implement this interface. 源码的注释中已经说明了，所有的规格化的Key都必须要实现这个接口。<br><strong>java.security.spec.PKCS8EncodedKeySpec;</strong> 这是一套解码规范。PKCS#8 标准<br><strong>java.security.spec.X509EncodedKeySpec;</strong>  这是一套解码规范，X.509 标准</p>
<p>他们都同一实现了keySpe 接口。</p>
<p>在java.security.interface 中定义了各种special key 的接口实现。</p>
<h1 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h1><p>在 java.security.cert 中有各种证书的实现, 都是XXCertXX<br>其中，的 CertStore 和 KeyStore 的结构类似。<br>证书是 ， 密钥外的另外一种加密方式。</p>
<blockquote>
<p>参考文章：<br><a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a><br><a href="http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href="http://m635674608.iteye.com/blog/1844777（强推荐）" target="_blank" rel="external">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href="http://joshuasabrina.iteye.com/blog/1798245（强推荐）" target="_blank" rel="external">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）" target="_blank" rel="external">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href="http://www.cnblogs.com/NullPointException/p/5054082.html" target="_blank" rel="external">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java.security源码解读系列-总体导读]]></title>
      <url>http://jbeacon.top/2016/11/12/jca/01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>导读：</p>
<ul>
<li>这是个人阅读jdk 源码的一个系列，java.security时写的文章，希望写该篇文章，能加深自己对于java语言的理解。</li>
<li>本文相关的JDK版本是JDK7,jdk8</li>
</ul>
</blockquote>
<p>Java平台(Java运行时环境，即JVM + Java API) 在多个层面上提供了security机制，在工作中常用的安全加密一般是采用jdk和spring-security提供的算法。</p>
<h1 id="jdk-中加解密相关类"><a href="#jdk-中加解密相关类" class="headerlink" title="jdk 中加解密相关类"></a>jdk 中加解密相关类</h1><p>java的自带的加解密的算法，主要是由rt.jar下java.security 和 jce.jar（Java Cryptography Extension）加密扩展包下面的类来实现。<br>安全API中包含的各种类和接口为如下这些：</p>
<ul>
<li>java.security中</li>
<li>java.security.spec</li>
<li>java.security.interfaces</li>
<li>javax.crypto</li>
<li>javax.crypto.spec</li>
<li>方法javax.crypto.interfaces<br>通过阅java的加解密源码，目的是为了有经验的程序员，希望创建自己的提供程序包提供加密服务的实现。</li>
</ul>
<a id="more"></a>
<h1 id="JCE框架"><a href="#JCE框架" class="headerlink" title="JCE框架"></a>JCE框架</h1><p>jdk自身并没有实现了加解密的主要是jce.jar , jac 主要包括2个软件组件：</p>
<ul>
<li>框架，定义并支持加密服务提供商提供实现。该框架包括软件包，比如rt.jar中的java.security中的类，jce.jar 中的javax.crypto 、javax.crypto.spec javax.interfaces</li>
<li>实际提供了SUNJCE，SunRsaSign, 其中包含实际的加密实现，在sun.security 下有MD5 DSA等加解密的具体实现，在jdk8中发现JCE已经废除使用sun.securit 下的接口了<br>对于JCE的详情，可以参考这篇文章<a href="http://m635674608.iteye.com/blog/1844777" target="_blank" rel="external">http://m635674608.iteye.com/blog/1844777</a></li>
</ul>
<h1 id="阅读源码如何入手"><a href="#阅读源码如何入手" class="headerlink" title="阅读源码如何入手"></a>阅读源码如何入手</h1><p>首先，我要明确自己阅读源码的目的，我这次阅读源码的目的是搞清楚jdk下实现的加解密机制，提供的方法，是我要自定义加解密应该如何实现，虽然不知到自己能不能做到自己实现（尽管有很多加解密的实现了，工作中不提倡轮子，但学习上提倡鲁轮子，so,就硬着头皮上了）。<br>但是，在阅读源码的时候，必须要了解源码的设计背景和理念，不然会不知所措，无从看起，起码对于我这个菜鸟是这样，嘿嘿嘿，自黑一把。<br>为此，我门先要了解JDK源码。<br><img src="http://img.blog.csdn.net/20131204171127140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmJpcmRza3k=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"><br>我们通常所说的JDK 包，一般是指rt.jar 下的包，其他的jar 包一般是提供商提供的或有SUN公司提供的，里面多多少少或有sun以前的代码影子，毕竟是发明者啊！他们是随时可能被代码重构的，并不能保证jdk的跨平台调用等特性。<br>jdk 下的包，一般会分为：Java.<em>、javax.</em>包，org.*包<br>1、作为J2SE的API公开接口的一部分，与操作系统无关可以在所有Java平台上运行；<br>2、不同的jdk版本会保持兼容不会轻易变化，提供API文档及源码(src.zip)。</p>
<p>sun.<em>包：<br>1、不是API公开接口的一部分，调用sun包的程序并不能确保工作在所有Java平台上，不同的操作系统中的实现可能不相同。<br>2、不同的jdk版本sun包中的类也可能不定期的变化，因此sun.</em>包中的类没有提供API文档及源码。</p>
<blockquote>
<p>注意：平台无关性是Java语言最大的优势之一，从技术上讲，并不能防止你的程序调用sun.<em>包中的类。在JDK版本的变迁当中，这些类可能会被删除或转移到其它包路径下，而且它的接口（包括名称、标签等）也很有可能发生变化，在这种情况下，即便你希望程序仅仅运行在SUN的实现平台下，你仍将承受新的版本给你的系统带来破坏的风险。总之，编写依赖于sun.</em>包的Java程序是不安全的，他们将变得无法移植、破坏了程序的平台无法性、也无法被JDK各版本所兼容。</p>
</blockquote>
<p>javax.*包:<br>是指基于rt.jar 所做的扩展包，一般是由提供商提供。</p>
<p>org.*包：<br>是指由开源社区或非盈利组织提供的源码。这一般很少出现在jdk中。</p>
<h1 id="强大的Security-API"><a href="#强大的Security-API" class="headerlink" title="强大的Security API"></a>强大的Security API</h1><p>在次处，不再罗列出Java core 和JVM提供的一些security相关机制.如private, public, protected, package等安全机制。<br>在这里，重点说说Security API。<br>这套API覆盖了密码相关的功能、PKI (public key infrastructure)、认证(authentication)、安全通信(secure conmmunication)、访问控制(access control)等方方面面。接下来我们将重点介绍这部分的内容。</p>
<h1 id="Basic-Security-Architecture"><a href="#Basic-Security-Architecture" class="headerlink" title="Basic Security Architecture"></a>Basic Security Architecture</h1><p>Security 基础架构<br>java Security API提供了可互操作的算法和安全服务的实现。服务以provider的形式实现，可以以插件的形式植入应用程序中。程序员可以透明地使用这些服务，如此使得程序员可以集中精力在如何把安全组件集成到自己的应用程序中，而不是去实现这些安全功能。此外，除了Java提供的安全服务外，用户可以编写自定义的security provider，按需扩展Java的security平台。<br>扩展Java的security平台的库在许多框架中都有自己的实现。如：spring-security模块中org.springframework.security，这里有具体的实现。</p>
<h1 id="Security-Provider"><a href="#Security-Provider" class="headerlink" title="Security Provider"></a>Security Provider</h1><p>java.security.Provider抽象了Java security provider。它指定了provider的名字，罗列了它实现的安全服务。多个provider可能同时被配置，他们会以优先级排列。当一个安全服务收到请求，这个服务的最高优先级的provider提供服务。<br>应用通过相关的getInstance方法来获得安全服务，比如：调用java.security.MessageDigest的getInstance方法来获得一个message digest 算法(MD5)。<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html" target="_blank" rel="external">例子源于Java官网</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</div></pre></td></tr></table></figure>
<p><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html" target="_blank" rel="external">jdk中的Provider者算法</a></p>
<h1 id="Cryptography-Arthitecture-JCA"><a href="#Cryptography-Arthitecture-JCA" class="headerlink" title="Cryptography Arthitecture (JCA)"></a>Cryptography Arthitecture (JCA)</h1><p>密码架构<br>Java的Cryptography架构是一个提供访问和开发密码功能的框架。它提供了许多cryptographic服务：</p>
<ul>
<li>Message digest algorithms 【信息摘要算法, 如：MD5】</li>
<li>Digital signature algorithms 【数字签名算法，DSA】</li>
<li>Symmetric bulk encryption  【对称块加密， 如：DES】</li>
<li>Symmetric stream encryption 【对称流加密， 如：RC4】</li>
<li>Asymmetric encryption 【非对称加密， 如：RSA】</li>
<li>Password-based encryption (PBE) 【密码加密】</li>
<li>Elliptic Curve Cryptography (ECC) 【椭圆曲线加密】</li>
<li>Key agreement algorithms 【key协议算法】</li>
<li>Key generators 【key生成器】</li>
<li>Message Authentication Codes (MACs) 【消息认证码】</li>
<li>(Pseudo-)random number generators 【伪随机数生成器】<br>因为历史原因，Cryptography API位于两个独立的包内：<br>java.security(Signature, MessageDigest)和javax.crypto(Cipher, KeyAgreement)。<br>参考：<a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a></li>
</ul>
<p>Java内置的Provider提供了许多通用的密码算法，比如：RSA, DSA, ECDSA等签名算法、DES, AES, ARCFOUR等加密算法、MD5, SHA-1, SHA-256等信息摘要算法、还有Diffie-Hellman和ECDH这样的密钥协商算法。<br>此外，还有一些特殊的provider。</p>
<p>比如SunPKCS11， 它允许Java代码无缝地使用PKCS#11的compliant tokens。<br>在Windows平台上，Java还提供了一些native的Provider去连接本地的 Microsoft CryptoAPI。这个provider的名字叫MSCAPI。它允许Java应用无缝地使用Windows平台的cryptographic service。</p>
<h1 id="Public-Key-Infrastructure-PKI"><a href="#Public-Key-Infrastructure-PKI" class="headerlink" title="Public Key Infrastructure(PKI)"></a>Public Key Infrastructure(PKI)</h1><p>公钥基础构件<br>PKI是一个术语，主要用于描述一类基于公钥的安全信息交互框架。它允许identity，比如人或者组织，绑定在数字证书上，并且提供一种验证证书的方法。PKI包括了密钥、证书、公钥加密和可信的证书颁发机构(CAs，用于生成和签署证书)。<br>Java平台提供API和provider支持X.509、CRLs、PKIX证书路径的构建和验证。PKI相关的类可以在java.security和java.security.cert包下获取。</p>
<p>密钥和证书的仓库<br>Java提供了长期持久化密钥和证书的功能。它通过key store和certificate store来实现。java.security.KeyStore这个类代表了一个key store，一个安全的，用于存储密码和可信证书的仓库。java.security.cert.CertStore类代表了一个certificate store，用于存储不相关的，不受信的证书。同样它可以存储CRLs。<br>Java平台包含标准的PKCS#11和PKCS#12 key store类型，此外还有一个基于文件的key store类型，叫做JKS(Java Key Store)。Java平台内置了一个名叫cacerts的特殊JKS，它为CA证书提供一个默认的密钥库。<br>SunPKCS11(之前在密码架构小节有提过哦)包含了一个PKCS#11的key store实现。这意味着安全硬件(比如：smartcard)的密钥和证书可以被Java应用所使用。<br>此外，Java平台提供了LDAP的certificate store类型用于访问存放在LDAP中的证书。还有一个certificate type用于访问存放在java.util.Collection中的证书。</p>
<p>PKI Tools<br>Java提供了两个内置的工具帮助用户使用密钥，证书和Key store：keytool和jarsigner。<br>keytool用于创建和管理key store。它可以</p>
<ul>
<li>创建公钥私钥对</li>
<li>显示，导入、导出X.509 v1, v2, v3的证书</li>
<li>创建自签名证书</li>
<li>基于证书请求创建证书</li>
<li>导入证书回复(certificate reply)【在外部CA颁发证书之后，会受到一个回复，该回复通常是一个PKCS7编码的证书】</li>
<li>指定公钥证书为可信<br>jarsigner用于给JAR文件签名或者验证已经签名的JAR包。 </li>
</ul>
<h1 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h1><p>认证<br>Authentication是确认用户身份的过程。在Java运行时环境的上下文中，指认证执行Java程序用户的过程。在这种情况下，这个过程依赖于在Cryptography小节描述到的一些服务。</p>
<p>Java平台提供API，用户可以通过插件式的登录模块为应用提供用户认证功能。应用调用LoginContext类(在javax.security.auth.login包内)，它依赖于配置。该配置指定了哪个登录模块(所有登录模块必须实现javax.security.auth.spi.LoginModule接口)为应用提供实际的认证功能。<br>应用只使用标准的LoginContext API， 所以能保持对于底层插件模块的独立性。新的模块可以被无缝地添加到应用中，不需要修改任何的应用代码。如下图：<br><img src="http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/3.jpg" alt="image"></p>
<p>Java平台提供了一些内置的登录模块，所有模块都可以再com.sun.security.auth.module包下找到：<br>Krb5LoginModule 【Kerberos认证】<br>JndiLoginModule 【使用LDAP/NIS的用户名/密码认证】<br>KeyStoreLoginModule 【基于Key store的认证】</p>
<h1 id="Secure-Communication"><a href="#Secure-Communication" class="headerlink" title="Secure Communication"></a>Secure Communication</h1><p>安全通信<br>数据走网络，总会通过一些不需要接收该信息的用户。当数据包含一些私人信息时(比如密码，信用卡号等），我们必须采取措施使这些信息不落入未经授权者之手。我们也需要确保数据在传输过程中不被他人篡改。<br>Cryptography(请见Cryptography小节)是安全通讯的基础。Java平台提供了很多API来支持和实现许多标准的安全通讯协议。<br>SSL/TLS<br>对于这部分协议的实现包含了数据加密、数据完整性、服务器认证和客户端认证(可选)功能。用户的应用可以使用<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="external">SSL/TLS</a>来为两端提供安全的数据通路。它支持任何应用协议，比如：HTTP。<br>javax.net.ssl.SSLSocket，这个socket类基于普通的stream socket(java.net.Socket)，并封装了SSL/TLS协议功能。此外，你的应用可能需要像New-I/O这样的交替式数据传输功能。javax.net.ssl.SSLEngine类可以帮你生成和解读SSL/TLS数据包。</p>
<p>Java平台还提供API支持插件式(基于Provider)的key manager和trust manager。Key Manager封装在javax.net.ssl.KeyManager内，它管理用于认证的密钥。trust manager封装在javax.net.ssl.TrustManager类中，由它来决断哪个用户是受信的，这基于它自身管理的Key store中的证书。<br>Java平台包含了一个内置的实现了SSL/TLS协议的Provider，它支持如下协议：</p>
<ul>
<li>SSLv3</li>
<li>TLSv1</li>
<li>TLSv1.1</li>
<li>TLSv1.2</li>
</ul>
<p>SASL<br><a href="http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82" target="_blank" rel="external">Simple Authentication and Security Layer</a>， SASL定义了认证数据如何被交换，但是它本身并没有指定认证数据的内容。SASL框架可以适用于任何SASL支持的认证机制。目前有很多 标准的SASL机制用于不同的安全级别和部署场景。</p>
<p>用户的应用使用Java的SASL API并不需要强制绑定任何特定的SASL机制，应用可以选择使用自己需要的机制。API支持客户端应用和服务端应用。用户可以使用javax.security.sasl.Sasl类创建SaslClient和SaslServer对象。</p>
<p>SASL机制的实现可以从provider包下找到。每个provider可能提供一个或多个SASL机制。这些provider已经注册到标准的provider架构中，用户可以很方便地使用它们。下面罗列Java平台提供的SASL provider：</p>
<ul>
<li>DRAM-MD5，DIGEST-MD5，EXTERNAL，GSSAPI，NTLM，PLAIN client machanisms <a href="http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82" target="_blank" rel="external">【协议相关的说明】</a></li>
<li>DRAM-MD5，DIGEST-MD5，GSSAPI，NTLM server machanisms <a href="http://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8%E5%B1%82" target="_blank" rel="external">【协议相关的说明】</a></li>
</ul>
<p>GSS-API and Kerberos<br>GSS-API, Generic Security Service Application Programming Interface。GSS-API提供应用开发者基于大量底层安全机制的统一安全服务入口。目前，Java的GSS-API需要使用Kerberos v5，而Java已经包含了内置的Kerberos实现。注意，之前介绍的Krb5LoginModule可以结合GSS Kerberos使用。此外，Java平台还有内置的SPNEGO(Simple and Protected GSS API Negotiation Mechanism)的实现。<br>在两个应用使用Java GSS-API安全通信之前，它们必须建立一个共同的安全上下文。上下文封装了共享的状态信息， 比如：密钥。这两个应用都需要创建并使用org.ietf.jgss.GSSContext对象去建立和维护这些共享信息。<br>Java GSS API放在org.ietf.jgss包下。Java平台也定义了基础的Kerberos类，比如KerberosPrinciple，KerberosTicket，KerberosKey和KeyTab。这些类都在javax.security.auth.kerberos包下。</p>
<h1 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h1><p>访问控制<br>Java平台的访问控制架构保护了对敏感资源(比如本地文件)或者应用代码(类的方法)的访问。所有访问控制的决策由security manager(java.lang.SecurityManger类)仲裁。<br>Java Applets和Java Web应用会自动使用SecurityManager。但是，本地的应用如果通过java命令来执行，默认是不会使用SecurityManager的。如果你想在上述情况下使用，那你的应用必须显示地设置它。在Java程序中，你可以调用java.lang.System#setSecurityManager方法来使用SecurityManager，你也可以通过设置参数的方式达成同样的效果：-Djava.security.manager。</p>
<p>权限<br>当Java代码被类加载器加载时，类加载器会为代码自动关联下列信息：</p>
<ul>
<li>代码从哪里加载的</li>
<li>谁签名了该代码(如果有的话)</li>
<li>授权给该代码的默认权限</li>
</ul>
<p>无论代码是从一个不受信的网络下载(比如: applet)还是从本地文件系统加载，以上信息都会关联到你的代码。代码的加载路径由一个URL表示，code signer是signer的证书链。默认的权限为java.security.Permission对象。<br>对于网络下载的代码，默认权限会自动授权代码可以访问下载源的主机。对于本地代码，代码默认有对于代码目录和子目录的访问权限。<br>值得注意的是，在类加载时，系统并不会去验证执行代码的用户身份。如果有必要，应该由应用代码来完成认证的工作(见上文认证小节)。 一旦用户通过认证，应用可以动态地关联运行代码的用户和被执行的代码。这个过程由javax.security.auth.Subject类的doAs方法完成。</p>
<p>策略 (Policy)<br>如上文所述，一个默认权限的有限集在类加载时由类加载器授权给了代码，Admin可以通过安全策略灵活地管理代码权限。<br>Java平台把策略封装在java.security.Policy类中。在任何时间，有且只有一个Policy对象被加载到了Java运行时。这个Policy负责仲裁代码是否可以访问受保护的资源。Policy如何仲裁则依赖于实现。比如，可以使用数据库保存授权信息或者使用一个外部的服务。<br>Java平台提供了默认的策略实现，它从一个或多个ASCII(UTF-8)文件中读取security properties。这些策略文件包含了授权给代码的权限集。这些策略必须符合特定的语法。策略文件可以由简单的文本编辑器或者图形化工具policytool编写。<br>Policy详解，policytool使用方式和例子: 面向Applet, 面向Application</p>
<p>执行访问控制<br>当应用请求访问受限资源时，默认来说，Java会评判整个调用栈来决定程序是否可以访问该资源。<br>如上文所述，资源受SecurityManager保护。Java平台和应用中的安全敏感代码保护着资源访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SecurityManager sm = System.getSecurityManager();  </div><div class="line">if (sm != null) &#123;  </div><div class="line">   sm.checkPermission(perm);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 代码中的perm是Permission对象，比如，要读取/tmp/abc文件，那么Permission对象可以构建如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Permission perm =   </div><div class="line">    new java.io.FilePermission(&quot;/tmp/abc&quot;, &quot;read&quot;);</div></pre></td></tr></table></figure></p>
<p>SecurityManager的默认实现把决策委派给java.security.AccessController的实现。AccessController会遍历调用栈中的每个代码元素的安全策略信息。这些策略基于Admin配置的permission决定请求是否被授权。如果未被授权则跑出java.lang.SecurityException异常。</p>
<p>下图描绘了访问控制的执行过程。在这个特定的例子中，调用栈中有两个元素：ClassA和ClassB。ClassA调用了ClassB的一个方法。这个方法会通过FileInputStream去访问/tmp/abc这个文件。FileInputStream的构造器创建了FilePermission：perm。接着，perm被传递给SecurityManager的checkPermission方法。在本例中，只有ClassA和ClassB的权限需要验证，这是因为，所有的系统代码(FileInputStream,SecurityManager,AccessController)自动获取了所有权限。</p>
<p>从图片中可以看到，ClassA和ClassB加载自不同的路径，并且签名者也不同。它们也可能被授予不同的权限集合。只有这两个类都被授予了访问abc的FilePermission，AccessController才会通过访问abc的请求。<br><img src="http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/images/4.jpg" alt="image"></p>
<h1 id="XML-Signature"><a href="#XML-Signature" class="headerlink" title="XML Signature"></a>XML Signature</h1><p>XML签名<br>Java XML数字签名API用于生成和校验XML的数字签名。XML签名可以应用于任何数据类，XML或者二进制。签名用XML表示。XML签名可以用来保护你的数据并提供数据完整性，消息认证，签名者认证功能。<br>API支持所有的W3C推荐的XML签名语法。API支持扩展和插件形式。它基于Java Cryptography服务provider架构。该API由6个包组成：</p>
<ul>
<li>javax.xml.crypto</li>
<li>javax.xml.crypto.dsig</li>
<li>javax.xml.crypto.dsig.keyinfo</li>
<li>javax.xml.crypto.dsig.spec</li>
<li>javax.xml.crypto.dom</li>
<li>javax.xml.crypto.dsig.dom</li>
</ul>
<blockquote>
<p>参考文章：<br><a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html</a><br><a href="http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/l-secureclass/index.html（强推荐）</a><br><a href="http://m635674608.iteye.com/blog/1844777（强推荐）" target="_blank" rel="external">http://m635674608.iteye.com/blog/1844777（强推荐）</a><br><a href="http://joshuasabrina.iteye.com/blog/1798245（强推荐）" target="_blank" rel="external">http://joshuasabrina.iteye.com/blog/1798245（强推荐）</a><br><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）" target="_blank" rel="external">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html（强推荐）</a><br><a href="http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/technotes/guides/security/overview/jsoverview.html（强推荐）</a><br><a href="http://www.cnblogs.com/NullPointException/p/5054082.html" target="_blank" rel="external">http://www.cnblogs.com/NullPointException/p/5054082.html</a><br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[工作快一年的回望]]></title>
      <url>http://jbeacon.top/2016/11/09/other/01/</url>
      <content type="html"><![CDATA[<p>不知不觉，我离开校门参不多快1年了，在出校门后遇到的林林总总，磕磕碰碰，繁琐心事。在蹉跎的工作中，一个毛头小子，初涉社会，不懂世故。<br>想想都是一把心酸泪。不开心的事，就不提了，在这里我说说我大学四年的总结吧，也好给自己一个交代，没白学。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[教你玩博客]]></title>
      <url>http://jbeacon.top/2016/11/07/guid/07/</url>
      <content type="html"><![CDATA[<p>大家好，我是灯塔下的笔者，很高兴您能访问我的博客。</p>
<h2 id="Quick-Start1"><a href="#Quick-Start1" class="headerlink" title="Quick Start1"></a>Quick Start1</h2><h2 id="Quick-Start2"><a href="#Quick-Start2" class="headerlink" title="Quick Start2"></a>Quick Start2</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://jbeacon.top/2016/11/06/guid/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://jbeacon.top/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是張日雄。欢迎来到我的个人技术博客。<br>个人主攻后端和技术架构,但懂点前端,会点运维，白天上班族，晚上知识的分享者。<br>高隔壁的叫全栈，土气点的叫万金油，伟大点的叫救火队员，实在点的叫打杂。<br>笔者不是什么技术大牛，写代码也不厉害，只是万花丛中一点绿，但会思考，会努力，要求未来的我比现在的我要好，一位心态阳光的奋斗者。在此总结我的个人成长经验有三点：善于观察、乐于解决问题、善于总结。<br>希望通过该博客总结自己的经验，积累知识。</p>
<p>个人写博客的目的，不是对技术的纯粹最求，尽管我是个技术爱好者，但我更爱生活，更愿意把当前的工作做好，so,为了干好当前的工作，我需要不断的驱动自己去学习，以此来完成当前或我未来将要解决一些问题的知识储备。<br>通过写这博客，我也不是太伟大，热衷于分享，我是个懒人，耐心不好（这也许是患了程序员症）。只是想在工作的时候，不想太费耐心讨论，教导，把文章一扔了事。<br>当然，在写文的过程中，我的表达能力和写作能力也得到了很大的提高。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://jbeacon.top/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签云]]></title>
      <url>http://jbeacon.top/tagcloud/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
